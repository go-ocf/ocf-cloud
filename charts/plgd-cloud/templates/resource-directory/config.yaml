{{- if .Values.resourcedirectory.enabled }}
{{- $rdCert := "/certs" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "plgd-cloud.resourcedirectory.configSecretName" . }}
  namespace: {{ .Release.Namespace }}
stringData:
  {{ .Values.resourcedirectory.config.fileName }}: |
    {{- with .Values.resourcedirectory }}
    log:
      debug: {{ .log.debug }}
    apis:
      grpc:
        address: {{  .apis.grpc.address | default (printf "0.0.0.0:%v" .port) | quote }}
        enforcementPolicy:
          minTime: {{ .apis.grpc.enforcementPolicy.minTime | quote }}
          permitWithoutStream: {{ .apis.grpc.enforcementPolicy.permitWithoutStream }}
        keepAlive:
          maxConnectionIdle: {{ .apis.grpc.keepAlive.maxConnectionIdle }}
          maxConnectionAge: {{ .apis.grpc.keepAlive.maxConnectionAge }}
          maxConnectionAgeGrace: {{ .apis.grpc.keepAlive.maxConnectionAgeGrace }}
          time: {{ .apis.grpc.keepAlive.time }}
          timeout: {{ .apis.grpc.keepAlive.timeout }}
        tls:
          {{- $tls := .apis.grpc.tls }}
          {{- include "plgd-cloud.certificateConfig" (list $ $tls $rdCert ) | indent 8 }}
          clientCertificateRequired: {{ .apis.grpc.tls.clientCertificateRequired }}
        authorization:
          ownerClaim:{{ printf " " }}{{ required "resourcedirectory.apis.grpc.authorization.ownerClaim or global.ownerClaim is required " ( .apis.grpc.authorization.ownerClaim | default $.Values.global.ownerClaim ) | quote }}
          authority:{{ printf " " }}{{ required "resourcedirectory.apis.grpc.authorization.authority or global.authority is required " ( .apis.grpc.authorization.authority | default $.Values.global.authority ) | quote }}
          audience:{{ printf " " }}{{ required "resourcedirectory.apis.grpc.authorization.audience or global.audience is required " ( .apis.grpc.authorization.audience | default $.Values.global.audience ) | quote }}
          http:
            maxIdleConns: {{ .apis.grpc.authorization.http.maxIdleConns }}
            maxConnsPerHost: {{ .apis.grpc.authorization.http.maxIdleConnsPerHost }}
            maxIdleConnsPerHost: {{ .apis.grpc.authorization.http.maxIdleConnsPerHost }}
            idleConnTimeout: {{ .apis.grpc.authorization.http.idleConnTimeout }}
            timeout: {{ .apis.grpc.authorization.http.timeout }}
            tls:
              {{- $grpcTls := .apis.grpc.authorization.http.tls }}
              {{- include "plgd-cloud.certificateConfig" (list $ $grpcTls $rdCert ) | indent 12 }}
              useSystemCAPool: {{ .apis.grpc.authorization.http.tls.useSystemCAPool }}
    clients:
      eventBus:
        goPoolSize: {{ .clients.eventBus.goPoolSize }}
        nats:
          url: {{ printf " " }}{{- include "plgd-cloud.natsUri" (list $ .clients.eventBus.nats.url) | quote }}
          pendingLimits:
            msgLimit: {{ printf "%v" .clients.eventBus.nats.pendingLimits.msgLimit }}
            bytesLimit: {{ printf "%v" .clients.eventBus.nats.pendingLimits.bytesLimit }}
          tls:
            {{- $natsTls := .clients.eventBus.nats.tls }}
            {{- include "plgd-cloud.certificateConfig" (list $ $natsTls $rdCert ) | indent 10 }}
            useSystemCAPool: {{ .clients.eventBus.nats.tls.useSystemCAPool }}
      eventStore:
        cacheExpiration: {{ .clients.eventStore.cacheExpiration }}
        mongoDB:
          uri:{{ printf " " }}{{- include "plgd-cloud.mongoDBUri" (list $ .clients.eventStore.mongoDB.uri)  | quote }}
          database: {{ .clients.eventStore.mongoDB.database }}
          batchSize: {{ .clients.eventStore.mongoDB.batchSize }}
          maxPoolSize: {{ .clients.eventStore.mongoDB.maxPoolSize }}
          maxConnIdleTime: {{ .clients.eventStore.mongoDB.maxConnIdleTime }}
          tls:
            {{- $mongoTls := .clients.eventStore.mongoDB.tls }}
            {{- include "plgd-cloud.certificateConfig" (list $ $natsTls $rdCert ) | indent 10 }}
            useSystemCAPool: {{ .clients.eventStore.mongoDB.tls.useSystemCAPool }}
      identityServer:
        pullFrequency: {{ .clients.identityServer.pullFrequency }}
        cacheExpiration: {{ .clients.identityServer.cacheExpiration }}
        ownerClaim: {{ .clients.identityServer.ownerClaim }}
        grpc:
          {{- $authorizationServer := .clients.identityServer.grpc.address }}
          address:{{ printf " " }}{{- include "plgd-cloud.idenityAddress" (list $ $authorizationServer ) | quote }}
          keepAlive:
            time: {{ .clients.identityServer.grpc.keepAlive.timeout }}
            timeout: {{ .clients.identityServer.grpc.keepAlive.timeout }}
            permitWithoutStream: {{ .clients.identityServer.grpc.keepAlive.permitWithoutStream }}
          tls:
            {{- $authClientTls := .clients.identityServer.grpc.tls }}
            {{- include "plgd-cloud.certificateConfig" (list $ $authClientTls $rdCert ) | indent 10 }}
            useSystemCAPool: {{ .clients.identityServer.grpc.tls.useSystemCAPool }}
    publicConfiguration:
      caPool: {{ .publicConfiguration.caPool | default "/certs/ca.crt" | quote }}
      authorizationServer: {{ required "resourcedirectory.publicConfiguration.authorizationServer is required" .publicConfiguration.authorizationServer  | quote }}
      ownerClaim: {{ .publicConfiguration.ownerClaim  | default $.Values.global.ownerClaim | quote }}
      signingServerAddress: {{ .publicConfiguration.signingServerAddress | default ( printf "api.%s:443" $.Values.global.domain ) | quote }}
      cloudID: {{ required "resourcedirectory.publicConfiguration.cloudID or coapgateway.cloudId or global.cloudId is required" ( .publicConfiguration.cloudID | default ( $.Values.coapgateway.cloudId | default $.Values.global.cloudId)) | quote }}
      cloudURL: {{ .publicConfiguration.cloudURL | default (printf "coaps+tcp://%s:%v" $.Values.global.domain $.Values.coapgateway.port ) | quote }}
      cloudAuthorizationProvider: {{ .publicConfiguration.cloudAuthorizationProvider | quote }}
      defaultCommandTimeToLive: {{ .publicConfiguration.defaultCommandTimeToLive | quote }}
  {{- end }}
{{- end }}