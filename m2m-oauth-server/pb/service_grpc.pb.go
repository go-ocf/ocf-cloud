// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: m2m-oauth-server/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	M2MOAuthServer_GetTokens_FullMethodName            = "/m2moauthserver.pb.M2MOAuthServer/GetTokens"
	M2MOAuthServer_GetBlacklistedTokens_FullMethodName = "/m2moauthserver.pb.M2MOAuthServer/GetBlacklistedTokens"
	M2MOAuthServer_BlacklistTokens_FullMethodName      = "/m2moauthserver.pb.M2MOAuthServer/BlacklistTokens"
)

// M2MOAuthServerClient is the client API for M2MOAuthServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type M2MOAuthServerClient interface {
	// Returns all tokens of the owner
	GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*Token, error)
	// Returns all blacklisted/revoked not expired tokens
	GetBlacklistedTokens(ctx context.Context, in *GetBlacklistedTokensRequest, opts ...grpc.CallOption) (*GetBlacklistedTokensResponse, error)
	// Blacklists/revokes tokens
	BlacklistTokens(ctx context.Context, in *BlacklistTokensRequest, opts ...grpc.CallOption) (*BlacklistTokensResponse, error)
}

type m2MOAuthServerClient struct {
	cc grpc.ClientConnInterface
}

func NewM2MOAuthServerClient(cc grpc.ClientConnInterface) M2MOAuthServerClient {
	return &m2MOAuthServerClient{cc}
}

func (c *m2MOAuthServerClient) GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, M2MOAuthServer_GetTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m2MOAuthServerClient) GetBlacklistedTokens(ctx context.Context, in *GetBlacklistedTokensRequest, opts ...grpc.CallOption) (*GetBlacklistedTokensResponse, error) {
	out := new(GetBlacklistedTokensResponse)
	err := c.cc.Invoke(ctx, M2MOAuthServer_GetBlacklistedTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m2MOAuthServerClient) BlacklistTokens(ctx context.Context, in *BlacklistTokensRequest, opts ...grpc.CallOption) (*BlacklistTokensResponse, error) {
	out := new(BlacklistTokensResponse)
	err := c.cc.Invoke(ctx, M2MOAuthServer_BlacklistTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// M2MOAuthServerServer is the server API for M2MOAuthServer service.
// All implementations must embed UnimplementedM2MOAuthServerServer
// for forward compatibility
type M2MOAuthServerServer interface {
	// Returns all tokens of the owner
	GetTokens(context.Context, *GetTokensRequest) (*Token, error)
	// Returns all blacklisted/revoked not expired tokens
	GetBlacklistedTokens(context.Context, *GetBlacklistedTokensRequest) (*GetBlacklistedTokensResponse, error)
	// Blacklists/revokes tokens
	BlacklistTokens(context.Context, *BlacklistTokensRequest) (*BlacklistTokensResponse, error)
	mustEmbedUnimplementedM2MOAuthServerServer()
}

// UnimplementedM2MOAuthServerServer must be embedded to have forward compatible implementations.
type UnimplementedM2MOAuthServerServer struct {
}

func (UnimplementedM2MOAuthServerServer) GetTokens(context.Context, *GetTokensRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedM2MOAuthServerServer) GetBlacklistedTokens(context.Context, *GetBlacklistedTokensRequest) (*GetBlacklistedTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistedTokens not implemented")
}
func (UnimplementedM2MOAuthServerServer) BlacklistTokens(context.Context, *BlacklistTokensRequest) (*BlacklistTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistTokens not implemented")
}
func (UnimplementedM2MOAuthServerServer) mustEmbedUnimplementedM2MOAuthServerServer() {}

// UnsafeM2MOAuthServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to M2MOAuthServerServer will
// result in compilation errors.
type UnsafeM2MOAuthServerServer interface {
	mustEmbedUnimplementedM2MOAuthServerServer()
}

func RegisterM2MOAuthServerServer(s grpc.ServiceRegistrar, srv M2MOAuthServerServer) {
	s.RegisterService(&M2MOAuthServer_ServiceDesc, srv)
}

func _M2MOAuthServer_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MOAuthServerServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: M2MOAuthServer_GetTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MOAuthServerServer).GetTokens(ctx, req.(*GetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M2MOAuthServer_GetBlacklistedTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlacklistedTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MOAuthServerServer).GetBlacklistedTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: M2MOAuthServer_GetBlacklistedTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MOAuthServerServer).GetBlacklistedTokens(ctx, req.(*GetBlacklistedTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M2MOAuthServer_BlacklistTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MOAuthServerServer).BlacklistTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: M2MOAuthServer_BlacklistTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MOAuthServerServer).BlacklistTokens(ctx, req.(*BlacklistTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// M2MOAuthServer_ServiceDesc is the grpc.ServiceDesc for M2MOAuthServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var M2MOAuthServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "m2moauthserver.pb.M2MOAuthServer",
	HandlerType: (*M2MOAuthServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokens",
			Handler:    _M2MOAuthServer_GetTokens_Handler,
		},
		{
			MethodName: "GetBlacklistedTokens",
			Handler:    _M2MOAuthServer_GetBlacklistedTokens_Handler,
		},
		{
			MethodName: "BlacklistTokens",
			Handler:    _M2MOAuthServer_BlacklistTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m2m-oauth-server/pb/service.proto",
}
