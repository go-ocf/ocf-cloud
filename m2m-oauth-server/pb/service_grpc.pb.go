// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: m2m-oauth-server/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	M2MOAuthService_CreateToken_FullMethodName  = "/m2moauthserver.pb.M2MOAuthService/CreateToken"
	M2MOAuthService_GetTokens_FullMethodName    = "/m2moauthserver.pb.M2MOAuthService/GetTokens"
	M2MOAuthService_DeleteTokens_FullMethodName = "/m2moauthserver.pb.M2MOAuthService/DeleteTokens"
)

// M2MOAuthServiceClient is the client API for M2MOAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type M2MOAuthServiceClient interface {
	// Creates a new token
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	// Returns all tokens of the owner
	GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Token], error)
	// Deletes/blacklist tokens
	DeleteTokens(ctx context.Context, in *DeleteTokensRequest, opts ...grpc.CallOption) (*DeleteTokensResponse, error)
}

type m2MOAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewM2MOAuthServiceClient(cc grpc.ClientConnInterface) M2MOAuthServiceClient {
	return &m2MOAuthServiceClient{cc}
}

func (c *m2MOAuthServiceClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, M2MOAuthService_CreateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m2MOAuthServiceClient) GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Token], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &M2MOAuthService_ServiceDesc.Streams[0], M2MOAuthService_GetTokens_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTokensRequest, Token]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type M2MOAuthService_GetTokensClient = grpc.ServerStreamingClient[Token]

func (c *m2MOAuthServiceClient) DeleteTokens(ctx context.Context, in *DeleteTokensRequest, opts ...grpc.CallOption) (*DeleteTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTokensResponse)
	err := c.cc.Invoke(ctx, M2MOAuthService_DeleteTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// M2MOAuthServiceServer is the server API for M2MOAuthService service.
// All implementations must embed UnimplementedM2MOAuthServiceServer
// for forward compatibility.
type M2MOAuthServiceServer interface {
	// Creates a new token
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	// Returns all tokens of the owner
	GetTokens(*GetTokensRequest, grpc.ServerStreamingServer[Token]) error
	// Deletes/blacklist tokens
	DeleteTokens(context.Context, *DeleteTokensRequest) (*DeleteTokensResponse, error)
	mustEmbedUnimplementedM2MOAuthServiceServer()
}

// UnimplementedM2MOAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedM2MOAuthServiceServer struct{}

func (UnimplementedM2MOAuthServiceServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedM2MOAuthServiceServer) GetTokens(*GetTokensRequest, grpc.ServerStreamingServer[Token]) error {
	return status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedM2MOAuthServiceServer) DeleteTokens(context.Context, *DeleteTokensRequest) (*DeleteTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTokens not implemented")
}
func (UnimplementedM2MOAuthServiceServer) mustEmbedUnimplementedM2MOAuthServiceServer() {}
func (UnimplementedM2MOAuthServiceServer) testEmbeddedByValue()                         {}

// UnsafeM2MOAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to M2MOAuthServiceServer will
// result in compilation errors.
type UnsafeM2MOAuthServiceServer interface {
	mustEmbedUnimplementedM2MOAuthServiceServer()
}

func RegisterM2MOAuthServiceServer(s grpc.ServiceRegistrar, srv M2MOAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedM2MOAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&M2MOAuthService_ServiceDesc, srv)
}

func _M2MOAuthService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MOAuthServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: M2MOAuthService_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MOAuthServiceServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M2MOAuthService_GetTokens_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTokensRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(M2MOAuthServiceServer).GetTokens(m, &grpc.GenericServerStream[GetTokensRequest, Token]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type M2MOAuthService_GetTokensServer = grpc.ServerStreamingServer[Token]

func _M2MOAuthService_DeleteTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MOAuthServiceServer).DeleteTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: M2MOAuthService_DeleteTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MOAuthServiceServer).DeleteTokens(ctx, req.(*DeleteTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// M2MOAuthService_ServiceDesc is the grpc.ServiceDesc for M2MOAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var M2MOAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "m2moauthserver.pb.M2MOAuthService",
	HandlerType: (*M2MOAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _M2MOAuthService_CreateToken_Handler,
		},
		{
			MethodName: "DeleteTokens",
			Handler:    _M2MOAuthService_DeleteTokens_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTokens",
			Handler:       _M2MOAuthService_GetTokens_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "m2m-oauth-server/pb/service.proto",
}
