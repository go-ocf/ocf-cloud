name: Run bundle on workflow dispatch from github

on:
  workflow_dispatch:
    inputs:
      bundle_tag:
        description: 'Tag of bundle'
        required: true
        default: 'vnext'
      cloud_server_tag:
        description: 'Tag of cloud server'
        required: true
        default: 'vnext'
      cloud_server_log_level:
        description: 'Log level of cloud server (disabled, trace, debug, info, warning, error)'
        required: true
        default: 'info'
      number_devices:
        description: 'Number of devices'
        required: true
        default: '1'
      number_device_resources:
        description: 'Number of device resources'
        required: true
        default: '1'

env:
  cloud_server_image: ghcr.io/iotivity/iotivity-lite/cloud-server-discovery-resource-observable-debug
  cloud_server_tag: vnext
  cloud_server_log_level: info
  number_devices: 1
  number_device_resources: 1

jobs:
  run-bundle:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: ${{ github.ref_name != 'main' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install ngrok and run ngrok for HTTP
      uses: luisboto/ngrok-tunnel-action@v0.1.7.2
      with:
        timeout: 6h
        port: 443
        tunnel_type: http
        ngrok_authtoken: ${{ secrets.NGROK_0_HTTP }}
        save_url_to_filename: ngrok_http.txt
    
    - name: Print bundle HTTP URL
      run: |
        cat ngrok_http.txt

    - name: Parse bundle HTTP URL
      id: parse_ngrok_http
      run: |
        echo "fqdn=$(cat ngrok_http.txt | sed -e 's/[htcp][htcps]*:\/\///g' | cut -d ":" -f 1)" >> "$GITHUB_OUTPUT"

    - name: Setup ngrok for CoAP
      run: |
        echo 'web_addr: 4045' > ngrok_coap.yml
        ./ngrok authtoken ${{ secrets.NGROK_0_COAP }} --config ngrok_coap.yml
    
    - name: Run ngrok for CoAP
      run: |
        ( timeout 6h ./ngrok tcp 5684 --config ngrok_coap.yml) &
        sleep 1
        curl http://127.0.0.1:4045/api/tunnels | jq -r ".tunnels[0].public_url" > ngrok_coap.txt
    
    - name: Print bundle CoAP Address
      run: |
        cat ngrok_coap.txt
    
    - name: Parse bundle CoAP external address
      id: parse_ngrok_coap
      run: |
        echo "coap_gateway_external_address=$(cat ngrok_coap.txt | sed -e 's/[htcp][htcps]*:\/\///g')" >> "$GITHUB_OUTPUT"
  
    - name: Extract metadata (tags, labels) for docker image
      id: docker_meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/plgd-dev/hub/bundle
        tags: |
          type=raw,enable={{is_default_branch}},value=vnext
          type=ref,event=pr,prefix=vnext-pr
          type=ref,enable={{is_default_branch}},event=branch
    
    - name: Set tag of bundle
      id: meta
      run: |
        if [ -n "${{ inputs.bundle_tag }}" ]; then
          echo "tag=${{ inputs.bundle_tag }}" >> "$GITHUB_OUTPUT"
        elif [ -n "${{ steps.docker_meta.outputs.version }}" ]; then
          echo "tag=${{ steps.docker_meta.outputs.version }}" >> "$GITHUB_OUTPUT"
        else
          echo "tag=vnext" >> "$GITHUB_OUTPUT"
        fi

    - name: Run bundle
      run: |
        mkdir -p `pwd`/.tmp/bundle
        docker run -d \
          --name=bundle \
          --network=host \
          -v `pwd`/.tmp/bundle:/data \
          -e LOG_LEVEL=DEBUG \
          -e COAP_GATEWAY_HUB_ID=$(uuidgen) \
          -e COAP_GATEWAY_EXTERNAL_ADDRESS=${{ steps.parse_ngrok_coap.outputs.coap_gateway_external_address }} \
          -e FQDN=${{ steps.parse_ngrok_http.outputs.fqdn }} \
          -e OWNER_CLAIM=sub \
          ghcr.io/plgd-dev/hub/bundle:${{ steps.meta.outputs.tag }}

    - name: Set cloud server vars
      id: cloud_server_vars
      run: |
        if [ -n "${{ inputs.cloud_server_tag }}" ]; then
          echo "tag=${{ inputs.cloud_server_tag }}" >> "$GITHUB_OUTPUT"
        else
          echo "tag=${{ env.cloud_server_tag }}" >> "$GITHUB_OUTPUT"
        fi
        if [ -n "${{ inputs.number_devices }}" ]; then
          echo "number_devices=${{ inputs.number_devices }}" >> "$GITHUB_OUTPUT"
        else
          echo "number_devices=${{ env.number_devices }}" >> "$GITHUB_OUTPUT"
        fi
        if [ -n "${{ inputs.number_device_resources }}" ]; then
          echo "number_device_resources=${{ inputs.number_device_resources }}" >> "$GITHUB_OUTPUT"
        else
          echo "number_device_resources=${{ env.number_device_resources }}" >> "$GITHUB_OUTPUT"
        fi
        if [ -n "${{ inputs.cloud_server_log_level }}" ]; then
          echo "log_level=${{ inputs.cloud_server_log_level }}" >> "$GITHUB_OUTPUT"
        else
          echo "log_level=${{ env.cloud_server_log_level }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Run simulators
      run: |
        mkdir -p `pwd`/.tmp/devices
        docker run --rm -d \
          --network=host \
          --name devices \
          --privileged \
          -v `pwd`/.tmp/devices:/tmp \
          -e NUM_DEVICES=${{ steps.cloud_server_vars.outputs.number_devices }} \
          ${{ env.cloud_server_image }}:${{ steps.cloud_server_vars.outputs.tag }} -l ${{ steps.cloud_server_vars.outputs.log_level }} device-simulator auth coaps+tcp://127.0.0.1:5684 cis apn ${{ steps.cloud_server_vars.outputs.number_device_resources }}
      
    - name: Onboard simulators
      run: |
        go build -o onboard ./bundle/client/ob
        ./onboard -maxNum ${{ steps.cloud_server_vars.outputs.number_devices }}
  
    - name: Pause workflow
      # wait for 5 hours and generate lines to prevent workflow from being killed
      run: |
        docker logs bundle
        for ((i=0;i<300;i++)); do
          sleep 60
          echo "Workflow paused for $((i+1)) minutes from 300 minutes"
        done
    
    - name: Stop simulators
      if: cancelled() || failure() || success()
      run: |
        docker stop devices
        
    - name : Stop bundle
      if: cancelled() || failure() || success()
      run: |
        docker stop bundle

    - name: Collect bundle logs
      if: cancelled() || failure() || success()
      uses: actions/upload-artifact@v3
      with:
        name: bundle_logs
        path: .tmp/bundle/log/*.log
        retention-days: 5
    
    - name: Collect devices logs
      if: cancelled() || failure() || success()
      uses: actions/upload-artifact@v3
      with:
        name: devices_logs
        path: .tmp/devices/*.log
        retention-days: 5

          

