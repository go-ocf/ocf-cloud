// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: snapshot-service/pb/rule.proto

package pb

import (
	commands "github.com/plgd-dev/hub/v2/resource-aggregate/commands"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelationalOperator int32

const (
	RelationalOperator_EQUAL                 RelationalOperator = 0
	RelationalOperator_NOT_EQUAL             RelationalOperator = 1
	RelationalOperator_LESS_THAN             RelationalOperator = 2
	RelationalOperator_LESS_THAN_OR_EQUAL    RelationalOperator = 3
	RelationalOperator_GREATER_THAN          RelationalOperator = 4
	RelationalOperator_GREATER_THAN_OR_EQUAL RelationalOperator = 5
)

// Enum value maps for RelationalOperator.
var (
	RelationalOperator_name = map[int32]string{
		0: "EQUAL",
		1: "NOT_EQUAL",
		2: "LESS_THAN",
		3: "LESS_THAN_OR_EQUAL",
		4: "GREATER_THAN",
		5: "GREATER_THAN_OR_EQUAL",
	}
	RelationalOperator_value = map[string]int32{
		"EQUAL":                 0,
		"NOT_EQUAL":             1,
		"LESS_THAN":             2,
		"LESS_THAN_OR_EQUAL":    3,
		"GREATER_THAN":          4,
		"GREATER_THAN_OR_EQUAL": 5,
	}
)

func (x RelationalOperator) Enum() *RelationalOperator {
	p := new(RelationalOperator)
	*p = x
	return p
}

func (x RelationalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_snapshot_service_pb_rule_proto_enumTypes[0].Descriptor()
}

func (RelationalOperator) Type() protoreflect.EnumType {
	return &file_snapshot_service_pb_rule_proto_enumTypes[0]
}

func (x RelationalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationalOperator.Descriptor instead.
func (RelationalOperator) EnumDescriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{0}
}

type StringOperator int32

const (
	StringOperator_CONTAINS         StringOperator = 0
	StringOperator_DOES_NOT_CONTAIN StringOperator = 1
	StringOperator_STARTS_WITH      StringOperator = 2
	StringOperator_ENDS_WITH        StringOperator = 3
)

// Enum value maps for StringOperator.
var (
	StringOperator_name = map[int32]string{
		0: "CONTAINS",
		1: "DOES_NOT_CONTAIN",
		2: "STARTS_WITH",
		3: "ENDS_WITH",
	}
	StringOperator_value = map[string]int32{
		"CONTAINS":         0,
		"DOES_NOT_CONTAIN": 1,
		"STARTS_WITH":      2,
		"ENDS_WITH":        3,
	}
)

func (x StringOperator) Enum() *StringOperator {
	p := new(StringOperator)
	*p = x
	return p
}

func (x StringOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_snapshot_service_pb_rule_proto_enumTypes[1].Descriptor()
}

func (StringOperator) Type() protoreflect.EnumType {
	return &file_snapshot_service_pb_rule_proto_enumTypes[1]
}

func (x StringOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringOperator.Descriptor instead.
func (StringOperator) EnumDescriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{1}
}

type LogicalOperator int32

const (
	LogicalOperator_AND LogicalOperator = 0
	LogicalOperator_OR  LogicalOperator = 1
)

// Enum value maps for LogicalOperator.
var (
	LogicalOperator_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	LogicalOperator_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x LogicalOperator) Enum() *LogicalOperator {
	p := new(LogicalOperator)
	*p = x
	return p
}

func (x LogicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_snapshot_service_pb_rule_proto_enumTypes[2].Descriptor()
}

func (LogicalOperator) Type() protoreflect.EnumType {
	return &file_snapshot_service_pb_rule_proto_enumTypes[2]
}

func (x LogicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalOperator.Descriptor instead.
func (LogicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{2}
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Expression  *RuleExpression `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	Enabled     bool            `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Owner       string          `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{0}
}

func (x *Rule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Rule) GetExpression() *RuleExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Rule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Rule) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type RuleExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//
	//	*RuleExpression_RelationalExpression
	//	*RuleExpression_LogicalExpression
	//	*RuleExpression_ParenthesesExpression
	//	*RuleExpression_NegationExpression
	Expression isRuleExpression_Expression `protobuf_oneof:"expression"`
}

func (x *RuleExpression) Reset() {
	*x = RuleExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleExpression) ProtoMessage() {}

func (x *RuleExpression) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleExpression.ProtoReflect.Descriptor instead.
func (*RuleExpression) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{1}
}

func (m *RuleExpression) GetExpression() isRuleExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *RuleExpression) GetRelationalExpression() *RelationalExpression {
	if x, ok := x.GetExpression().(*RuleExpression_RelationalExpression); ok {
		return x.RelationalExpression
	}
	return nil
}

func (x *RuleExpression) GetLogicalExpression() *LogicalExpression {
	if x, ok := x.GetExpression().(*RuleExpression_LogicalExpression); ok {
		return x.LogicalExpression
	}
	return nil
}

func (x *RuleExpression) GetParenthesesExpression() *ParenthesesExpression {
	if x, ok := x.GetExpression().(*RuleExpression_ParenthesesExpression); ok {
		return x.ParenthesesExpression
	}
	return nil
}

func (x *RuleExpression) GetNegationExpression() *NegationExpression {
	if x, ok := x.GetExpression().(*RuleExpression_NegationExpression); ok {
		return x.NegationExpression
	}
	return nil
}

type isRuleExpression_Expression interface {
	isRuleExpression_Expression()
}

type RuleExpression_RelationalExpression struct {
	RelationalExpression *RelationalExpression `protobuf:"bytes,1,opt,name=relational_expression,json=relationalExpression,proto3,oneof"`
}

type RuleExpression_LogicalExpression struct {
	LogicalExpression *LogicalExpression `protobuf:"bytes,2,opt,name=logical_expression,json=logicalExpression,proto3,oneof"`
}

type RuleExpression_ParenthesesExpression struct {
	ParenthesesExpression *ParenthesesExpression `protobuf:"bytes,3,opt,name=parentheses_expression,json=parenthesesExpression,proto3,oneof"`
}

type RuleExpression_NegationExpression struct {
	NegationExpression *NegationExpression `protobuf:"bytes,4,opt,name=negation_expression,json=negationExpression,proto3,oneof"`
}

func (*RuleExpression_RelationalExpression) isRuleExpression_Expression() {}

func (*RuleExpression_LogicalExpression) isRuleExpression_Expression() {}

func (*RuleExpression_ParenthesesExpression) isRuleExpression_Expression() {}

func (*RuleExpression_NegationExpression) isRuleExpression_Expression() {}

type RelationalOperand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operand:
	//
	//	*RelationalOperand_Scalar
	//	*RelationalOperand_ResourceProperty
	Operand isRelationalOperand_Operand `protobuf_oneof:"operand"`
}

func (x *RelationalOperand) Reset() {
	*x = RelationalOperand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationalOperand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationalOperand) ProtoMessage() {}

func (x *RelationalOperand) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationalOperand.ProtoReflect.Descriptor instead.
func (*RelationalOperand) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{2}
}

func (m *RelationalOperand) GetOperand() isRelationalOperand_Operand {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (x *RelationalOperand) GetScalar() *structpb.Value {
	if x, ok := x.GetOperand().(*RelationalOperand_Scalar); ok {
		return x.Scalar
	}
	return nil
}

func (x *RelationalOperand) GetResourceProperty() *ResourceProperty {
	if x, ok := x.GetOperand().(*RelationalOperand_ResourceProperty); ok {
		return x.ResourceProperty
	}
	return nil
}

type isRelationalOperand_Operand interface {
	isRelationalOperand_Operand()
}

type RelationalOperand_Scalar struct {
	Scalar *structpb.Value `protobuf:"bytes,1,opt,name=scalar,proto3,oneof"`
}

type RelationalOperand_ResourceProperty struct {
	ResourceProperty *ResourceProperty `protobuf:"bytes,2,opt,name=resource_property,json=resourceProperty,proto3,oneof"`
}

func (*RelationalOperand_Scalar) isRelationalOperand_Operand() {}

func (*RelationalOperand_ResourceProperty) isRelationalOperand_Operand() {}

type RelationalExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftOperand *RelationalOperand `protobuf:"bytes,1,opt,name=left_operand,json=leftOperand,proto3" json:"left_operand,omitempty"`
	// Types that are assignable to Operator:
	//
	//	*RelationalExpression_Compare
	//	*RelationalExpression_String_
	Operator     isRelationalExpression_Operator `protobuf_oneof:"operator"`
	RightOperand *RelationalOperand              `protobuf:"bytes,16,opt,name=right_operand,json=rightOperand,proto3" json:"right_operand,omitempty"`
}

func (x *RelationalExpression) Reset() {
	*x = RelationalExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationalExpression) ProtoMessage() {}

func (x *RelationalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationalExpression.ProtoReflect.Descriptor instead.
func (*RelationalExpression) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{3}
}

func (x *RelationalExpression) GetLeftOperand() *RelationalOperand {
	if x != nil {
		return x.LeftOperand
	}
	return nil
}

func (m *RelationalExpression) GetOperator() isRelationalExpression_Operator {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (x *RelationalExpression) GetCompare() RelationalOperator {
	if x, ok := x.GetOperator().(*RelationalExpression_Compare); ok {
		return x.Compare
	}
	return RelationalOperator_EQUAL
}

func (x *RelationalExpression) GetString_() StringOperator {
	if x, ok := x.GetOperator().(*RelationalExpression_String_); ok {
		return x.String_
	}
	return StringOperator_CONTAINS
}

func (x *RelationalExpression) GetRightOperand() *RelationalOperand {
	if x != nil {
		return x.RightOperand
	}
	return nil
}

type isRelationalExpression_Operator interface {
	isRelationalExpression_Operator()
}

type RelationalExpression_Compare struct {
	Compare RelationalOperator `protobuf:"varint,2,opt,name=compare,proto3,enum=snapshotservice.pb.RelationalOperator,oneof"`
}

type RelationalExpression_String_ struct {
	String_ StringOperator `protobuf:"varint,3,opt,name=string,proto3,enum=snapshotservice.pb.StringOperator,oneof"`
}

func (*RelationalExpression_Compare) isRelationalExpression_Operator() {}

func (*RelationalExpression_String_) isRelationalExpression_Operator() {}

type LogicalExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftExpression  *RuleExpression `protobuf:"bytes,1,opt,name=left_expression,json=leftExpression,proto3" json:"left_expression,omitempty"`
	Operator        LogicalOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=snapshotservice.pb.LogicalOperator" json:"operator,omitempty"`
	RightExpression *RuleExpression `protobuf:"bytes,3,opt,name=right_expression,json=rightExpression,proto3" json:"right_expression,omitempty"`
}

func (x *LogicalExpression) Reset() {
	*x = LogicalExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalExpression) ProtoMessage() {}

func (x *LogicalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalExpression.ProtoReflect.Descriptor instead.
func (*LogicalExpression) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{4}
}

func (x *LogicalExpression) GetLeftExpression() *RuleExpression {
	if x != nil {
		return x.LeftExpression
	}
	return nil
}

func (x *LogicalExpression) GetOperator() LogicalOperator {
	if x != nil {
		return x.Operator
	}
	return LogicalOperator_AND
}

func (x *LogicalExpression) GetRightExpression() *RuleExpression {
	if x != nil {
		return x.RightExpression
	}
	return nil
}

type ParenthesesExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerExpression *RuleExpression `protobuf:"bytes,1,opt,name=inner_expression,json=innerExpression,proto3" json:"inner_expression,omitempty"`
}

func (x *ParenthesesExpression) Reset() {
	*x = ParenthesesExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParenthesesExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParenthesesExpression) ProtoMessage() {}

func (x *ParenthesesExpression) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParenthesesExpression.ProtoReflect.Descriptor instead.
func (*ParenthesesExpression) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{5}
}

func (x *ParenthesesExpression) GetInnerExpression() *RuleExpression {
	if x != nil {
		return x.InnerExpression
	}
	return nil
}

type NegationExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerExpression *RuleExpression `protobuf:"bytes,1,opt,name=inner_expression,json=innerExpression,proto3" json:"inner_expression,omitempty"`
}

func (x *NegationExpression) Reset() {
	*x = NegationExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegationExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegationExpression) ProtoMessage() {}

func (x *NegationExpression) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegationExpression.ProtoReflect.Descriptor instead.
func (*NegationExpression) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{6}
}

func (x *NegationExpression) GetInnerExpression() *RuleExpression {
	if x != nil {
		return x.InnerExpression
	}
	return nil
}

type RepeatedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RepeatedString) Reset() {
	*x = RepeatedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedString) ProtoMessage() {}

func (x *RepeatedString) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedString.ProtoReflect.Descriptor instead.
func (*RepeatedString) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{7}
}

func (x *RepeatedString) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type OriginId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*OriginId_Href
	//	*OriginId_Types
	Resource isOriginId_Resource `protobuf_oneof:"resource"`
}

func (x *OriginId) Reset() {
	*x = OriginId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginId) ProtoMessage() {}

func (x *OriginId) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginId.ProtoReflect.Descriptor instead.
func (*OriginId) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{8}
}

func (m *OriginId) GetResource() isOriginId_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *OriginId) GetHref() string {
	if x, ok := x.GetResource().(*OriginId_Href); ok {
		return x.Href
	}
	return ""
}

func (x *OriginId) GetTypes() *RepeatedString {
	if x, ok := x.GetResource().(*OriginId_Types); ok {
		return x.Types
	}
	return nil
}

type isOriginId_Resource interface {
	isOriginId_Resource()
}

type OriginId_Href struct {
	Href string `protobuf:"bytes,1,opt,name=href,proto3,oneof"` // path to resource in the device (e.g. /oic/d )
}

type OriginId_Types struct {
	Types *RepeatedString `protobuf:"bytes,2,opt,name=types,proto3,oneof"` // resource must contains all types (e.g. [oic.r.switch.binary])
}

func (*OriginId_Href) isOriginId_Resource() {}

func (*OriginId_Types) isOriginId_Resource() {}

type ResourceProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResourceSource:
	//
	//	*ResourceProperty_OriginId
	//	*ResourceProperty_ResourceId
	ResourceSource isResourceProperty_ResourceSource `protobuf_oneof:"resource_source"`
	PropertyPath   string                            `protobuf:"bytes,3,opt,name=property_path,json=propertyPath,proto3" json:"property_path,omitempty"` // jq-like path
}

func (x *ResourceProperty) Reset() {
	*x = ResourceProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceProperty) ProtoMessage() {}

func (x *ResourceProperty) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceProperty.ProtoReflect.Descriptor instead.
func (*ResourceProperty) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_rule_proto_rawDescGZIP(), []int{9}
}

func (m *ResourceProperty) GetResourceSource() isResourceProperty_ResourceSource {
	if m != nil {
		return m.ResourceSource
	}
	return nil
}

func (x *ResourceProperty) GetOriginId() *OriginId {
	if x, ok := x.GetResourceSource().(*ResourceProperty_OriginId); ok {
		return x.OriginId
	}
	return nil
}

func (x *ResourceProperty) GetResourceId() *commands.ResourceId {
	if x, ok := x.GetResourceSource().(*ResourceProperty_ResourceId); ok {
		return x.ResourceId
	}
	return nil
}

func (x *ResourceProperty) GetPropertyPath() string {
	if x != nil {
		return x.PropertyPath
	}
	return ""
}

type isResourceProperty_ResourceSource interface {
	isResourceProperty_ResourceSource()
}

type ResourceProperty_OriginId struct {
	OriginId *OriginId `protobuf:"bytes,1,opt,name=origin_id,json=originId,proto3,oneof"`
}

type ResourceProperty_ResourceId struct {
	ResourceId *commands.ResourceId `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3,oneof"`
}

func (*ResourceProperty_OriginId) isResourceProperty_ResourceSource() {}

func (*ResourceProperty_ResourceId) isResourceProperty_ResourceSource() {}

var File_snapshot_service_pb_rule_proto protoreflect.FileDescriptor

var file_snapshot_service_pb_rule_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x1a, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x96, 0x03, 0x0a,
	0x0e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x5f, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x56, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x65, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x13,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x53, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0xba, 0x02,
	0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x52, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x11, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6c,
	0x65, 0x66, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d,
	0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a,
	0x15, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x12, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x68, 0x0a, 0x08, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04,
	0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x72,
	0x65, 0x66, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x50, 0x61, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2a, 0x82, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x54,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x10, 0x03, 0x2a, 0x22, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x67, 0x64, 0x2d, 0x64, 0x65, 0x76, 0x2f,
	0x68, 0x75, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snapshot_service_pb_rule_proto_rawDescOnce sync.Once
	file_snapshot_service_pb_rule_proto_rawDescData = file_snapshot_service_pb_rule_proto_rawDesc
)

func file_snapshot_service_pb_rule_proto_rawDescGZIP() []byte {
	file_snapshot_service_pb_rule_proto_rawDescOnce.Do(func() {
		file_snapshot_service_pb_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_snapshot_service_pb_rule_proto_rawDescData)
	})
	return file_snapshot_service_pb_rule_proto_rawDescData
}

var file_snapshot_service_pb_rule_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_snapshot_service_pb_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_snapshot_service_pb_rule_proto_goTypes = []interface{}{
	(RelationalOperator)(0),       // 0: snapshotservice.pb.RelationalOperator
	(StringOperator)(0),           // 1: snapshotservice.pb.StringOperator
	(LogicalOperator)(0),          // 2: snapshotservice.pb.LogicalOperator
	(*Rule)(nil),                  // 3: snapshotservice.pb.Rule
	(*RuleExpression)(nil),        // 4: snapshotservice.pb.RuleExpression
	(*RelationalOperand)(nil),     // 5: snapshotservice.pb.RelationalOperand
	(*RelationalExpression)(nil),  // 6: snapshotservice.pb.RelationalExpression
	(*LogicalExpression)(nil),     // 7: snapshotservice.pb.LogicalExpression
	(*ParenthesesExpression)(nil), // 8: snapshotservice.pb.ParenthesesExpression
	(*NegationExpression)(nil),    // 9: snapshotservice.pb.NegationExpression
	(*RepeatedString)(nil),        // 10: snapshotservice.pb.RepeatedString
	(*OriginId)(nil),              // 11: snapshotservice.pb.OriginId
	(*ResourceProperty)(nil),      // 12: snapshotservice.pb.ResourceProperty
	(*structpb.Value)(nil),        // 13: google.protobuf.Value
	(*commands.ResourceId)(nil),   // 14: resourceaggregate.pb.ResourceId
}
var file_snapshot_service_pb_rule_proto_depIdxs = []int32{
	4,  // 0: snapshotservice.pb.Rule.expression:type_name -> snapshotservice.pb.RuleExpression
	6,  // 1: snapshotservice.pb.RuleExpression.relational_expression:type_name -> snapshotservice.pb.RelationalExpression
	7,  // 2: snapshotservice.pb.RuleExpression.logical_expression:type_name -> snapshotservice.pb.LogicalExpression
	8,  // 3: snapshotservice.pb.RuleExpression.parentheses_expression:type_name -> snapshotservice.pb.ParenthesesExpression
	9,  // 4: snapshotservice.pb.RuleExpression.negation_expression:type_name -> snapshotservice.pb.NegationExpression
	13, // 5: snapshotservice.pb.RelationalOperand.scalar:type_name -> google.protobuf.Value
	12, // 6: snapshotservice.pb.RelationalOperand.resource_property:type_name -> snapshotservice.pb.ResourceProperty
	5,  // 7: snapshotservice.pb.RelationalExpression.left_operand:type_name -> snapshotservice.pb.RelationalOperand
	0,  // 8: snapshotservice.pb.RelationalExpression.compare:type_name -> snapshotservice.pb.RelationalOperator
	1,  // 9: snapshotservice.pb.RelationalExpression.string:type_name -> snapshotservice.pb.StringOperator
	5,  // 10: snapshotservice.pb.RelationalExpression.right_operand:type_name -> snapshotservice.pb.RelationalOperand
	4,  // 11: snapshotservice.pb.LogicalExpression.left_expression:type_name -> snapshotservice.pb.RuleExpression
	2,  // 12: snapshotservice.pb.LogicalExpression.operator:type_name -> snapshotservice.pb.LogicalOperator
	4,  // 13: snapshotservice.pb.LogicalExpression.right_expression:type_name -> snapshotservice.pb.RuleExpression
	4,  // 14: snapshotservice.pb.ParenthesesExpression.inner_expression:type_name -> snapshotservice.pb.RuleExpression
	4,  // 15: snapshotservice.pb.NegationExpression.inner_expression:type_name -> snapshotservice.pb.RuleExpression
	10, // 16: snapshotservice.pb.OriginId.types:type_name -> snapshotservice.pb.RepeatedString
	11, // 17: snapshotservice.pb.ResourceProperty.origin_id:type_name -> snapshotservice.pb.OriginId
	14, // 18: snapshotservice.pb.ResourceProperty.resource_id:type_name -> resourceaggregate.pb.ResourceId
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_snapshot_service_pb_rule_proto_init() }
func file_snapshot_service_pb_rule_proto_init() {
	if File_snapshot_service_pb_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snapshot_service_pb_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationalOperand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationalExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParenthesesExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NegationExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snapshot_service_pb_rule_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RuleExpression_RelationalExpression)(nil),
		(*RuleExpression_LogicalExpression)(nil),
		(*RuleExpression_ParenthesesExpression)(nil),
		(*RuleExpression_NegationExpression)(nil),
	}
	file_snapshot_service_pb_rule_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RelationalOperand_Scalar)(nil),
		(*RelationalOperand_ResourceProperty)(nil),
	}
	file_snapshot_service_pb_rule_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RelationalExpression_Compare)(nil),
		(*RelationalExpression_String_)(nil),
	}
	file_snapshot_service_pb_rule_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*OriginId_Href)(nil),
		(*OriginId_Types)(nil),
	}
	file_snapshot_service_pb_rule_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ResourceProperty_OriginId)(nil),
		(*ResourceProperty_ResourceId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snapshot_service_pb_rule_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snapshot_service_pb_rule_proto_goTypes,
		DependencyIndexes: file_snapshot_service_pb_rule_proto_depIdxs,
		EnumInfos:         file_snapshot_service_pb_rule_proto_enumTypes,
		MessageInfos:      file_snapshot_service_pb_rule_proto_msgTypes,
	}.Build()
	File_snapshot_service_pb_rule_proto = out.File
	file_snapshot_service_pb_rule_proto_rawDesc = nil
	file_snapshot_service_pb_rule_proto_goTypes = nil
	file_snapshot_service_pb_rule_proto_depIdxs = nil
}
