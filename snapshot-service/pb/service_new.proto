syntax = "proto3";

package snapshotservice.pb;

import "resource-aggregate/pb/resources.proto";
import "snapshot-service/pb/scene.proto";
import "snapshot-service/pb/rule.proto";
import "snapshot-service/pb/ruleActionLink.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "PLGD Rule Engine API";
    version: "1.0";
    description: "API for configuring rule engine in PLGD";
    contact: {
      name: "plgd.dev";
      url: "https://github.com/plgd-dev/hub";
      email: "info@plgd.dev";
    };
    license: {
      name: "Apache License 2.0";
      url: "https://github.com/plgd-dev/hub/blob/v2/LICENSE";
    };
  };
  schemes: [HTTPS];
  consumes: ["application/json", "application/protojson"];
  produces: ["application/json", "application/protojson"];
};

option go_package = "github.com/plgd-dev/hub/v2/snapshot-service/pb;pb";

message Id {
  string id = 1;
  uint64 version = 2;
}

message IdFilter {
  string id = 1;
  oneof version {
    uint64 value = 2;
    bool all = 3;
    bool max = 4;
  }
}

message Condition {
  Id id = 1;
  string name = 2;
  bool enabled = 3;
  repeated string device_id_filter = 5;
  repeated string resource_type_filter = 6;
  repeated string resource_href_filter = 7;
  string yq_expression = 8;
  repeated Id linked_configuration = 9;
}

message CreateConditionReponse { Id id = 1; }
message GetConditionsRequest { repeated IdFilter id_filter = 1; }
message DeleteConditionsRequest { repeated IdFilter id_filter = 1; }
message DeleteConditionsResponse { int64 count = 1; }

message RepeatedString { repeated string list = 1; }

message Configuration {
  message Resource {
    oneof filter {
      string href  = 1;
      RepeatedString resource_types = 2;
    }
    resourceaggregate.pb.Content content = 3;
    int64 delay  = 4;
    string resource_interface = 6; // optional update interface
    int64 time_to_live = 7; // optional update command time to live
  }
  Id id = 1;
  string name = 2;
  repeated Resource resources = 3;
}

message CreateConfigurationReponse { Id id = 1; }
message GetConfigurationsRequest { repeated string id_filter = 1; }
message DeleteConfigurationsRequest { repeated string id_filter = 1; }
message DeleteConfigurationsResponse { int64 count = 1; }

message AppliedResourceConfiguration {
  resourceaggregate.pb.ResourceId resource_id = 1; 
  Id configuration_id = 2;
  oneof executed_by {
    bool on_demaned = 3;
    Id condition_id = 4;
  }
  int64 timestamp_start = 5; // when the rule association was applied
  int64 valid_until = 6; // how long the command is valid
  resourceaggregate.pb.ResourceUpdated resource_updated = 7;
}

service SnapshotService {
  rpc CreateCondition(Condition) returns (CreateConditionReponse) {
    option (google.api.http) = {
      post: "/api/v1/conditions";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Conditions" ];
    };
  }

  rpc GetConditions(GetConditionsRequest) returns (stream Condition) {
    option (google.api.http) = {
      get: "/api/v1/conditions";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Conditions" ];
    };
  }

  rpc DeleteConditions(DeleteConditionsRequest) returns (DeleteConditionsResponse) {
    option (google.api.http) = {
      delete: "/api/v1/conditions";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Conditions" ];
    };
  }

  rpc UpdateCondition(Condition) returns (UpdateConditionResponse) {
    option (google.api.http) = {
      put: "/api/v1/conditions/{id}";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Conditions" ];
    };
  }

  rpc InvokeCondition(InvokeConditionRequest) returns (InvokeConditionResponse) {
    option (google.api.http) = {
      post: "/api/v1/conditions/{id}";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Conditions" ];
    };
  }

  rpc CreateConfiguration(Configuration) returns (CreateConfigurationReponse) {
    option (google.api.http) = {
      post: "/api/v1/configurations";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Configurations" ];
    };
  }

  rpc GetConfigurations(GetConfigurationsRequest) returns (stream Configuration) {
    option (google.api.http) = {
      get: "/api/v1/configurations";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Configurations" ];
    };
  }

  rpc DeleteConfigurations(DeleteConfigurationsRequest) returns (DeleteConfigurationsResponse) {
    option (google.api.http) = {
      delete: "/api/v1/configurations";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Configurations" ];
    };
  }

  rpc UpdateConfiguration(Configuration) returns (UpdateConfigurationReponse) {
    option (google.api.http) = {
      put: "/api/v1/configurations/{id}";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Configurations" ];
    };
  }

  rpc InvokeConfiguration(InvokeConfigurationRequest) returns (InvokeConfigurationResponse) {
    option (google.api.http) = {
      post: "/api/v1/configurations/{id}";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Rules" ];
    };
  }
 

  rpc GetAppliedConfigurations(GetAppliedConfigurationsRequest) returns (AppliedConfiguration) {
    option (google.api.http) = {
      get: "/api/v1/configurations/applied";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Rules" ];
    };
  }

  rpc DeleteAppliedConfigurations(DeleteAppliedRuleActionLinkRequest) returns (DeleteAppliedRuleActionLinkResponse) {
    option (google.api.http) = {
      delete: "/api/v1/configurations/applied";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "Rules" ];
    };
  }
}