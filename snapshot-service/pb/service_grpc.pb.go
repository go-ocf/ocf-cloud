// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: snapshot-service/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnapshotService_CreateCondition_FullMethodName             = "/snapshotservice.pb.SnapshotService/CreateCondition"
	SnapshotService_GetConditions_FullMethodName               = "/snapshotservice.pb.SnapshotService/GetConditions"
	SnapshotService_DeleteConditions_FullMethodName            = "/snapshotservice.pb.SnapshotService/DeleteConditions"
	SnapshotService_UpdateCondition_FullMethodName             = "/snapshotservice.pb.SnapshotService/UpdateCondition"
	SnapshotService_CreateConfiguration_FullMethodName         = "/snapshotservice.pb.SnapshotService/CreateConfiguration"
	SnapshotService_GetConfigurations_FullMethodName           = "/snapshotservice.pb.SnapshotService/GetConfigurations"
	SnapshotService_DeleteConfigurations_FullMethodName        = "/snapshotservice.pb.SnapshotService/DeleteConfigurations"
	SnapshotService_UpdateConfiguration_FullMethodName         = "/snapshotservice.pb.SnapshotService/UpdateConfiguration"
	SnapshotService_InvokeConfiguration_FullMethodName         = "/snapshotservice.pb.SnapshotService/InvokeConfiguration"
	SnapshotService_GetAppliedConfigurations_FullMethodName    = "/snapshotservice.pb.SnapshotService/GetAppliedConfigurations"
	SnapshotService_DeleteAppliedConfigurations_FullMethodName = "/snapshotservice.pb.SnapshotService/DeleteAppliedConfigurations"
)

// SnapshotServiceClient is the client API for SnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotServiceClient interface {
	CreateCondition(ctx context.Context, in *Condition, opts ...grpc.CallOption) (*CreateConditionReponse, error)
	GetConditions(ctx context.Context, in *GetConditionsRequest, opts ...grpc.CallOption) (SnapshotService_GetConditionsClient, error)
	DeleteConditions(ctx context.Context, in *DeleteConditionsRequest, opts ...grpc.CallOption) (*DeleteConditionsResponse, error)
	UpdateCondition(ctx context.Context, in *Condition, opts ...grpc.CallOption) (*UpdateConditionResponse, error)
	CreateConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*CreateConfigurationReponse, error)
	GetConfigurations(ctx context.Context, in *GetConfigurationsRequest, opts ...grpc.CallOption) (SnapshotService_GetConfigurationsClient, error)
	DeleteConfigurations(ctx context.Context, in *DeleteConfigurationsRequest, opts ...grpc.CallOption) (*DeleteConfigurationsResponse, error)
	UpdateConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*UpdateConfigurationReponse, error)
	// streaming process of update configuration to invoker
	InvokeConfiguration(ctx context.Context, in *InvokeConfigurationRequest, opts ...grpc.CallOption) (SnapshotService_InvokeConfigurationClient, error)
	GetAppliedConfigurations(ctx context.Context, in *GetAppliedConfigurationsRequest, opts ...grpc.CallOption) (SnapshotService_GetAppliedConfigurationsClient, error)
	DeleteAppliedConfigurations(ctx context.Context, in *DeleteAppliedConfigurationsRequest, opts ...grpc.CallOption) (*DeleteAppliedConfigurationsResponse, error)
}

type snapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotServiceClient(cc grpc.ClientConnInterface) SnapshotServiceClient {
	return &snapshotServiceClient{cc}
}

func (c *snapshotServiceClient) CreateCondition(ctx context.Context, in *Condition, opts ...grpc.CallOption) (*CreateConditionReponse, error) {
	out := new(CreateConditionReponse)
	err := c.cc.Invoke(ctx, SnapshotService_CreateCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) GetConditions(ctx context.Context, in *GetConditionsRequest, opts ...grpc.CallOption) (SnapshotService_GetConditionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnapshotService_ServiceDesc.Streams[0], SnapshotService_GetConditions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotServiceGetConditionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapshotService_GetConditionsClient interface {
	Recv() (*Condition, error)
	grpc.ClientStream
}

type snapshotServiceGetConditionsClient struct {
	grpc.ClientStream
}

func (x *snapshotServiceGetConditionsClient) Recv() (*Condition, error) {
	m := new(Condition)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapshotServiceClient) DeleteConditions(ctx context.Context, in *DeleteConditionsRequest, opts ...grpc.CallOption) (*DeleteConditionsResponse, error) {
	out := new(DeleteConditionsResponse)
	err := c.cc.Invoke(ctx, SnapshotService_DeleteConditions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) UpdateCondition(ctx context.Context, in *Condition, opts ...grpc.CallOption) (*UpdateConditionResponse, error) {
	out := new(UpdateConditionResponse)
	err := c.cc.Invoke(ctx, SnapshotService_UpdateCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) CreateConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*CreateConfigurationReponse, error) {
	out := new(CreateConfigurationReponse)
	err := c.cc.Invoke(ctx, SnapshotService_CreateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) GetConfigurations(ctx context.Context, in *GetConfigurationsRequest, opts ...grpc.CallOption) (SnapshotService_GetConfigurationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnapshotService_ServiceDesc.Streams[1], SnapshotService_GetConfigurations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotServiceGetConfigurationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapshotService_GetConfigurationsClient interface {
	Recv() (*Configuration, error)
	grpc.ClientStream
}

type snapshotServiceGetConfigurationsClient struct {
	grpc.ClientStream
}

func (x *snapshotServiceGetConfigurationsClient) Recv() (*Configuration, error) {
	m := new(Configuration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapshotServiceClient) DeleteConfigurations(ctx context.Context, in *DeleteConfigurationsRequest, opts ...grpc.CallOption) (*DeleteConfigurationsResponse, error) {
	out := new(DeleteConfigurationsResponse)
	err := c.cc.Invoke(ctx, SnapshotService_DeleteConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) UpdateConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*UpdateConfigurationReponse, error) {
	out := new(UpdateConfigurationReponse)
	err := c.cc.Invoke(ctx, SnapshotService_UpdateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) InvokeConfiguration(ctx context.Context, in *InvokeConfigurationRequest, opts ...grpc.CallOption) (SnapshotService_InvokeConfigurationClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnapshotService_ServiceDesc.Streams[2], SnapshotService_InvokeConfiguration_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotServiceInvokeConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapshotService_InvokeConfigurationClient interface {
	Recv() (*AppliedConfiguration, error)
	grpc.ClientStream
}

type snapshotServiceInvokeConfigurationClient struct {
	grpc.ClientStream
}

func (x *snapshotServiceInvokeConfigurationClient) Recv() (*AppliedConfiguration, error) {
	m := new(AppliedConfiguration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapshotServiceClient) GetAppliedConfigurations(ctx context.Context, in *GetAppliedConfigurationsRequest, opts ...grpc.CallOption) (SnapshotService_GetAppliedConfigurationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnapshotService_ServiceDesc.Streams[3], SnapshotService_GetAppliedConfigurations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotServiceGetAppliedConfigurationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapshotService_GetAppliedConfigurationsClient interface {
	Recv() (*AppliedConfiguration, error)
	grpc.ClientStream
}

type snapshotServiceGetAppliedConfigurationsClient struct {
	grpc.ClientStream
}

func (x *snapshotServiceGetAppliedConfigurationsClient) Recv() (*AppliedConfiguration, error) {
	m := new(AppliedConfiguration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapshotServiceClient) DeleteAppliedConfigurations(ctx context.Context, in *DeleteAppliedConfigurationsRequest, opts ...grpc.CallOption) (*DeleteAppliedConfigurationsResponse, error) {
	out := new(DeleteAppliedConfigurationsResponse)
	err := c.cc.Invoke(ctx, SnapshotService_DeleteAppliedConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotServiceServer is the server API for SnapshotService service.
// All implementations must embed UnimplementedSnapshotServiceServer
// for forward compatibility
type SnapshotServiceServer interface {
	CreateCondition(context.Context, *Condition) (*CreateConditionReponse, error)
	GetConditions(*GetConditionsRequest, SnapshotService_GetConditionsServer) error
	DeleteConditions(context.Context, *DeleteConditionsRequest) (*DeleteConditionsResponse, error)
	UpdateCondition(context.Context, *Condition) (*UpdateConditionResponse, error)
	CreateConfiguration(context.Context, *Configuration) (*CreateConfigurationReponse, error)
	GetConfigurations(*GetConfigurationsRequest, SnapshotService_GetConfigurationsServer) error
	DeleteConfigurations(context.Context, *DeleteConfigurationsRequest) (*DeleteConfigurationsResponse, error)
	UpdateConfiguration(context.Context, *Configuration) (*UpdateConfigurationReponse, error)
	// streaming process of update configuration to invoker
	InvokeConfiguration(*InvokeConfigurationRequest, SnapshotService_InvokeConfigurationServer) error
	GetAppliedConfigurations(*GetAppliedConfigurationsRequest, SnapshotService_GetAppliedConfigurationsServer) error
	DeleteAppliedConfigurations(context.Context, *DeleteAppliedConfigurationsRequest) (*DeleteAppliedConfigurationsResponse, error)
	mustEmbedUnimplementedSnapshotServiceServer()
}

// UnimplementedSnapshotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotServiceServer struct {
}

func (UnimplementedSnapshotServiceServer) CreateCondition(context.Context, *Condition) (*CreateConditionReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCondition not implemented")
}
func (UnimplementedSnapshotServiceServer) GetConditions(*GetConditionsRequest, SnapshotService_GetConditionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConditions not implemented")
}
func (UnimplementedSnapshotServiceServer) DeleteConditions(context.Context, *DeleteConditionsRequest) (*DeleteConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConditions not implemented")
}
func (UnimplementedSnapshotServiceServer) UpdateCondition(context.Context, *Condition) (*UpdateConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCondition not implemented")
}
func (UnimplementedSnapshotServiceServer) CreateConfiguration(context.Context, *Configuration) (*CreateConfigurationReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfiguration not implemented")
}
func (UnimplementedSnapshotServiceServer) GetConfigurations(*GetConfigurationsRequest, SnapshotService_GetConfigurationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfigurations not implemented")
}
func (UnimplementedSnapshotServiceServer) DeleteConfigurations(context.Context, *DeleteConfigurationsRequest) (*DeleteConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigurations not implemented")
}
func (UnimplementedSnapshotServiceServer) UpdateConfiguration(context.Context, *Configuration) (*UpdateConfigurationReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedSnapshotServiceServer) InvokeConfiguration(*InvokeConfigurationRequest, SnapshotService_InvokeConfigurationServer) error {
	return status.Errorf(codes.Unimplemented, "method InvokeConfiguration not implemented")
}
func (UnimplementedSnapshotServiceServer) GetAppliedConfigurations(*GetAppliedConfigurationsRequest, SnapshotService_GetAppliedConfigurationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAppliedConfigurations not implemented")
}
func (UnimplementedSnapshotServiceServer) DeleteAppliedConfigurations(context.Context, *DeleteAppliedConfigurationsRequest) (*DeleteAppliedConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliedConfigurations not implemented")
}
func (UnimplementedSnapshotServiceServer) mustEmbedUnimplementedSnapshotServiceServer() {}

// UnsafeSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServiceServer will
// result in compilation errors.
type UnsafeSnapshotServiceServer interface {
	mustEmbedUnimplementedSnapshotServiceServer()
}

func RegisterSnapshotServiceServer(s grpc.ServiceRegistrar, srv SnapshotServiceServer) {
	s.RegisterService(&SnapshotService_ServiceDesc, srv)
}

func _SnapshotService_CreateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).CreateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_CreateCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).CreateCondition(ctx, req.(*Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_GetConditions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConditionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotServiceServer).GetConditions(m, &snapshotServiceGetConditionsServer{stream})
}

type SnapshotService_GetConditionsServer interface {
	Send(*Condition) error
	grpc.ServerStream
}

type snapshotServiceGetConditionsServer struct {
	grpc.ServerStream
}

func (x *snapshotServiceGetConditionsServer) Send(m *Condition) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapshotService_DeleteConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).DeleteConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_DeleteConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).DeleteConditions(ctx, req.(*DeleteConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_UpdateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).UpdateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_UpdateCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).UpdateCondition(ctx, req.(*Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_CreateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).CreateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_CreateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).CreateConfiguration(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_GetConfigurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConfigurationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotServiceServer).GetConfigurations(m, &snapshotServiceGetConfigurationsServer{stream})
}

type SnapshotService_GetConfigurationsServer interface {
	Send(*Configuration) error
	grpc.ServerStream
}

type snapshotServiceGetConfigurationsServer struct {
	grpc.ServerStream
}

func (x *snapshotServiceGetConfigurationsServer) Send(m *Configuration) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapshotService_DeleteConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).DeleteConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_DeleteConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).DeleteConfigurations(ctx, req.(*DeleteConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_UpdateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).UpdateConfiguration(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_InvokeConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InvokeConfigurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotServiceServer).InvokeConfiguration(m, &snapshotServiceInvokeConfigurationServer{stream})
}

type SnapshotService_InvokeConfigurationServer interface {
	Send(*AppliedConfiguration) error
	grpc.ServerStream
}

type snapshotServiceInvokeConfigurationServer struct {
	grpc.ServerStream
}

func (x *snapshotServiceInvokeConfigurationServer) Send(m *AppliedConfiguration) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapshotService_GetAppliedConfigurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAppliedConfigurationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotServiceServer).GetAppliedConfigurations(m, &snapshotServiceGetAppliedConfigurationsServer{stream})
}

type SnapshotService_GetAppliedConfigurationsServer interface {
	Send(*AppliedConfiguration) error
	grpc.ServerStream
}

type snapshotServiceGetAppliedConfigurationsServer struct {
	grpc.ServerStream
}

func (x *snapshotServiceGetAppliedConfigurationsServer) Send(m *AppliedConfiguration) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapshotService_DeleteAppliedConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).DeleteAppliedConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_DeleteAppliedConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).DeleteAppliedConfigurations(ctx, req.(*DeleteAppliedConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotService_ServiceDesc is the grpc.ServiceDesc for SnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshotservice.pb.SnapshotService",
	HandlerType: (*SnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCondition",
			Handler:    _SnapshotService_CreateCondition_Handler,
		},
		{
			MethodName: "DeleteConditions",
			Handler:    _SnapshotService_DeleteConditions_Handler,
		},
		{
			MethodName: "UpdateCondition",
			Handler:    _SnapshotService_UpdateCondition_Handler,
		},
		{
			MethodName: "CreateConfiguration",
			Handler:    _SnapshotService_CreateConfiguration_Handler,
		},
		{
			MethodName: "DeleteConfigurations",
			Handler:    _SnapshotService_DeleteConfigurations_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _SnapshotService_UpdateConfiguration_Handler,
		},
		{
			MethodName: "DeleteAppliedConfigurations",
			Handler:    _SnapshotService_DeleteAppliedConfigurations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConditions",
			Handler:       _SnapshotService_GetConditions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetConfigurations",
			Handler:       _SnapshotService_GetConfigurations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InvokeConfiguration",
			Handler:       _SnapshotService_InvokeConfiguration_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAppliedConfigurations",
			Handler:       _SnapshotService_GetAppliedConfigurations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snapshot-service/pb/service.proto",
}
