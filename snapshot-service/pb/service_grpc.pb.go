// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: snapshot-service/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnapshotService_CreateSnapshot_FullMethodName             = "/snapshotservice.pb.SnapshotService/CreateSnapshot"
	SnapshotService_GetSnapshots_FullMethodName               = "/snapshotservice.pb.SnapshotService/GetSnapshots"
	SnapshotService_DeleteSnapshots_FullMethodName            = "/snapshotservice.pb.SnapshotService/DeleteSnapshots"
	SnapshotService_ApplySnapshot_FullMethodName              = "/snapshotservice.pb.SnapshotService/ApplySnapshot"
	SnapshotService_CreateSnapshotAssociation_FullMethodName  = "/snapshotservice.pb.SnapshotService/CreateSnapshotAssociation"
	SnapshotService_DeleteSnapshotAssociations_FullMethodName = "/snapshotservice.pb.SnapshotService/DeleteSnapshotAssociations"
	SnapshotService_GetSnapshotStatuses_FullMethodName        = "/snapshotservice.pb.SnapshotService/GetSnapshotStatuses"
	SnapshotService_DeleteSnapshotStatuses_FullMethodName     = "/snapshotservice.pb.SnapshotService/DeleteSnapshotStatuses"
)

// SnapshotServiceClient is the client API for SnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotServiceClient interface {
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	GetSnapshots(ctx context.Context, in *GetSnapshotsRequest, opts ...grpc.CallOption) (SnapshotService_GetSnapshotsClient, error)
	DeleteSnapshots(ctx context.Context, in *DeleteSnapshotsRequest, opts ...grpc.CallOption) (*DeleteSnapshotsResponse, error)
	ApplySnapshot(ctx context.Context, in *ApplySnapshotRequest, opts ...grpc.CallOption) (*ApplySnapshotResponse, error)
	CreateSnapshotAssociation(ctx context.Context, in *CreateSnapshotAssociationRequest, opts ...grpc.CallOption) (*CreateSnapshotAssociationResponse, error)
	DeleteSnapshotAssociations(ctx context.Context, in *DeleteSnapshotAssociationsRequest, opts ...grpc.CallOption) (*DeleteSnapshotAssociationsResponse, error)
	GetSnapshotStatuses(ctx context.Context, in *GetSnapshotStatusesRequest, opts ...grpc.CallOption) (SnapshotService_GetSnapshotStatusesClient, error)
	DeleteSnapshotStatuses(ctx context.Context, in *DeleteSnapshotStatusesRequest, opts ...grpc.CallOption) (*DeleteSnapshotStatusesResponse, error)
}

type snapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotServiceClient(cc grpc.ClientConnInterface) SnapshotServiceClient {
	return &snapshotServiceClient{cc}
}

func (c *snapshotServiceClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_CreateSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) GetSnapshots(ctx context.Context, in *GetSnapshotsRequest, opts ...grpc.CallOption) (SnapshotService_GetSnapshotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnapshotService_ServiceDesc.Streams[0], SnapshotService_GetSnapshots_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotServiceGetSnapshotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapshotService_GetSnapshotsClient interface {
	Recv() (*Snapshot, error)
	grpc.ClientStream
}

type snapshotServiceGetSnapshotsClient struct {
	grpc.ClientStream
}

func (x *snapshotServiceGetSnapshotsClient) Recv() (*Snapshot, error) {
	m := new(Snapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapshotServiceClient) DeleteSnapshots(ctx context.Context, in *DeleteSnapshotsRequest, opts ...grpc.CallOption) (*DeleteSnapshotsResponse, error) {
	out := new(DeleteSnapshotsResponse)
	err := c.cc.Invoke(ctx, SnapshotService_DeleteSnapshots_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) ApplySnapshot(ctx context.Context, in *ApplySnapshotRequest, opts ...grpc.CallOption) (*ApplySnapshotResponse, error) {
	out := new(ApplySnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_ApplySnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) CreateSnapshotAssociation(ctx context.Context, in *CreateSnapshotAssociationRequest, opts ...grpc.CallOption) (*CreateSnapshotAssociationResponse, error) {
	out := new(CreateSnapshotAssociationResponse)
	err := c.cc.Invoke(ctx, SnapshotService_CreateSnapshotAssociation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) DeleteSnapshotAssociations(ctx context.Context, in *DeleteSnapshotAssociationsRequest, opts ...grpc.CallOption) (*DeleteSnapshotAssociationsResponse, error) {
	out := new(DeleteSnapshotAssociationsResponse)
	err := c.cc.Invoke(ctx, SnapshotService_DeleteSnapshotAssociations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) GetSnapshotStatuses(ctx context.Context, in *GetSnapshotStatusesRequest, opts ...grpc.CallOption) (SnapshotService_GetSnapshotStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnapshotService_ServiceDesc.Streams[1], SnapshotService_GetSnapshotStatuses_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotServiceGetSnapshotStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapshotService_GetSnapshotStatusesClient interface {
	Recv() (*SnapshotStatus, error)
	grpc.ClientStream
}

type snapshotServiceGetSnapshotStatusesClient struct {
	grpc.ClientStream
}

func (x *snapshotServiceGetSnapshotStatusesClient) Recv() (*SnapshotStatus, error) {
	m := new(SnapshotStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapshotServiceClient) DeleteSnapshotStatuses(ctx context.Context, in *DeleteSnapshotStatusesRequest, opts ...grpc.CallOption) (*DeleteSnapshotStatusesResponse, error) {
	out := new(DeleteSnapshotStatusesResponse)
	err := c.cc.Invoke(ctx, SnapshotService_DeleteSnapshotStatuses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotServiceServer is the server API for SnapshotService service.
// All implementations must embed UnimplementedSnapshotServiceServer
// for forward compatibility
type SnapshotServiceServer interface {
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	GetSnapshots(*GetSnapshotsRequest, SnapshotService_GetSnapshotsServer) error
	DeleteSnapshots(context.Context, *DeleteSnapshotsRequest) (*DeleteSnapshotsResponse, error)
	ApplySnapshot(context.Context, *ApplySnapshotRequest) (*ApplySnapshotResponse, error)
	CreateSnapshotAssociation(context.Context, *CreateSnapshotAssociationRequest) (*CreateSnapshotAssociationResponse, error)
	DeleteSnapshotAssociations(context.Context, *DeleteSnapshotAssociationsRequest) (*DeleteSnapshotAssociationsResponse, error)
	GetSnapshotStatuses(*GetSnapshotStatusesRequest, SnapshotService_GetSnapshotStatusesServer) error
	DeleteSnapshotStatuses(context.Context, *DeleteSnapshotStatusesRequest) (*DeleteSnapshotStatusesResponse, error)
	mustEmbedUnimplementedSnapshotServiceServer()
}

// UnimplementedSnapshotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotServiceServer struct {
}

func (UnimplementedSnapshotServiceServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) GetSnapshots(*GetSnapshotsRequest, SnapshotService_GetSnapshotsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSnapshots not implemented")
}
func (UnimplementedSnapshotServiceServer) DeleteSnapshots(context.Context, *DeleteSnapshotsRequest) (*DeleteSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshots not implemented")
}
func (UnimplementedSnapshotServiceServer) ApplySnapshot(context.Context, *ApplySnapshotRequest) (*ApplySnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) CreateSnapshotAssociation(context.Context, *CreateSnapshotAssociationRequest) (*CreateSnapshotAssociationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshotAssociation not implemented")
}
func (UnimplementedSnapshotServiceServer) DeleteSnapshotAssociations(context.Context, *DeleteSnapshotAssociationsRequest) (*DeleteSnapshotAssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshotAssociations not implemented")
}
func (UnimplementedSnapshotServiceServer) GetSnapshotStatuses(*GetSnapshotStatusesRequest, SnapshotService_GetSnapshotStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSnapshotStatuses not implemented")
}
func (UnimplementedSnapshotServiceServer) DeleteSnapshotStatuses(context.Context, *DeleteSnapshotStatusesRequest) (*DeleteSnapshotStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshotStatuses not implemented")
}
func (UnimplementedSnapshotServiceServer) mustEmbedUnimplementedSnapshotServiceServer() {}

// UnsafeSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServiceServer will
// result in compilation errors.
type UnsafeSnapshotServiceServer interface {
	mustEmbedUnimplementedSnapshotServiceServer()
}

func RegisterSnapshotServiceServer(s grpc.ServiceRegistrar, srv SnapshotServiceServer) {
	s.RegisterService(&SnapshotService_ServiceDesc, srv)
}

func _SnapshotService_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_GetSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSnapshotsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotServiceServer).GetSnapshots(m, &snapshotServiceGetSnapshotsServer{stream})
}

type SnapshotService_GetSnapshotsServer interface {
	Send(*Snapshot) error
	grpc.ServerStream
}

type snapshotServiceGetSnapshotsServer struct {
	grpc.ServerStream
}

func (x *snapshotServiceGetSnapshotsServer) Send(m *Snapshot) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapshotService_DeleteSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).DeleteSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_DeleteSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).DeleteSnapshots(ctx, req.(*DeleteSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_ApplySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplySnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).ApplySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_ApplySnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).ApplySnapshot(ctx, req.(*ApplySnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_CreateSnapshotAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).CreateSnapshotAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_CreateSnapshotAssociation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).CreateSnapshotAssociation(ctx, req.(*CreateSnapshotAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_DeleteSnapshotAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotAssociationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).DeleteSnapshotAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_DeleteSnapshotAssociations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).DeleteSnapshotAssociations(ctx, req.(*DeleteSnapshotAssociationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_GetSnapshotStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSnapshotStatusesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapshotServiceServer).GetSnapshotStatuses(m, &snapshotServiceGetSnapshotStatusesServer{stream})
}

type SnapshotService_GetSnapshotStatusesServer interface {
	Send(*SnapshotStatus) error
	grpc.ServerStream
}

type snapshotServiceGetSnapshotStatusesServer struct {
	grpc.ServerStream
}

func (x *snapshotServiceGetSnapshotStatusesServer) Send(m *SnapshotStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapshotService_DeleteSnapshotStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).DeleteSnapshotStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_DeleteSnapshotStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).DeleteSnapshotStatuses(ctx, req.(*DeleteSnapshotStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotService_ServiceDesc is the grpc.ServiceDesc for SnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshotservice.pb.SnapshotService",
	HandlerType: (*SnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSnapshot",
			Handler:    _SnapshotService_CreateSnapshot_Handler,
		},
		{
			MethodName: "DeleteSnapshots",
			Handler:    _SnapshotService_DeleteSnapshots_Handler,
		},
		{
			MethodName: "ApplySnapshot",
			Handler:    _SnapshotService_ApplySnapshot_Handler,
		},
		{
			MethodName: "CreateSnapshotAssociation",
			Handler:    _SnapshotService_CreateSnapshotAssociation_Handler,
		},
		{
			MethodName: "DeleteSnapshotAssociations",
			Handler:    _SnapshotService_DeleteSnapshotAssociations_Handler,
		},
		{
			MethodName: "DeleteSnapshotStatuses",
			Handler:    _SnapshotService_DeleteSnapshotStatuses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSnapshots",
			Handler:       _SnapshotService_GetSnapshots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSnapshotStatuses",
			Handler:       _SnapshotService_GetSnapshotStatuses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snapshot-service/pb/service.proto",
}
