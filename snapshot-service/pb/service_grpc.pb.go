// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: snapshot-service/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuleEngine_CreateScene_FullMethodName                 = "/snapshotservice.pb.RuleEngine/CreateScene"
	RuleEngine_GetScenes_FullMethodName                   = "/snapshotservice.pb.RuleEngine/GetScenes"
	RuleEngine_DeleteScenes_FullMethodName                = "/snapshotservice.pb.RuleEngine/DeleteScenes"
	RuleEngine_UpdateScene_FullMethodName                 = "/snapshotservice.pb.RuleEngine/UpdateScene"
	RuleEngine_CreateRule_FullMethodName                  = "/snapshotservice.pb.RuleEngine/CreateRule"
	RuleEngine_GetRules_FullMethodName                    = "/snapshotservice.pb.RuleEngine/GetRules"
	RuleEngine_DeleteRules_FullMethodName                 = "/snapshotservice.pb.RuleEngine/DeleteRules"
	RuleEngine_UpdateRule_FullMethodName                  = "/snapshotservice.pb.RuleEngine/UpdateRule"
	RuleEngine_InvokeRule_FullMethodName                  = "/snapshotservice.pb.RuleEngine/InvokeRule"
	RuleEngine_CreateRuleActionLink_FullMethodName        = "/snapshotservice.pb.RuleEngine/CreateRuleActionLink"
	RuleEngine_GetRuleActionLinks_FullMethodName          = "/snapshotservice.pb.RuleEngine/GetRuleActionLinks"
	RuleEngine_DeleteRuleActionLinks_FullMethodName       = "/snapshotservice.pb.RuleEngine/DeleteRuleActionLinks"
	RuleEngine_UpdateRuleActionLink_FullMethodName        = "/snapshotservice.pb.RuleEngine/UpdateRuleActionLink"
	RuleEngine_InvokeRuleActionLink_FullMethodName        = "/snapshotservice.pb.RuleEngine/InvokeRuleActionLink"
	RuleEngine_GetAppliedRuleActionLinks_FullMethodName   = "/snapshotservice.pb.RuleEngine/GetAppliedRuleActionLinks"
	RuleEngine_DeleteAppliedRuleActionLink_FullMethodName = "/snapshotservice.pb.RuleEngine/DeleteAppliedRuleActionLink"
)

// RuleEngineClient is the client API for RuleEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleEngineClient interface {
	CreateScene(ctx context.Context, in *Scene, opts ...grpc.CallOption) (*CreateSceneResponse, error)
	GetScenes(ctx context.Context, in *GetScenesRequest, opts ...grpc.CallOption) (RuleEngine_GetScenesClient, error)
	DeleteScenes(ctx context.Context, in *DeleteScenesRequest, opts ...grpc.CallOption) (*DeleteScenesResponse, error)
	UpdateScene(ctx context.Context, in *Scene, opts ...grpc.CallOption) (*UpdateSceneResponse, error)
	CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*CreateRuleResponse, error)
	GetRules(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (RuleEngine_GetRulesClient, error)
	DeleteRules(ctx context.Context, in *DeleteRulesRequest, opts ...grpc.CallOption) (*DeleteRulesResponse, error)
	UpdateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*UpdateRuleResponse, error)
	InvokeRule(ctx context.Context, in *InvokeRuleRequest, opts ...grpc.CallOption) (*InvokeRuleResponse, error)
	CreateRuleActionLink(ctx context.Context, in *RuleActionLink, opts ...grpc.CallOption) (*CreateRuleActionLinkResponse, error)
	GetRuleActionLinks(ctx context.Context, in *GetRuleActionLinksRequest, opts ...grpc.CallOption) (RuleEngine_GetRuleActionLinksClient, error)
	DeleteRuleActionLinks(ctx context.Context, in *DeleteRuleActionLinksRequest, opts ...grpc.CallOption) (*DeleteRuleActionLinksResponse, error)
	UpdateRuleActionLink(ctx context.Context, in *RuleActionLink, opts ...grpc.CallOption) (*UpdateRuleActionLinkResponse, error)
	InvokeRuleActionLink(ctx context.Context, in *InvokeRuleActionLinkRequest, opts ...grpc.CallOption) (*InvokeRuleActionLinkResponse, error)
	GetAppliedRuleActionLinks(ctx context.Context, in *GetAppliedRuleActionLinksRequest, opts ...grpc.CallOption) (*AppliedRuleActionLink, error)
	DeleteAppliedRuleActionLink(ctx context.Context, in *DeleteAppliedRuleActionLinkRequest, opts ...grpc.CallOption) (*DeleteAppliedRuleActionLinkResponse, error)
}

type ruleEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleEngineClient(cc grpc.ClientConnInterface) RuleEngineClient {
	return &ruleEngineClient{cc}
}

func (c *ruleEngineClient) CreateScene(ctx context.Context, in *Scene, opts ...grpc.CallOption) (*CreateSceneResponse, error) {
	out := new(CreateSceneResponse)
	err := c.cc.Invoke(ctx, RuleEngine_CreateScene_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) GetScenes(ctx context.Context, in *GetScenesRequest, opts ...grpc.CallOption) (RuleEngine_GetScenesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuleEngine_ServiceDesc.Streams[0], RuleEngine_GetScenes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ruleEngineGetScenesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuleEngine_GetScenesClient interface {
	Recv() (*Scene, error)
	grpc.ClientStream
}

type ruleEngineGetScenesClient struct {
	grpc.ClientStream
}

func (x *ruleEngineGetScenesClient) Recv() (*Scene, error) {
	m := new(Scene)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ruleEngineClient) DeleteScenes(ctx context.Context, in *DeleteScenesRequest, opts ...grpc.CallOption) (*DeleteScenesResponse, error) {
	out := new(DeleteScenesResponse)
	err := c.cc.Invoke(ctx, RuleEngine_DeleteScenes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) UpdateScene(ctx context.Context, in *Scene, opts ...grpc.CallOption) (*UpdateSceneResponse, error) {
	out := new(UpdateSceneResponse)
	err := c.cc.Invoke(ctx, RuleEngine_UpdateScene_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*CreateRuleResponse, error) {
	out := new(CreateRuleResponse)
	err := c.cc.Invoke(ctx, RuleEngine_CreateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) GetRules(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (RuleEngine_GetRulesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuleEngine_ServiceDesc.Streams[1], RuleEngine_GetRules_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ruleEngineGetRulesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuleEngine_GetRulesClient interface {
	Recv() (*Rule, error)
	grpc.ClientStream
}

type ruleEngineGetRulesClient struct {
	grpc.ClientStream
}

func (x *ruleEngineGetRulesClient) Recv() (*Rule, error) {
	m := new(Rule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ruleEngineClient) DeleteRules(ctx context.Context, in *DeleteRulesRequest, opts ...grpc.CallOption) (*DeleteRulesResponse, error) {
	out := new(DeleteRulesResponse)
	err := c.cc.Invoke(ctx, RuleEngine_DeleteRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) UpdateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*UpdateRuleResponse, error) {
	out := new(UpdateRuleResponse)
	err := c.cc.Invoke(ctx, RuleEngine_UpdateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) InvokeRule(ctx context.Context, in *InvokeRuleRequest, opts ...grpc.CallOption) (*InvokeRuleResponse, error) {
	out := new(InvokeRuleResponse)
	err := c.cc.Invoke(ctx, RuleEngine_InvokeRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) CreateRuleActionLink(ctx context.Context, in *RuleActionLink, opts ...grpc.CallOption) (*CreateRuleActionLinkResponse, error) {
	out := new(CreateRuleActionLinkResponse)
	err := c.cc.Invoke(ctx, RuleEngine_CreateRuleActionLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) GetRuleActionLinks(ctx context.Context, in *GetRuleActionLinksRequest, opts ...grpc.CallOption) (RuleEngine_GetRuleActionLinksClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuleEngine_ServiceDesc.Streams[2], RuleEngine_GetRuleActionLinks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ruleEngineGetRuleActionLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuleEngine_GetRuleActionLinksClient interface {
	Recv() (*RuleActionLink, error)
	grpc.ClientStream
}

type ruleEngineGetRuleActionLinksClient struct {
	grpc.ClientStream
}

func (x *ruleEngineGetRuleActionLinksClient) Recv() (*RuleActionLink, error) {
	m := new(RuleActionLink)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ruleEngineClient) DeleteRuleActionLinks(ctx context.Context, in *DeleteRuleActionLinksRequest, opts ...grpc.CallOption) (*DeleteRuleActionLinksResponse, error) {
	out := new(DeleteRuleActionLinksResponse)
	err := c.cc.Invoke(ctx, RuleEngine_DeleteRuleActionLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) UpdateRuleActionLink(ctx context.Context, in *RuleActionLink, opts ...grpc.CallOption) (*UpdateRuleActionLinkResponse, error) {
	out := new(UpdateRuleActionLinkResponse)
	err := c.cc.Invoke(ctx, RuleEngine_UpdateRuleActionLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) InvokeRuleActionLink(ctx context.Context, in *InvokeRuleActionLinkRequest, opts ...grpc.CallOption) (*InvokeRuleActionLinkResponse, error) {
	out := new(InvokeRuleActionLinkResponse)
	err := c.cc.Invoke(ctx, RuleEngine_InvokeRuleActionLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) GetAppliedRuleActionLinks(ctx context.Context, in *GetAppliedRuleActionLinksRequest, opts ...grpc.CallOption) (*AppliedRuleActionLink, error) {
	out := new(AppliedRuleActionLink)
	err := c.cc.Invoke(ctx, RuleEngine_GetAppliedRuleActionLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleEngineClient) DeleteAppliedRuleActionLink(ctx context.Context, in *DeleteAppliedRuleActionLinkRequest, opts ...grpc.CallOption) (*DeleteAppliedRuleActionLinkResponse, error) {
	out := new(DeleteAppliedRuleActionLinkResponse)
	err := c.cc.Invoke(ctx, RuleEngine_DeleteAppliedRuleActionLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleEngineServer is the server API for RuleEngine service.
// All implementations must embed UnimplementedRuleEngineServer
// for forward compatibility
type RuleEngineServer interface {
	CreateScene(context.Context, *Scene) (*CreateSceneResponse, error)
	GetScenes(*GetScenesRequest, RuleEngine_GetScenesServer) error
	DeleteScenes(context.Context, *DeleteScenesRequest) (*DeleteScenesResponse, error)
	UpdateScene(context.Context, *Scene) (*UpdateSceneResponse, error)
	CreateRule(context.Context, *Rule) (*CreateRuleResponse, error)
	GetRules(*GetRulesRequest, RuleEngine_GetRulesServer) error
	DeleteRules(context.Context, *DeleteRulesRequest) (*DeleteRulesResponse, error)
	UpdateRule(context.Context, *Rule) (*UpdateRuleResponse, error)
	InvokeRule(context.Context, *InvokeRuleRequest) (*InvokeRuleResponse, error)
	CreateRuleActionLink(context.Context, *RuleActionLink) (*CreateRuleActionLinkResponse, error)
	GetRuleActionLinks(*GetRuleActionLinksRequest, RuleEngine_GetRuleActionLinksServer) error
	DeleteRuleActionLinks(context.Context, *DeleteRuleActionLinksRequest) (*DeleteRuleActionLinksResponse, error)
	UpdateRuleActionLink(context.Context, *RuleActionLink) (*UpdateRuleActionLinkResponse, error)
	InvokeRuleActionLink(context.Context, *InvokeRuleActionLinkRequest) (*InvokeRuleActionLinkResponse, error)
	GetAppliedRuleActionLinks(context.Context, *GetAppliedRuleActionLinksRequest) (*AppliedRuleActionLink, error)
	DeleteAppliedRuleActionLink(context.Context, *DeleteAppliedRuleActionLinkRequest) (*DeleteAppliedRuleActionLinkResponse, error)
	mustEmbedUnimplementedRuleEngineServer()
}

// UnimplementedRuleEngineServer must be embedded to have forward compatible implementations.
type UnimplementedRuleEngineServer struct {
}

func (UnimplementedRuleEngineServer) CreateScene(context.Context, *Scene) (*CreateSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScene not implemented")
}
func (UnimplementedRuleEngineServer) GetScenes(*GetScenesRequest, RuleEngine_GetScenesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScenes not implemented")
}
func (UnimplementedRuleEngineServer) DeleteScenes(context.Context, *DeleteScenesRequest) (*DeleteScenesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScenes not implemented")
}
func (UnimplementedRuleEngineServer) UpdateScene(context.Context, *Scene) (*UpdateSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScene not implemented")
}
func (UnimplementedRuleEngineServer) CreateRule(context.Context, *Rule) (*CreateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedRuleEngineServer) GetRules(*GetRulesRequest, RuleEngine_GetRulesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRules not implemented")
}
func (UnimplementedRuleEngineServer) DeleteRules(context.Context, *DeleteRulesRequest) (*DeleteRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRules not implemented")
}
func (UnimplementedRuleEngineServer) UpdateRule(context.Context, *Rule) (*UpdateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedRuleEngineServer) InvokeRule(context.Context, *InvokeRuleRequest) (*InvokeRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeRule not implemented")
}
func (UnimplementedRuleEngineServer) CreateRuleActionLink(context.Context, *RuleActionLink) (*CreateRuleActionLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleActionLink not implemented")
}
func (UnimplementedRuleEngineServer) GetRuleActionLinks(*GetRuleActionLinksRequest, RuleEngine_GetRuleActionLinksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRuleActionLinks not implemented")
}
func (UnimplementedRuleEngineServer) DeleteRuleActionLinks(context.Context, *DeleteRuleActionLinksRequest) (*DeleteRuleActionLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuleActionLinks not implemented")
}
func (UnimplementedRuleEngineServer) UpdateRuleActionLink(context.Context, *RuleActionLink) (*UpdateRuleActionLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleActionLink not implemented")
}
func (UnimplementedRuleEngineServer) InvokeRuleActionLink(context.Context, *InvokeRuleActionLinkRequest) (*InvokeRuleActionLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeRuleActionLink not implemented")
}
func (UnimplementedRuleEngineServer) GetAppliedRuleActionLinks(context.Context, *GetAppliedRuleActionLinksRequest) (*AppliedRuleActionLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppliedRuleActionLinks not implemented")
}
func (UnimplementedRuleEngineServer) DeleteAppliedRuleActionLink(context.Context, *DeleteAppliedRuleActionLinkRequest) (*DeleteAppliedRuleActionLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliedRuleActionLink not implemented")
}
func (UnimplementedRuleEngineServer) mustEmbedUnimplementedRuleEngineServer() {}

// UnsafeRuleEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleEngineServer will
// result in compilation errors.
type UnsafeRuleEngineServer interface {
	mustEmbedUnimplementedRuleEngineServer()
}

func RegisterRuleEngineServer(s grpc.ServiceRegistrar, srv RuleEngineServer) {
	s.RegisterService(&RuleEngine_ServiceDesc, srv)
}

func _RuleEngine_CreateScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scene)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).CreateScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_CreateScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).CreateScene(ctx, req.(*Scene))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_GetScenes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetScenesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuleEngineServer).GetScenes(m, &ruleEngineGetScenesServer{stream})
}

type RuleEngine_GetScenesServer interface {
	Send(*Scene) error
	grpc.ServerStream
}

type ruleEngineGetScenesServer struct {
	grpc.ServerStream
}

func (x *ruleEngineGetScenesServer) Send(m *Scene) error {
	return x.ServerStream.SendMsg(m)
}

func _RuleEngine_DeleteScenes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScenesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).DeleteScenes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_DeleteScenes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).DeleteScenes(ctx, req.(*DeleteScenesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_UpdateScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scene)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).UpdateScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_UpdateScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).UpdateScene(ctx, req.(*Scene))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).CreateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_GetRules_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRulesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuleEngineServer).GetRules(m, &ruleEngineGetRulesServer{stream})
}

type RuleEngine_GetRulesServer interface {
	Send(*Rule) error
	grpc.ServerStream
}

type ruleEngineGetRulesServer struct {
	grpc.ServerStream
}

func (x *ruleEngineGetRulesServer) Send(m *Rule) error {
	return x.ServerStream.SendMsg(m)
}

func _RuleEngine_DeleteRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).DeleteRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_DeleteRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).DeleteRules(ctx, req.(*DeleteRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_UpdateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).UpdateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_InvokeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).InvokeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_InvokeRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).InvokeRule(ctx, req.(*InvokeRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_CreateRuleActionLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleActionLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).CreateRuleActionLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_CreateRuleActionLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).CreateRuleActionLink(ctx, req.(*RuleActionLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_GetRuleActionLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRuleActionLinksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuleEngineServer).GetRuleActionLinks(m, &ruleEngineGetRuleActionLinksServer{stream})
}

type RuleEngine_GetRuleActionLinksServer interface {
	Send(*RuleActionLink) error
	grpc.ServerStream
}

type ruleEngineGetRuleActionLinksServer struct {
	grpc.ServerStream
}

func (x *ruleEngineGetRuleActionLinksServer) Send(m *RuleActionLink) error {
	return x.ServerStream.SendMsg(m)
}

func _RuleEngine_DeleteRuleActionLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleActionLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).DeleteRuleActionLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_DeleteRuleActionLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).DeleteRuleActionLinks(ctx, req.(*DeleteRuleActionLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_UpdateRuleActionLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleActionLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).UpdateRuleActionLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_UpdateRuleActionLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).UpdateRuleActionLink(ctx, req.(*RuleActionLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_InvokeRuleActionLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRuleActionLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).InvokeRuleActionLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_InvokeRuleActionLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).InvokeRuleActionLink(ctx, req.(*InvokeRuleActionLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_GetAppliedRuleActionLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppliedRuleActionLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).GetAppliedRuleActionLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_GetAppliedRuleActionLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).GetAppliedRuleActionLinks(ctx, req.(*GetAppliedRuleActionLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleEngine_DeleteAppliedRuleActionLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedRuleActionLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleEngineServer).DeleteAppliedRuleActionLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleEngine_DeleteAppliedRuleActionLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleEngineServer).DeleteAppliedRuleActionLink(ctx, req.(*DeleteAppliedRuleActionLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleEngine_ServiceDesc is the grpc.ServiceDesc for RuleEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshotservice.pb.RuleEngine",
	HandlerType: (*RuleEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScene",
			Handler:    _RuleEngine_CreateScene_Handler,
		},
		{
			MethodName: "DeleteScenes",
			Handler:    _RuleEngine_DeleteScenes_Handler,
		},
		{
			MethodName: "UpdateScene",
			Handler:    _RuleEngine_UpdateScene_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _RuleEngine_CreateRule_Handler,
		},
		{
			MethodName: "DeleteRules",
			Handler:    _RuleEngine_DeleteRules_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _RuleEngine_UpdateRule_Handler,
		},
		{
			MethodName: "InvokeRule",
			Handler:    _RuleEngine_InvokeRule_Handler,
		},
		{
			MethodName: "CreateRuleActionLink",
			Handler:    _RuleEngine_CreateRuleActionLink_Handler,
		},
		{
			MethodName: "DeleteRuleActionLinks",
			Handler:    _RuleEngine_DeleteRuleActionLinks_Handler,
		},
		{
			MethodName: "UpdateRuleActionLink",
			Handler:    _RuleEngine_UpdateRuleActionLink_Handler,
		},
		{
			MethodName: "InvokeRuleActionLink",
			Handler:    _RuleEngine_InvokeRuleActionLink_Handler,
		},
		{
			MethodName: "GetAppliedRuleActionLinks",
			Handler:    _RuleEngine_GetAppliedRuleActionLinks_Handler,
		},
		{
			MethodName: "DeleteAppliedRuleActionLink",
			Handler:    _RuleEngine_DeleteAppliedRuleActionLink_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetScenes",
			Handler:       _RuleEngine_GetScenes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRules",
			Handler:       _RuleEngine_GetRules_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRuleActionLinks",
			Handler:       _RuleEngine_GetRuleActionLinks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snapshot-service/pb/service.proto",
}
