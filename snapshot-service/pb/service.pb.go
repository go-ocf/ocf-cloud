// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: snapshot-service/pb/service.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	commands "github.com/plgd-dev/hub/v2/resource-aggregate/commands"
	events "github.com/plgd-dev/hub/v2/resource-aggregate/events"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppliedConfiguration_Resource_Status int32

const (
	AppliedConfiguration_Resource_QUEUED              AppliedConfiguration_Resource_Status = 0
	AppliedConfiguration_Resource_INPROGRESS          AppliedConfiguration_Resource_Status = 1
	AppliedConfiguration_Resource_WAITING_FOR_REOURCE AppliedConfiguration_Resource_Status = 2
	AppliedConfiguration_Resource_DONE                AppliedConfiguration_Resource_Status = 3
	AppliedConfiguration_Resource_TIMEOUT             AppliedConfiguration_Resource_Status = 4
	AppliedConfiguration_Resource_FAIL                AppliedConfiguration_Resource_Status = 5
)

// Enum value maps for AppliedConfiguration_Resource_Status.
var (
	AppliedConfiguration_Resource_Status_name = map[int32]string{
		0: "QUEUED",
		1: "INPROGRESS",
		2: "WAITING_FOR_REOURCE",
		3: "DONE",
		4: "TIMEOUT",
		5: "FAIL",
	}
	AppliedConfiguration_Resource_Status_value = map[string]int32{
		"QUEUED":              0,
		"INPROGRESS":          1,
		"WAITING_FOR_REOURCE": 2,
		"DONE":                3,
		"TIMEOUT":             4,
		"FAIL":                5,
	}
)

func (x AppliedConfiguration_Resource_Status) Enum() *AppliedConfiguration_Resource_Status {
	p := new(AppliedConfiguration_Resource_Status)
	*p = x
	return p
}

func (x AppliedConfiguration_Resource_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppliedConfiguration_Resource_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_snapshot_service_pb_service_proto_enumTypes[0].Descriptor()
}

func (AppliedConfiguration_Resource_Status) Type() protoreflect.EnumType {
	return &file_snapshot_service_pb_service_proto_enumTypes[0]
}

func (x AppliedConfiguration_Resource_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppliedConfiguration_Resource_Status.Descriptor instead.
func (AppliedConfiguration_Resource_Status) EnumDescriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{10, 0, 0}
}

type IdFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Version:
	//
	//	*IdFilter_Value
	//	*IdFilter_All
	//	*IdFilter_Max
	Version isIdFilter_Version `protobuf_oneof:"version"`
}

func (x *IdFilter) Reset() {
	*x = IdFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdFilter) ProtoMessage() {}

func (x *IdFilter) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdFilter.ProtoReflect.Descriptor instead.
func (*IdFilter) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{0}
}

func (x *IdFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *IdFilter) GetVersion() isIdFilter_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (x *IdFilter) GetValue() uint64 {
	if x, ok := x.GetVersion().(*IdFilter_Value); ok {
		return x.Value
	}
	return 0
}

func (x *IdFilter) GetAll() bool {
	if x, ok := x.GetVersion().(*IdFilter_All); ok {
		return x.All
	}
	return false
}

func (x *IdFilter) GetMax() bool {
	if x, ok := x.GetVersion().(*IdFilter_Max); ok {
		return x.Max
	}
	return false
}

type isIdFilter_Version interface {
	isIdFilter_Version()
}

type IdFilter_Value struct {
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3,oneof"`
}

type IdFilter_All struct {
	All bool `protobuf:"varint,3,opt,name=all,proto3,oneof"`
}

type IdFilter_Max struct {
	Max bool `protobuf:"varint,4,opt,name=max,proto3,oneof"`
}

func (*IdFilter_Value) isIdFilter_Version() {}

func (*IdFilter_All) isIdFilter_Version() {}

func (*IdFilter_Max) isIdFilter_Version() {}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version             uint64                         `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Name                string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Enabled             bool                           `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DeviceIdFilter      []string                       `protobuf:"bytes,5,rep,name=device_id_filter,json=deviceIdFilter,proto3" json:"device_id_filter,omitempty"`
	ResourceTypeFilter  []string                       `protobuf:"bytes,6,rep,name=resource_type_filter,json=resourceTypeFilter,proto3" json:"resource_type_filter,omitempty"`
	ResourceHrefFilter  []string                       `protobuf:"bytes,7,rep,name=resource_href_filter,json=resourceHrefFilter,proto3" json:"resource_href_filter,omitempty"`
	YqExpression        string                         `protobuf:"bytes,8,opt,name=yq_expression,json=yqExpression,proto3" json:"yq_expression,omitempty"`
	InvokeConfiguration *Condition_InvokeConfiguration `protobuf:"bytes,9,opt,name=invoke_configuration,json=invokeConfiguration,proto3" json:"invoke_configuration,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{1}
}

func (x *Condition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Condition) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Condition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Condition) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Condition) GetDeviceIdFilter() []string {
	if x != nil {
		return x.DeviceIdFilter
	}
	return nil
}

func (x *Condition) GetResourceTypeFilter() []string {
	if x != nil {
		return x.ResourceTypeFilter
	}
	return nil
}

func (x *Condition) GetResourceHrefFilter() []string {
	if x != nil {
		return x.ResourceHrefFilter
	}
	return nil
}

func (x *Condition) GetYqExpression() string {
	if x != nil {
		return x.YqExpression
	}
	return ""
}

func (x *Condition) GetInvokeConfiguration() *Condition_InvokeConfiguration {
	if x != nil {
		return x.InvokeConfiguration
	}
	return nil
}

type GetConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdFilter []*IdFilter `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
}

func (x *GetConditionsRequest) Reset() {
	*x = GetConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConditionsRequest) ProtoMessage() {}

func (x *GetConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetConditionsRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetConditionsRequest) GetIdFilter() []*IdFilter {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

type DeleteConditionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdFilter []*IdFilter `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
}

func (x *DeleteConditionsRequest) Reset() {
	*x = DeleteConditionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConditionsRequest) ProtoMessage() {}

func (x *DeleteConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConditionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteConditionsRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteConditionsRequest) GetIdFilter() []*IdFilter {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

type DeleteConditionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteConditionsResponse) Reset() {
	*x = DeleteConditionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConditionsResponse) ProtoMessage() {}

func (x *DeleteConditionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConditionsResponse.ProtoReflect.Descriptor instead.
func (*DeleteConditionsResponse) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteConditionsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ResourceTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"` // all types must match resource
	Min   uint32   `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`    // minimal number of resources that will be updated
}

func (x *ResourceTypes) Reset() {
	*x = ResourceTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypes) ProtoMessage() {}

func (x *ResourceTypes) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypes.ProtoReflect.Descriptor instead.
func (*ResourceTypes) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceTypes) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ResourceTypes) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version   uint64                    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Name      string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Resources []*Configuration_Resource `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{6}
}

func (x *Configuration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Configuration) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Configuration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Configuration) GetResources() []*Configuration_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type GetConfigurationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdFilter []*IdFilter `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
}

func (x *GetConfigurationsRequest) Reset() {
	*x = GetConfigurationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigurationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationsRequest) ProtoMessage() {}

func (x *GetConfigurationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationsRequest.ProtoReflect.Descriptor instead.
func (*GetConfigurationsRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetConfigurationsRequest) GetIdFilter() []*IdFilter {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

type DeleteConfigurationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdFilter []*IdFilter `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
}

func (x *DeleteConfigurationsRequest) Reset() {
	*x = DeleteConfigurationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigurationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigurationsRequest) ProtoMessage() {}

func (x *DeleteConfigurationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigurationsRequest.ProtoReflect.Descriptor instead.
func (*DeleteConfigurationsRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteConfigurationsRequest) GetIdFilter() []*IdFilter {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

type DeleteConfigurationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteConfigurationsResponse) Reset() {
	*x = DeleteConfigurationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigurationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigurationsResponse) ProtoMessage() {}

func (x *DeleteConfigurationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigurationsResponse.ProtoReflect.Descriptor instead.
func (*DeleteConfigurationsResponse) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteConfigurationsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AppliedConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceId        string                           `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ConfigurationId *AppliedConfiguration_RelationTo `protobuf:"bytes,3,opt,name=configuration_id,json=configurationId,proto3" json:"configuration_id,omitempty"`
	// Types that are assignable to ExecutedBy:
	//
	//	*AppliedConfiguration_OnDemaned
	//	*AppliedConfiguration_ConditionId
	ExecutedBy isAppliedConfiguration_ExecutedBy `protobuf_oneof:"executed_by"`
	Resources  []*AppliedConfiguration_Resource  `protobuf:"bytes,6,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *AppliedConfiguration) Reset() {
	*x = AppliedConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppliedConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppliedConfiguration) ProtoMessage() {}

func (x *AppliedConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppliedConfiguration.ProtoReflect.Descriptor instead.
func (*AppliedConfiguration) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{10}
}

func (x *AppliedConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppliedConfiguration) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AppliedConfiguration) GetConfigurationId() *AppliedConfiguration_RelationTo {
	if x != nil {
		return x.ConfigurationId
	}
	return nil
}

func (m *AppliedConfiguration) GetExecutedBy() isAppliedConfiguration_ExecutedBy {
	if m != nil {
		return m.ExecutedBy
	}
	return nil
}

func (x *AppliedConfiguration) GetOnDemaned() bool {
	if x, ok := x.GetExecutedBy().(*AppliedConfiguration_OnDemaned); ok {
		return x.OnDemaned
	}
	return false
}

func (x *AppliedConfiguration) GetConditionId() *AppliedConfiguration_RelationTo {
	if x, ok := x.GetExecutedBy().(*AppliedConfiguration_ConditionId); ok {
		return x.ConditionId
	}
	return nil
}

func (x *AppliedConfiguration) GetResources() []*AppliedConfiguration_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type isAppliedConfiguration_ExecutedBy interface {
	isAppliedConfiguration_ExecutedBy()
}

type AppliedConfiguration_OnDemaned struct {
	OnDemaned bool `protobuf:"varint,4,opt,name=on_demaned,json=onDemaned,proto3,oneof"`
}

type AppliedConfiguration_ConditionId struct {
	ConditionId *AppliedConfiguration_RelationTo `protobuf:"bytes,5,opt,name=condition_id,json=conditionId,proto3,oneof"`
}

func (*AppliedConfiguration_OnDemaned) isAppliedConfiguration_ExecutedBy() {}

func (*AppliedConfiguration_ConditionId) isAppliedConfiguration_ExecutedBy() {}

type InvokeConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceIdFilter        []string `protobuf:"bytes,2,rep,name=device_id_filter,json=deviceIdFilter,proto3" json:"device_id_filter,omitempty"`                         // at least one must be set
	Force                 bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`                                                                  // force update even if the configuration has already been applied to device
	KeepUpdatingOnFailure bool     `protobuf:"varint,4,opt,name=keep_updating_on_failure,json=keepUpdatingOnFailure,proto3" json:"keep_updating_on_failure,omitempty"` // if any update resource fails continue with next resource
}

func (x *InvokeConfigurationRequest) Reset() {
	*x = InvokeConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeConfigurationRequest) ProtoMessage() {}

func (x *InvokeConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeConfigurationRequest.ProtoReflect.Descriptor instead.
func (*InvokeConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{11}
}

func (x *InvokeConfigurationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvokeConfigurationRequest) GetDeviceIdFilter() []string {
	if x != nil {
		return x.DeviceIdFilter
	}
	return nil
}

func (x *InvokeConfigurationRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *InvokeConfigurationRequest) GetKeepUpdatingOnFailure() bool {
	if x != nil {
		return x.KeepUpdatingOnFailure
	}
	return false
}

type GetAppliedConfigurationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdFilter              []string    `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
	ConfigurationIdFilter []*IdFilter `protobuf:"bytes,2,rep,name=configuration_id_filter,json=configurationIdFilter,proto3" json:"configuration_id_filter,omitempty"`
	DeviceIdFilter        []string    `protobuf:"bytes,3,rep,name=device_id_filter,json=deviceIdFilter,proto3" json:"device_id_filter,omitempty"`
	ConditionIdFilter     []string    `protobuf:"bytes,4,rep,name=condition_id_filter,json=conditionIdFilter,proto3" json:"condition_id_filter,omitempty"`
}

func (x *GetAppliedConfigurationsRequest) Reset() {
	*x = GetAppliedConfigurationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppliedConfigurationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppliedConfigurationsRequest) ProtoMessage() {}

func (x *GetAppliedConfigurationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppliedConfigurationsRequest.ProtoReflect.Descriptor instead.
func (*GetAppliedConfigurationsRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetAppliedConfigurationsRequest) GetIdFilter() []string {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

func (x *GetAppliedConfigurationsRequest) GetConfigurationIdFilter() []*IdFilter {
	if x != nil {
		return x.ConfigurationIdFilter
	}
	return nil
}

func (x *GetAppliedConfigurationsRequest) GetDeviceIdFilter() []string {
	if x != nil {
		return x.DeviceIdFilter
	}
	return nil
}

func (x *GetAppliedConfigurationsRequest) GetConditionIdFilter() []string {
	if x != nil {
		return x.ConditionIdFilter
	}
	return nil
}

type DeleteAppliedConfigurationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdFilter []string `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
}

func (x *DeleteAppliedConfigurationsRequest) Reset() {
	*x = DeleteAppliedConfigurationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppliedConfigurationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppliedConfigurationsRequest) ProtoMessage() {}

func (x *DeleteAppliedConfigurationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppliedConfigurationsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppliedConfigurationsRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteAppliedConfigurationsRequest) GetIdFilter() []string {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

type DeleteAppliedConfigurationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteAppliedConfigurationsResponse) Reset() {
	*x = DeleteAppliedConfigurationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppliedConfigurationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppliedConfigurationsResponse) ProtoMessage() {}

func (x *DeleteAppliedConfigurationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppliedConfigurationsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAppliedConfigurationsResponse) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteAppliedConfigurationsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Condition_InvokeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // latest version of cfg
	KeepUpdatingOnFailure bool   `protobuf:"varint,2,opt,name=keep_updating_on_failure,json=keepUpdatingOnFailure,proto3" json:"keep_updating_on_failure,omitempty"`
	ApiAccessToken        string `protobuf:"bytes,3,opt,name=api_access_token,json=apiAccessToken,proto3" json:"api_access_token,omitempty"` // token used to update resources in the configuration
}

func (x *Condition_InvokeConfiguration) Reset() {
	*x = Condition_InvokeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_InvokeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_InvokeConfiguration) ProtoMessage() {}

func (x *Condition_InvokeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_InvokeConfiguration.ProtoReflect.Descriptor instead.
func (*Condition_InvokeConfiguration) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Condition_InvokeConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Condition_InvokeConfiguration) GetKeepUpdatingOnFailure() bool {
	if x != nil {
		return x.KeepUpdatingOnFailure
	}
	return false
}

func (x *Condition_InvokeConfiguration) GetApiAccessToken() string {
	if x != nil {
		return x.ApiAccessToken
	}
	return ""
}

type Configuration_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*Configuration_Resource_Href
	//	*Configuration_Resource_ResourceTypes
	Filter     isConfiguration_Resource_Filter `protobuf_oneof:"filter"`
	Content    *commands.Content               `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	TimeToLive int64                           `protobuf:"varint,4,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"` // optional update command time to live
}

func (x *Configuration_Resource) Reset() {
	*x = Configuration_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration_Resource) ProtoMessage() {}

func (x *Configuration_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration_Resource.ProtoReflect.Descriptor instead.
func (*Configuration_Resource) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{6, 0}
}

func (m *Configuration_Resource) GetFilter() isConfiguration_Resource_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *Configuration_Resource) GetHref() string {
	if x, ok := x.GetFilter().(*Configuration_Resource_Href); ok {
		return x.Href
	}
	return ""
}

func (x *Configuration_Resource) GetResourceTypes() *ResourceTypes {
	if x, ok := x.GetFilter().(*Configuration_Resource_ResourceTypes); ok {
		return x.ResourceTypes
	}
	return nil
}

func (x *Configuration_Resource) GetContent() *commands.Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Configuration_Resource) GetTimeToLive() int64 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type isConfiguration_Resource_Filter interface {
	isConfiguration_Resource_Filter()
}

type Configuration_Resource_Href struct {
	Href string `protobuf:"bytes,1,opt,name=href,proto3,oneof"`
}

type Configuration_Resource_ResourceTypes struct {
	ResourceTypes *ResourceTypes `protobuf:"bytes,2,opt,name=resource_types,json=resourceTypes,proto3,oneof"`
}

func (*Configuration_Resource_Href) isConfiguration_Resource_Filter() {}

func (*Configuration_Resource_ResourceTypes) isConfiguration_Resource_Filter() {}

type AppliedConfiguration_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId                *commands.ResourceId                 `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ConfigurationResourcesIdx uint32                               `protobuf:"varint,2,opt,name=configuration_resources_idx,json=configurationResourcesIdx,proto3" json:"configuration_resources_idx,omitempty"` // index of resource in configuration resources array. For resource types it could be mutliple resources.
	Status                    AppliedConfiguration_Resource_Status `protobuf:"varint,3,opt,name=status,proto3,enum=snapshotservice.pb.AppliedConfiguration_Resource_Status" json:"status,omitempty"`
	TimestampStart            int64                                `protobuf:"varint,4,opt,name=timestamp_start,json=timestampStart,proto3" json:"timestamp_start,omitempty"` // when the rule association was applied
	ValidUntil                int64                                `protobuf:"varint,5,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`             // how long the command is valid
	ResourceUpdated           *events.ResourceUpdated              `protobuf:"bytes,6,opt,name=resource_updated,json=resourceUpdated,proto3" json:"resource_updated,omitempty"`
}

func (x *AppliedConfiguration_Resource) Reset() {
	*x = AppliedConfiguration_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppliedConfiguration_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppliedConfiguration_Resource) ProtoMessage() {}

func (x *AppliedConfiguration_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppliedConfiguration_Resource.ProtoReflect.Descriptor instead.
func (*AppliedConfiguration_Resource) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *AppliedConfiguration_Resource) GetResourceId() *commands.ResourceId {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *AppliedConfiguration_Resource) GetConfigurationResourcesIdx() uint32 {
	if x != nil {
		return x.ConfigurationResourcesIdx
	}
	return 0
}

func (x *AppliedConfiguration_Resource) GetStatus() AppliedConfiguration_Resource_Status {
	if x != nil {
		return x.Status
	}
	return AppliedConfiguration_Resource_QUEUED
}

func (x *AppliedConfiguration_Resource) GetTimestampStart() int64 {
	if x != nil {
		return x.TimestampStart
	}
	return 0
}

func (x *AppliedConfiguration_Resource) GetValidUntil() int64 {
	if x != nil {
		return x.ValidUntil
	}
	return 0
}

func (x *AppliedConfiguration_Resource) GetResourceUpdated() *events.ResourceUpdated {
	if x != nil {
		return x.ResourceUpdated
	}
	return nil
}

type AppliedConfiguration_RelationTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *AppliedConfiguration_RelationTo) Reset() {
	*x = AppliedConfiguration_RelationTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_service_pb_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppliedConfiguration_RelationTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppliedConfiguration_RelationTo) ProtoMessage() {}

func (x *AppliedConfiguration_RelationTo) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_service_pb_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppliedConfiguration_RelationTo.ProtoReflect.Descriptor instead.
func (*AppliedConfiguration_RelationTo) Descriptor() ([]byte, []int) {
	return file_snapshot_service_pb_service_proto_rawDescGZIP(), []int{10, 1}
}

func (x *AppliedConfiguration_RelationTo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppliedConfiguration_RelationTo) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_snapshot_service_pb_service_proto protoreflect.FileDescriptor

var file_snapshot_service_pb_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x1a, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x65, 0x0a, 0x08, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x42, 0x09, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x72, 0x65, 0x66, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x79,
	0x71, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x79, 0x71, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x64, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x88, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x6b, 0x65, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x69, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x08, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x22, 0xeb, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a,
	0xd1, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x04,
	0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x72,
	0x65, 0x66, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x08, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x69, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x94, 0x07, 0x0a, 0x14, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x5e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x65,
	0x64, 0x12, 0x58, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0xdb, 0x03, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x64, 0x78, 0x12, 0x50, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x52, 0x45, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x1a, 0x36, 0x0a, 0x0a, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x6b, 0x65, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x17, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x22, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3b, 0x0a,
	0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xe4, 0x0d, 0x0a, 0x0f, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7d,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x2c, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x85, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x28, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x1d, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x31, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x21, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x34, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01,
	0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x31, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x30, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x31, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x21, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x39, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a,
	0x1a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xac, 0x01,
	0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x39, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x30, 0x01, 0x12, 0xb6, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x30, 0x01, 0x12, 0xc9, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x2a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x42, 0xd6, 0x02, 0x92, 0x41, 0x9f, 0x02, 0x12, 0xc7, 0x01, 0x0a, 0x14, 0x50, 0x4c, 0x47,
	0x44, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x20, 0x41, 0x50,
	0x49, 0x12, 0x27, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x50, 0x4c, 0x47, 0x44, 0x22, 0x3a, 0x0a, 0x08, 0x70, 0x6c,
	0x67, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x12, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x67, 0x64, 0x2d,
	0x64, 0x65, 0x76, 0x2f, 0x68, 0x75, 0x62, 0x1a, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x40, 0x70, 0x6c,
	0x67, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2a, 0x45, 0x0a, 0x12, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x6c, 0x67, 0x64, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x62, 0x6c,
	0x6f, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03, 0x31,
	0x2e, 0x30, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x32, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x67, 0x64, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x68, 0x75, 0x62,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_snapshot_service_pb_service_proto_rawDescOnce sync.Once
	file_snapshot_service_pb_service_proto_rawDescData = file_snapshot_service_pb_service_proto_rawDesc
)

func file_snapshot_service_pb_service_proto_rawDescGZIP() []byte {
	file_snapshot_service_pb_service_proto_rawDescOnce.Do(func() {
		file_snapshot_service_pb_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_snapshot_service_pb_service_proto_rawDescData)
	})
	return file_snapshot_service_pb_service_proto_rawDescData
}

var file_snapshot_service_pb_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_snapshot_service_pb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_snapshot_service_pb_service_proto_goTypes = []interface{}{
	(AppliedConfiguration_Resource_Status)(0), // 0: snapshotservice.pb.AppliedConfiguration.Resource.Status
	(*IdFilter)(nil),                            // 1: snapshotservice.pb.IdFilter
	(*Condition)(nil),                           // 2: snapshotservice.pb.Condition
	(*GetConditionsRequest)(nil),                // 3: snapshotservice.pb.GetConditionsRequest
	(*DeleteConditionsRequest)(nil),             // 4: snapshotservice.pb.DeleteConditionsRequest
	(*DeleteConditionsResponse)(nil),            // 5: snapshotservice.pb.DeleteConditionsResponse
	(*ResourceTypes)(nil),                       // 6: snapshotservice.pb.ResourceTypes
	(*Configuration)(nil),                       // 7: snapshotservice.pb.Configuration
	(*GetConfigurationsRequest)(nil),            // 8: snapshotservice.pb.GetConfigurationsRequest
	(*DeleteConfigurationsRequest)(nil),         // 9: snapshotservice.pb.DeleteConfigurationsRequest
	(*DeleteConfigurationsResponse)(nil),        // 10: snapshotservice.pb.DeleteConfigurationsResponse
	(*AppliedConfiguration)(nil),                // 11: snapshotservice.pb.AppliedConfiguration
	(*InvokeConfigurationRequest)(nil),          // 12: snapshotservice.pb.InvokeConfigurationRequest
	(*GetAppliedConfigurationsRequest)(nil),     // 13: snapshotservice.pb.GetAppliedConfigurationsRequest
	(*DeleteAppliedConfigurationsRequest)(nil),  // 14: snapshotservice.pb.DeleteAppliedConfigurationsRequest
	(*DeleteAppliedConfigurationsResponse)(nil), // 15: snapshotservice.pb.DeleteAppliedConfigurationsResponse
	(*Condition_InvokeConfiguration)(nil),       // 16: snapshotservice.pb.Condition.InvokeConfiguration
	(*Configuration_Resource)(nil),              // 17: snapshotservice.pb.Configuration.Resource
	(*AppliedConfiguration_Resource)(nil),       // 18: snapshotservice.pb.AppliedConfiguration.Resource
	(*AppliedConfiguration_RelationTo)(nil),     // 19: snapshotservice.pb.AppliedConfiguration.RelationTo
	(*commands.Content)(nil),                    // 20: resourceaggregate.pb.Content
	(*commands.ResourceId)(nil),                 // 21: resourceaggregate.pb.ResourceId
	(*events.ResourceUpdated)(nil),              // 22: resourceaggregate.pb.ResourceUpdated
}
var file_snapshot_service_pb_service_proto_depIdxs = []int32{
	16, // 0: snapshotservice.pb.Condition.invoke_configuration:type_name -> snapshotservice.pb.Condition.InvokeConfiguration
	1,  // 1: snapshotservice.pb.GetConditionsRequest.id_filter:type_name -> snapshotservice.pb.IdFilter
	1,  // 2: snapshotservice.pb.DeleteConditionsRequest.id_filter:type_name -> snapshotservice.pb.IdFilter
	17, // 3: snapshotservice.pb.Configuration.resources:type_name -> snapshotservice.pb.Configuration.Resource
	1,  // 4: snapshotservice.pb.GetConfigurationsRequest.id_filter:type_name -> snapshotservice.pb.IdFilter
	1,  // 5: snapshotservice.pb.DeleteConfigurationsRequest.id_filter:type_name -> snapshotservice.pb.IdFilter
	19, // 6: snapshotservice.pb.AppliedConfiguration.configuration_id:type_name -> snapshotservice.pb.AppliedConfiguration.RelationTo
	19, // 7: snapshotservice.pb.AppliedConfiguration.condition_id:type_name -> snapshotservice.pb.AppliedConfiguration.RelationTo
	18, // 8: snapshotservice.pb.AppliedConfiguration.resources:type_name -> snapshotservice.pb.AppliedConfiguration.Resource
	1,  // 9: snapshotservice.pb.GetAppliedConfigurationsRequest.configuration_id_filter:type_name -> snapshotservice.pb.IdFilter
	6,  // 10: snapshotservice.pb.Configuration.Resource.resource_types:type_name -> snapshotservice.pb.ResourceTypes
	20, // 11: snapshotservice.pb.Configuration.Resource.content:type_name -> resourceaggregate.pb.Content
	21, // 12: snapshotservice.pb.AppliedConfiguration.Resource.resource_id:type_name -> resourceaggregate.pb.ResourceId
	0,  // 13: snapshotservice.pb.AppliedConfiguration.Resource.status:type_name -> snapshotservice.pb.AppliedConfiguration.Resource.Status
	22, // 14: snapshotservice.pb.AppliedConfiguration.Resource.resource_updated:type_name -> resourceaggregate.pb.ResourceUpdated
	2,  // 15: snapshotservice.pb.SnapshotService.CreateCondition:input_type -> snapshotservice.pb.Condition
	3,  // 16: snapshotservice.pb.SnapshotService.GetConditions:input_type -> snapshotservice.pb.GetConditionsRequest
	4,  // 17: snapshotservice.pb.SnapshotService.DeleteConditions:input_type -> snapshotservice.pb.DeleteConditionsRequest
	2,  // 18: snapshotservice.pb.SnapshotService.UpdateCondition:input_type -> snapshotservice.pb.Condition
	7,  // 19: snapshotservice.pb.SnapshotService.CreateConfiguration:input_type -> snapshotservice.pb.Configuration
	8,  // 20: snapshotservice.pb.SnapshotService.GetConfigurations:input_type -> snapshotservice.pb.GetConfigurationsRequest
	9,  // 21: snapshotservice.pb.SnapshotService.DeleteConfigurations:input_type -> snapshotservice.pb.DeleteConfigurationsRequest
	7,  // 22: snapshotservice.pb.SnapshotService.UpdateConfiguration:input_type -> snapshotservice.pb.Configuration
	12, // 23: snapshotservice.pb.SnapshotService.InvokeConfiguration:input_type -> snapshotservice.pb.InvokeConfigurationRequest
	13, // 24: snapshotservice.pb.SnapshotService.GetAppliedConfigurations:input_type -> snapshotservice.pb.GetAppliedConfigurationsRequest
	14, // 25: snapshotservice.pb.SnapshotService.DeleteAppliedConfigurations:input_type -> snapshotservice.pb.DeleteAppliedConfigurationsRequest
	2,  // 26: snapshotservice.pb.SnapshotService.CreateCondition:output_type -> snapshotservice.pb.Condition
	2,  // 27: snapshotservice.pb.SnapshotService.GetConditions:output_type -> snapshotservice.pb.Condition
	5,  // 28: snapshotservice.pb.SnapshotService.DeleteConditions:output_type -> snapshotservice.pb.DeleteConditionsResponse
	2,  // 29: snapshotservice.pb.SnapshotService.UpdateCondition:output_type -> snapshotservice.pb.Condition
	7,  // 30: snapshotservice.pb.SnapshotService.CreateConfiguration:output_type -> snapshotservice.pb.Configuration
	7,  // 31: snapshotservice.pb.SnapshotService.GetConfigurations:output_type -> snapshotservice.pb.Configuration
	10, // 32: snapshotservice.pb.SnapshotService.DeleteConfigurations:output_type -> snapshotservice.pb.DeleteConfigurationsResponse
	7,  // 33: snapshotservice.pb.SnapshotService.UpdateConfiguration:output_type -> snapshotservice.pb.Configuration
	11, // 34: snapshotservice.pb.SnapshotService.InvokeConfiguration:output_type -> snapshotservice.pb.AppliedConfiguration
	11, // 35: snapshotservice.pb.SnapshotService.GetAppliedConfigurations:output_type -> snapshotservice.pb.AppliedConfiguration
	15, // 36: snapshotservice.pb.SnapshotService.DeleteAppliedConfigurations:output_type -> snapshotservice.pb.DeleteAppliedConfigurationsResponse
	26, // [26:37] is the sub-list for method output_type
	15, // [15:26] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_snapshot_service_pb_service_proto_init() }
func file_snapshot_service_pb_service_proto_init() {
	if File_snapshot_service_pb_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snapshot_service_pb_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConditionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConditionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigurationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigurationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigurationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppliedConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppliedConfigurationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppliedConfigurationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppliedConfigurationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_InvokeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppliedConfiguration_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_service_pb_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppliedConfiguration_RelationTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snapshot_service_pb_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IdFilter_Value)(nil),
		(*IdFilter_All)(nil),
		(*IdFilter_Max)(nil),
	}
	file_snapshot_service_pb_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*AppliedConfiguration_OnDemaned)(nil),
		(*AppliedConfiguration_ConditionId)(nil),
	}
	file_snapshot_service_pb_service_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Configuration_Resource_Href)(nil),
		(*Configuration_Resource_ResourceTypes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snapshot_service_pb_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_snapshot_service_pb_service_proto_goTypes,
		DependencyIndexes: file_snapshot_service_pb_service_proto_depIdxs,
		EnumInfos:         file_snapshot_service_pb_service_proto_enumTypes,
		MessageInfos:      file_snapshot_service_pb_service_proto_msgTypes,
	}.Build()
	File_snapshot_service_pb_service_proto = out.File
	file_snapshot_service_pb_service_proto_rawDesc = nil
	file_snapshot_service_pb_service_proto_goTypes = nil
	file_snapshot_service_pb_service_proto_depIdxs = nil
}
