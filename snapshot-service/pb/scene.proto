syntax = "proto3";

package snapshotservice.pb;

option go_package = "github.com/plgd-dev/hub/v2/snapshot-service/pb;pb";

import "resource-aggregate/pb/resources.proto";
import "snapshot-service/pb/yqEngine.proto";


message UpdateResourceContentTemplate {
    // message GenerateContent {
    //     YQEngine yq_engine = 1;
    //     string content_type = 2;
    // }
    
    // message ApplyToDevices {
    //     bool device_id_from_request = 1; // device that is originally started the scene
    //     repeated string device_ids = 2; // identifies devices
    // //    repeated string device_types = 3; // device type just for filtering device when device_ids and current device is not set
    // }
    string deviceIDArgName = 1; //fridgeDeviceID
    message ApplyToResources {
        repeated string hrefs = 1; // identifies resources at the device.
        repeated string types = 2; // and operator among types -> type defines a list of properties in content 
    }
    /// ApplyToDevices device_filter = 1;
    ApplyToResources resource_filter = 2;

    oneof content {
        resourceaggregate.pb.Content defined = 3;
    //    GenerateContent generated = 4;
    }
    string resource_interface = 6; // optional update interface
    int64 time_to_live = 7; // optional update command time to live
}

message ConfigurationTemplate {
    string id = 1;
    string name = 2;
    repeated UpdateResourceContentTemplate resources = 3;
}


rule engine:
  trigger:
    resource-changed:
      napr.:
        href: /light/1
        deviceID: deviceID
        content:
          state:
            power: on
            brightness: $brightness
  condition:
     - $resource-changed.href == "/light/1" && $resource-changed.content.state.power == "on"
  action:
     - scenesID
     - najdi rule action link s rule id
        - spusti rule action link s parametrami:
            deviceID: deviceID
            href: /light/1


updateResourceTemplate:
    deviceID: $fridgeDeviceID
    oneof {
        href:
        resource-types
    }
    resource-interface:
    content:
        state:
            power: on
            brightness: 100

configuration:
    id: 
    updateResourceTemplate []updateResourceTemplate

ApplyConfiguration:
    id:
    args:
        deviceID: "uuid"
        fridgeDeviceID: "uuid"


rule action link:
  ruleID: ruleID
  trigger:
    deviceID: deviceID
    href: /light/1
  condition:
    if frequency satisfied
  apply scenes:
    - sceneID
        -> update resources
    - sceneID
        -> update resources
    - sceneID
        -> update resources


