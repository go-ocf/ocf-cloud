// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: device-provisioning-service/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceProvisionService_GetProvisioningRecords_FullMethodName    = "/deviceprovisioningservice.pb.DeviceProvisionService/GetProvisioningRecords"
	DeviceProvisionService_DeleteProvisioningRecords_FullMethodName = "/deviceprovisioningservice.pb.DeviceProvisionService/DeleteProvisioningRecords"
	DeviceProvisionService_GetEnrollmentGroups_FullMethodName       = "/deviceprovisioningservice.pb.DeviceProvisionService/GetEnrollmentGroups"
	DeviceProvisionService_CreateEnrollmentGroup_FullMethodName     = "/deviceprovisioningservice.pb.DeviceProvisionService/CreateEnrollmentGroup"
	DeviceProvisionService_UpdateEnrollmentGroup_FullMethodName     = "/deviceprovisioningservice.pb.DeviceProvisionService/UpdateEnrollmentGroup"
	DeviceProvisionService_DeleteEnrollmentGroups_FullMethodName    = "/deviceprovisioningservice.pb.DeviceProvisionService/DeleteEnrollmentGroups"
	DeviceProvisionService_GetHubs_FullMethodName                   = "/deviceprovisioningservice.pb.DeviceProvisionService/GetHubs"
	DeviceProvisionService_CreateHub_FullMethodName                 = "/deviceprovisioningservice.pb.DeviceProvisionService/CreateHub"
	DeviceProvisionService_UpdateHub_FullMethodName                 = "/deviceprovisioningservice.pb.DeviceProvisionService/UpdateHub"
	DeviceProvisionService_DeleteHubs_FullMethodName                = "/deviceprovisioningservice.pb.DeviceProvisionService/DeleteHubs"
)

// DeviceProvisionServiceClient is the client API for DeviceProvisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceProvisionServiceClient interface {
	// Get registrations of devices
	GetProvisioningRecords(ctx context.Context, in *GetProvisioningRecordsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProvisioningRecord], error)
	DeleteProvisioningRecords(ctx context.Context, in *DeleteProvisioningRecordsRequest, opts ...grpc.CallOption) (*DeleteProvisioningRecordsResponse, error)
	GetEnrollmentGroups(ctx context.Context, in *GetEnrollmentGroupsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EnrollmentGroup], error)
	CreateEnrollmentGroup(ctx context.Context, in *CreateEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroup, error)
	UpdateEnrollmentGroup(ctx context.Context, in *UpdateEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroup, error)
	DeleteEnrollmentGroups(ctx context.Context, in *DeleteEnrollmentGroupsRequest, opts ...grpc.CallOption) (*DeleteEnrollmentGroupsResponse, error)
	GetHubs(ctx context.Context, in *GetHubsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Hub], error)
	CreateHub(ctx context.Context, in *CreateHubRequest, opts ...grpc.CallOption) (*Hub, error)
	UpdateHub(ctx context.Context, in *UpdateHubRequest, opts ...grpc.CallOption) (*Hub, error)
	DeleteHubs(ctx context.Context, in *DeleteHubsRequest, opts ...grpc.CallOption) (*DeleteHubsResponse, error)
}

type deviceProvisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceProvisionServiceClient(cc grpc.ClientConnInterface) DeviceProvisionServiceClient {
	return &deviceProvisionServiceClient{cc}
}

func (c *deviceProvisionServiceClient) GetProvisioningRecords(ctx context.Context, in *GetProvisioningRecordsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProvisioningRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceProvisionService_ServiceDesc.Streams[0], DeviceProvisionService_GetProvisioningRecords_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetProvisioningRecordsRequest, ProvisioningRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceProvisionService_GetProvisioningRecordsClient = grpc.ServerStreamingClient[ProvisioningRecord]

func (c *deviceProvisionServiceClient) DeleteProvisioningRecords(ctx context.Context, in *DeleteProvisioningRecordsRequest, opts ...grpc.CallOption) (*DeleteProvisioningRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProvisioningRecordsResponse)
	err := c.cc.Invoke(ctx, DeviceProvisionService_DeleteProvisioningRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionServiceClient) GetEnrollmentGroups(ctx context.Context, in *GetEnrollmentGroupsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EnrollmentGroup], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceProvisionService_ServiceDesc.Streams[1], DeviceProvisionService_GetEnrollmentGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetEnrollmentGroupsRequest, EnrollmentGroup]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceProvisionService_GetEnrollmentGroupsClient = grpc.ServerStreamingClient[EnrollmentGroup]

func (c *deviceProvisionServiceClient) CreateEnrollmentGroup(ctx context.Context, in *CreateEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrollmentGroup)
	err := c.cc.Invoke(ctx, DeviceProvisionService_CreateEnrollmentGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionServiceClient) UpdateEnrollmentGroup(ctx context.Context, in *UpdateEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrollmentGroup)
	err := c.cc.Invoke(ctx, DeviceProvisionService_UpdateEnrollmentGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionServiceClient) DeleteEnrollmentGroups(ctx context.Context, in *DeleteEnrollmentGroupsRequest, opts ...grpc.CallOption) (*DeleteEnrollmentGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnrollmentGroupsResponse)
	err := c.cc.Invoke(ctx, DeviceProvisionService_DeleteEnrollmentGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionServiceClient) GetHubs(ctx context.Context, in *GetHubsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Hub], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceProvisionService_ServiceDesc.Streams[2], DeviceProvisionService_GetHubs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetHubsRequest, Hub]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceProvisionService_GetHubsClient = grpc.ServerStreamingClient[Hub]

func (c *deviceProvisionServiceClient) CreateHub(ctx context.Context, in *CreateHubRequest, opts ...grpc.CallOption) (*Hub, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hub)
	err := c.cc.Invoke(ctx, DeviceProvisionService_CreateHub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionServiceClient) UpdateHub(ctx context.Context, in *UpdateHubRequest, opts ...grpc.CallOption) (*Hub, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hub)
	err := c.cc.Invoke(ctx, DeviceProvisionService_UpdateHub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionServiceClient) DeleteHubs(ctx context.Context, in *DeleteHubsRequest, opts ...grpc.CallOption) (*DeleteHubsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHubsResponse)
	err := c.cc.Invoke(ctx, DeviceProvisionService_DeleteHubs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceProvisionServiceServer is the server API for DeviceProvisionService service.
// All implementations must embed UnimplementedDeviceProvisionServiceServer
// for forward compatibility.
type DeviceProvisionServiceServer interface {
	// Get registrations of devices
	GetProvisioningRecords(*GetProvisioningRecordsRequest, grpc.ServerStreamingServer[ProvisioningRecord]) error
	DeleteProvisioningRecords(context.Context, *DeleteProvisioningRecordsRequest) (*DeleteProvisioningRecordsResponse, error)
	GetEnrollmentGroups(*GetEnrollmentGroupsRequest, grpc.ServerStreamingServer[EnrollmentGroup]) error
	CreateEnrollmentGroup(context.Context, *CreateEnrollmentGroupRequest) (*EnrollmentGroup, error)
	UpdateEnrollmentGroup(context.Context, *UpdateEnrollmentGroupRequest) (*EnrollmentGroup, error)
	DeleteEnrollmentGroups(context.Context, *DeleteEnrollmentGroupsRequest) (*DeleteEnrollmentGroupsResponse, error)
	GetHubs(*GetHubsRequest, grpc.ServerStreamingServer[Hub]) error
	CreateHub(context.Context, *CreateHubRequest) (*Hub, error)
	UpdateHub(context.Context, *UpdateHubRequest) (*Hub, error)
	DeleteHubs(context.Context, *DeleteHubsRequest) (*DeleteHubsResponse, error)
	mustEmbedUnimplementedDeviceProvisionServiceServer()
}

// UnimplementedDeviceProvisionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceProvisionServiceServer struct{}

func (UnimplementedDeviceProvisionServiceServer) GetProvisioningRecords(*GetProvisioningRecordsRequest, grpc.ServerStreamingServer[ProvisioningRecord]) error {
	return status.Errorf(codes.Unimplemented, "method GetProvisioningRecords not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) DeleteProvisioningRecords(context.Context, *DeleteProvisioningRecordsRequest) (*DeleteProvisioningRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvisioningRecords not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) GetEnrollmentGroups(*GetEnrollmentGroupsRequest, grpc.ServerStreamingServer[EnrollmentGroup]) error {
	return status.Errorf(codes.Unimplemented, "method GetEnrollmentGroups not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) CreateEnrollmentGroup(context.Context, *CreateEnrollmentGroupRequest) (*EnrollmentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollmentGroup not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) UpdateEnrollmentGroup(context.Context, *UpdateEnrollmentGroupRequest) (*EnrollmentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrollmentGroup not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) DeleteEnrollmentGroups(context.Context, *DeleteEnrollmentGroupsRequest) (*DeleteEnrollmentGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnrollmentGroups not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) GetHubs(*GetHubsRequest, grpc.ServerStreamingServer[Hub]) error {
	return status.Errorf(codes.Unimplemented, "method GetHubs not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) CreateHub(context.Context, *CreateHubRequest) (*Hub, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHub not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) UpdateHub(context.Context, *UpdateHubRequest) (*Hub, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHub not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) DeleteHubs(context.Context, *DeleteHubsRequest) (*DeleteHubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHubs not implemented")
}
func (UnimplementedDeviceProvisionServiceServer) mustEmbedUnimplementedDeviceProvisionServiceServer() {
}
func (UnimplementedDeviceProvisionServiceServer) testEmbeddedByValue() {}

// UnsafeDeviceProvisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceProvisionServiceServer will
// result in compilation errors.
type UnsafeDeviceProvisionServiceServer interface {
	mustEmbedUnimplementedDeviceProvisionServiceServer()
}

func RegisterDeviceProvisionServiceServer(s grpc.ServiceRegistrar, srv DeviceProvisionServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceProvisionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceProvisionService_ServiceDesc, srv)
}

func _DeviceProvisionService_GetProvisioningRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProvisioningRecordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceProvisionServiceServer).GetProvisioningRecords(m, &grpc.GenericServerStream[GetProvisioningRecordsRequest, ProvisioningRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceProvisionService_GetProvisioningRecordsServer = grpc.ServerStreamingServer[ProvisioningRecord]

func _DeviceProvisionService_DeleteProvisioningRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProvisioningRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServiceServer).DeleteProvisioningRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceProvisionService_DeleteProvisioningRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServiceServer).DeleteProvisioningRecords(ctx, req.(*DeleteProvisioningRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvisionService_GetEnrollmentGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEnrollmentGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceProvisionServiceServer).GetEnrollmentGroups(m, &grpc.GenericServerStream[GetEnrollmentGroupsRequest, EnrollmentGroup]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceProvisionService_GetEnrollmentGroupsServer = grpc.ServerStreamingServer[EnrollmentGroup]

func _DeviceProvisionService_CreateEnrollmentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnrollmentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServiceServer).CreateEnrollmentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceProvisionService_CreateEnrollmentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServiceServer).CreateEnrollmentGroup(ctx, req.(*CreateEnrollmentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvisionService_UpdateEnrollmentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnrollmentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServiceServer).UpdateEnrollmentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceProvisionService_UpdateEnrollmentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServiceServer).UpdateEnrollmentGroup(ctx, req.(*UpdateEnrollmentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvisionService_DeleteEnrollmentGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnrollmentGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServiceServer).DeleteEnrollmentGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceProvisionService_DeleteEnrollmentGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServiceServer).DeleteEnrollmentGroups(ctx, req.(*DeleteEnrollmentGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvisionService_GetHubs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHubsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceProvisionServiceServer).GetHubs(m, &grpc.GenericServerStream[GetHubsRequest, Hub]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceProvisionService_GetHubsServer = grpc.ServerStreamingServer[Hub]

func _DeviceProvisionService_CreateHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServiceServer).CreateHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceProvisionService_CreateHub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServiceServer).CreateHub(ctx, req.(*CreateHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvisionService_UpdateHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServiceServer).UpdateHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceProvisionService_UpdateHub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServiceServer).UpdateHub(ctx, req.(*UpdateHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvisionService_DeleteHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServiceServer).DeleteHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceProvisionService_DeleteHubs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServiceServer).DeleteHubs(ctx, req.(*DeleteHubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceProvisionService_ServiceDesc is the grpc.ServiceDesc for DeviceProvisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceProvisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deviceprovisioningservice.pb.DeviceProvisionService",
	HandlerType: (*DeviceProvisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteProvisioningRecords",
			Handler:    _DeviceProvisionService_DeleteProvisioningRecords_Handler,
		},
		{
			MethodName: "CreateEnrollmentGroup",
			Handler:    _DeviceProvisionService_CreateEnrollmentGroup_Handler,
		},
		{
			MethodName: "UpdateEnrollmentGroup",
			Handler:    _DeviceProvisionService_UpdateEnrollmentGroup_Handler,
		},
		{
			MethodName: "DeleteEnrollmentGroups",
			Handler:    _DeviceProvisionService_DeleteEnrollmentGroups_Handler,
		},
		{
			MethodName: "CreateHub",
			Handler:    _DeviceProvisionService_CreateHub_Handler,
		},
		{
			MethodName: "UpdateHub",
			Handler:    _DeviceProvisionService_UpdateHub_Handler,
		},
		{
			MethodName: "DeleteHubs",
			Handler:    _DeviceProvisionService_DeleteHubs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProvisioningRecords",
			Handler:       _DeviceProvisionService_GetProvisioningRecords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEnrollmentGroups",
			Handler:       _DeviceProvisionService_GetEnrollmentGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetHubs",
			Handler:       _DeviceProvisionService_GetHubs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device-provisioning-service/pb/service.proto",
}
