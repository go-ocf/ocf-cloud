// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: github.com/plgd-dev/hub/device-provisioning-service/pb/hub.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TlsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the root certificates. Supported formats: </path/to/cert.pem>,<data:;base64,{PEM in BASE64}>
	CaPool []string `protobuf:"bytes,1,rep,name=ca_pool,json=caPool,proto3" json:"ca_pool,omitempty" bson:"ca_pool"` // @gotags: bson:"ca_pool"
	// private key. Supported formats: </path/to/cert.pem>,<data:;base64,{PEM in BASE64}>
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" bson:"key"` // @gotags: bson:"key"
	// certificate. Supported formats: </path/to/cert.pem>,<data:;base64,{PEM in BASE64}>
	Cert string `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty" bson:"cert"` // @gotags: bson:"cert"
	// use system certification pool
	UseSystemCaPool bool `protobuf:"varint,4,opt,name=use_system_ca_pool,json=useSystemCaPool,proto3" json:"use_system_ca_pool,omitempty" bson:"useSystemCaPool"` // @gotags: bson:"useSystemCaPool"
}

func (x *TlsConfig) Reset() {
	*x = TlsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsConfig) ProtoMessage() {}

func (x *TlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsConfig.ProtoReflect.Descriptor instead.
func (*TlsConfig) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{0}
}

func (x *TlsConfig) GetCaPool() []string {
	if x != nil {
		return x.CaPool
	}
	return nil
}

func (x *TlsConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TlsConfig) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *TlsConfig) GetUseSystemCaPool() bool {
	if x != nil {
		return x.UseSystemCaPool
	}
	return false
}

type HttpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MaxIdleConns controls the maximum number of idle (keep-alive)
	// connections across all hosts. Zero means no limit.
	MaxIdleConns uint32 `protobuf:"varint,1,opt,name=max_idle_conns,json=maxIdleConns,proto3" json:"max_idle_conns,omitempty" bson:"maxIdleConns"` // @gotags: bson:"maxIdleConns"
	// MaxConnsPerHost optionally limits the total number of
	// connections per host, including connections in the dialing,
	// active, and idle states. On limit violation, dials will block.
	//
	// Zero means no limit.
	MaxConnsPerHost uint32 `protobuf:"varint,2,opt,name=max_conns_per_host,json=maxConnsPerHost,proto3" json:"max_conns_per_host,omitempty" bson:"maxConnsPerHost"` // @gotags: bson:"maxConnsPerHost"
	// MaxIdleConnsPerHost, if non-zero, controls the maximum idle
	// (keep-alive) connections to keep per-host. If zero,
	// DefaultMaxIdleConnsPerHost is used.
	MaxIdleConnsPerHost uint32 `protobuf:"varint,3,opt,name=max_idle_conns_per_host,json=maxIdleConnsPerHost,proto3" json:"max_idle_conns_per_host,omitempty" bson:"maxIdleConnsPerHost"` // @gotags: bson:"maxIdleConnsPerHost"
	// IdleConnTimeout is the maximum amount of time an idle
	// (keep-alive) connection will remain idle before closing
	// itself in nanoseconds.
	// Zero means no limit.
	IdleConnTimeout int64 `protobuf:"varint,4,opt,name=idle_conn_timeout,json=idleConnTimeout,proto3" json:"idle_conn_timeout,omitempty" bson:"idleConnTimeout"` // @gotags: bson:"idleConnTimeout"
	// Timeout specifies a time limit for requests made by this
	// Client in nanoseconds. The timeout includes connection time, any
	// redirects, and reading the response body. The timer remains
	// running after Get, Head, Post, or Do return and will
	// interrupt reading of the Response.Body.
	//
	// A Timeout of zero means no timeout.
	//
	// The Client cancels requests to the underlying Transport
	// as if the Request's Context ended.
	//
	// For compatibility, the Client will also use the deprecated
	// CancelRequest method on Transport if found. New
	// RoundTripper implementations should use the Request's Context
	// for cancellation instead of implementing CancelRequest.
	Timeout int64      `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty" bson:"timeout"` // @gotags: bson:"timeout"
	Tls     *TlsConfig `protobuf:"bytes,6,opt,name=tls,proto3" json:"tls,omitempty" bson:"tls"`              // @gotags: bson:"tls"
}

func (x *HttpConfig) Reset() {
	*x = HttpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConfig) ProtoMessage() {}

func (x *HttpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConfig.ProtoReflect.Descriptor instead.
func (*HttpConfig) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{1}
}

func (x *HttpConfig) GetMaxIdleConns() uint32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *HttpConfig) GetMaxConnsPerHost() uint32 {
	if x != nil {
		return x.MaxConnsPerHost
	}
	return 0
}

func (x *HttpConfig) GetMaxIdleConnsPerHost() uint32 {
	if x != nil {
		return x.MaxIdleConnsPerHost
	}
	return 0
}

func (x *HttpConfig) GetIdleConnTimeout() int64 {
	if x != nil {
		return x.IdleConnTimeout
	}
	return 0
}

func (x *HttpConfig) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *HttpConfig) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type AuthorizationProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the provider, which is set in configuration in coap-gateway
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"` // @gotags: bson:"name"
	// the url to get oauth endpoints
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty" bson:"authority"` // @gotags: bson:"authority"
	// client id which is associated to the name
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" bson:"clientId"` // @gotags: bson:"clientId"
	// scopes will be set in token
	Scopes []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty" bson:"scopes"` // @gotags: bson:"scopes"
	// audience will be set in token
	Audience string `protobuf:"bytes,5,opt,name=audience,proto3" json:"audience,omitempty" bson:"audience"` // @gotags: bson:"audience"
	// client secret. Supported formats: </path/to/clientSecret>,<data:;base64,{ClientSecret in BASE64}>
	ClientSecret string `protobuf:"bytes,6,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty" bson:"clientSecret"` // @gotags: bson:"clientSecret"
	// http configuration
	Http *HttpConfig `protobuf:"bytes,7,opt,name=http,proto3" json:"http,omitempty" bson:"http"` // @gotags: bson:"http"
}

func (x *AuthorizationProviderConfig) Reset() {
	*x = AuthorizationProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationProviderConfig) ProtoMessage() {}

func (x *AuthorizationProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationProviderConfig.ProtoReflect.Descriptor instead.
func (*AuthorizationProviderConfig) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{2}
}

func (x *AuthorizationProviderConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthorizationProviderConfig) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *AuthorizationProviderConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AuthorizationProviderConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *AuthorizationProviderConfig) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

func (x *AuthorizationProviderConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *AuthorizationProviderConfig) GetHttp() *HttpConfig {
	if x != nil {
		return x.Http
	}
	return nil
}

// AuthorizationConfig is used to generate the authorization code for the device when providing cloud configuration.
type AuthorizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// owner_claim is key where will be stored owner in JWT.
	OwnerClaim string `protobuf:"bytes,1,opt,name=owner_claim,json=ownerClaim,proto3" json:"owner_claim,omitempty" bson:"ownerClaim"` // @gotags: bson:"ownerClaim"
	// device_id_claim is key where will be stored deviceID in JWT(optional)
	DeviceIdClaim string                       `protobuf:"bytes,2,opt,name=device_id_claim,json=deviceIdClaim,proto3" json:"device_id_claim,omitempty" bson:"deviceIdClaim"` // @gotags: bson:"deviceIdClaim"
	Provider      *AuthorizationProviderConfig `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty" bson:"provider"`                                       // @gotags: bson:"provider"
}

func (x *AuthorizationConfig) Reset() {
	*x = AuthorizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationConfig) ProtoMessage() {}

func (x *AuthorizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationConfig.ProtoReflect.Descriptor instead.
func (*AuthorizationConfig) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{3}
}

func (x *AuthorizationConfig) GetOwnerClaim() string {
	if x != nil {
		return x.OwnerClaim
	}
	return ""
}

func (x *AuthorizationConfig) GetDeviceIdClaim() string {
	if x != nil {
		return x.DeviceIdClaim
	}
	return ""
}

func (x *AuthorizationConfig) GetProvider() *AuthorizationProviderConfig {
	if x != nil {
		return x.Provider
	}
	return nil
}

type GrpcKeepAliveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// After a duration in nanoseconds of this time if the client doesn't see any activity it
	// pings the server to see if the transport is still alive.
	// The zero value is infinity and if it set below 10s, a minimum value of 10s will be used instead.
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty" bson:"time"` // @gotags: bson:"time"
	// After having pinged for keepalive check, the client waits for a duration
	// of Timeout and if no activity is seen even after that the connection is
	// closed.
	Timeout int64 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty" bson:"timeout"` // @gotags: bson:"timeout"
	// If true, client sends keepalive pings even with no active RPCs. If false,
	// when there are no active RPCs, Time and Timeout will be ignored and no
	// keepalive pings will be sent.
	PermitWithoutStream bool `protobuf:"varint,3,opt,name=permit_without_stream,json=permitWithoutStream,proto3" json:"permit_without_stream,omitempty"` // @gotags: bson:"permitWithoutStream
}

func (x *GrpcKeepAliveConfig) Reset() {
	*x = GrpcKeepAliveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcKeepAliveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcKeepAliveConfig) ProtoMessage() {}

func (x *GrpcKeepAliveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcKeepAliveConfig.ProtoReflect.Descriptor instead.
func (*GrpcKeepAliveConfig) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{4}
}

func (x *GrpcKeepAliveConfig) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GrpcKeepAliveConfig) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *GrpcKeepAliveConfig) GetPermitWithoutStream() bool {
	if x != nil {
		return x.PermitWithoutStream
	}
	return false
}

type GrpcConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address in format {host:port}
	Address   string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" bson:"address"`                        // @gotags: bson:"address"
	KeepAlive *GrpcKeepAliveConfig `protobuf:"bytes,2,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty" bson:"keepAlive"` // @gotags: bson:"keepAlive"
	Tls       *TlsConfig           `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty" bson:"tls"`                                    // @gotags: bson:"tls"
}

func (x *GrpcConnectionConfig) Reset() {
	*x = GrpcConnectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcConnectionConfig) ProtoMessage() {}

func (x *GrpcConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcConnectionConfig.ProtoReflect.Descriptor instead.
func (*GrpcConnectionConfig) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{5}
}

func (x *GrpcConnectionConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GrpcConnectionConfig) GetKeepAlive() *GrpcKeepAliveConfig {
	if x != nil {
		return x.KeepAlive
	}
	return nil
}

func (x *GrpcConnectionConfig) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type GrpcClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GRPC protocol
	Grpc *GrpcConnectionConfig `protobuf:"bytes,1,opt,name=grpc,proto3" json:"grpc,omitempty" bson:"grpc"` // @gotags: bson:"grpc"
}

func (x *GrpcClientConfig) Reset() {
	*x = GrpcClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcClientConfig) ProtoMessage() {}

func (x *GrpcClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcClientConfig.ProtoReflect.Descriptor instead.
func (*GrpcClientConfig) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{6}
}

func (x *GrpcClientConfig) GetGrpc() *GrpcConnectionConfig {
	if x != nil {
		return x.Grpc
	}
	return nil
}

type Hub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Record ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"` // @gotags: bson:"_id"
	// Address of gateway in format scheme://host:port
	Gateways []string `protobuf:"bytes,8,rep,name=gateways,proto3" json:"gateways,omitempty" bson:"gateways"` // @gotags: bson:"gateways"
	// Signs identity ceritificate for the device.
	CertificateAuthority *GrpcClientConfig `protobuf:"bytes,4,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty" bson:"certificateAuthority"` // @gotags: bson:"certificateAuthority"
	// Acquire HUB authorization code for the device.
	Authorization *AuthorizationConfig `protobuf:"bytes,5,opt,name=authorization,proto3" json:"authorization,omitempty" bson:"authorization"` // @gotags: bson:"authorization"
	// Hub name.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" bson:"name"` // @gotags: bson:"name"
	// Hub identifier - it must match with common name of gateway(coap-gateway) hub certificate.
	HubId string `protobuf:"bytes,7,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty" bson:"hubId"` // @gotags: bson:"hubId"
	// Owner of the hub
	Owner string `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty" bson:"owner"` // @gotags: bson:"owner"
}

func (x *Hub) Reset() {
	*x = Hub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hub) ProtoMessage() {}

func (x *Hub) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hub.ProtoReflect.Descriptor instead.
func (*Hub) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{7}
}

func (x *Hub) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Hub) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *Hub) GetCertificateAuthority() *GrpcClientConfig {
	if x != nil {
		return x.CertificateAuthority
	}
	return nil
}

func (x *Hub) GetAuthorization() *AuthorizationConfig {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Hub) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hub) GetHubId() string {
	if x != nil {
		return x.HubId
	}
	return ""
}

func (x *Hub) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type CreateHubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hub identifier - it must match with common name of gateway(coap-gateway) hub certificate.
	HubId string `protobuf:"bytes,1,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
	// Address of gateways in format scheme://host:port
	Gateways []string `protobuf:"bytes,7,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Signs identity ceritificate for the device.
	CertificateAuthority *GrpcClientConfig `protobuf:"bytes,4,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	// Acquire HUB authorization code for the device.
	Authorization *AuthorizationConfig `protobuf:"bytes,5,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// Hub name.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateHubRequest) Reset() {
	*x = CreateHubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHubRequest) ProtoMessage() {}

func (x *CreateHubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHubRequest.ProtoReflect.Descriptor instead.
func (*CreateHubRequest) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{8}
}

func (x *CreateHubRequest) GetHubId() string {
	if x != nil {
		return x.HubId
	}
	return ""
}

func (x *CreateHubRequest) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *CreateHubRequest) GetCertificateAuthority() *GrpcClientConfig {
	if x != nil {
		return x.CertificateAuthority
	}
	return nil
}

func (x *CreateHubRequest) GetAuthorization() *AuthorizationConfig {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *CreateHubRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetHubsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by id.
	IdFilter []string `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
	// Filter by hub_id.
	HubIdFilter []string `protobuf:"bytes,2,rep,name=hub_id_filter,json=hubIdFilter,proto3" json:"hub_id_filter,omitempty"`
}

func (x *GetHubsRequest) Reset() {
	*x = GetHubsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHubsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHubsRequest) ProtoMessage() {}

func (x *GetHubsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHubsRequest.ProtoReflect.Descriptor instead.
func (*GetHubsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{9}
}

func (x *GetHubsRequest) GetIdFilter() []string {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

func (x *GetHubsRequest) GetHubIdFilter() []string {
	if x != nil {
		return x.HubIdFilter
	}
	return nil
}

type UpdateHub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of coap-gateway in format scheme://host:port
	Gateways []string `protobuf:"bytes,7,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Signs identity ceritificate for the device.
	CertificateAuthority *GrpcClientConfig `protobuf:"bytes,3,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	// Acquire HUB authorization code for the device.
	Authorization *AuthorizationConfig `protobuf:"bytes,4,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// Hub name.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Hub ID
	HubId string `protobuf:"bytes,6,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
}

func (x *UpdateHub) Reset() {
	*x = UpdateHub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHub) ProtoMessage() {}

func (x *UpdateHub) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHub.ProtoReflect.Descriptor instead.
func (*UpdateHub) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateHub) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *UpdateHub) GetCertificateAuthority() *GrpcClientConfig {
	if x != nil {
		return x.CertificateAuthority
	}
	return nil
}

func (x *UpdateHub) GetAuthorization() *AuthorizationConfig {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *UpdateHub) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateHub) GetHubId() string {
	if x != nil {
		return x.HubId
	}
	return ""
}

type UpdateHubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Record ID.
	Id  string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hub *UpdateHub `protobuf:"bytes,2,opt,name=hub,proto3" json:"hub,omitempty"`
}

func (x *UpdateHubRequest) Reset() {
	*x = UpdateHubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHubRequest) ProtoMessage() {}

func (x *UpdateHubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHubRequest.ProtoReflect.Descriptor instead.
func (*UpdateHubRequest) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateHubRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateHubRequest) GetHub() *UpdateHub {
	if x != nil {
		return x.Hub
	}
	return nil
}

type DeleteHubsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Record ID.
	IdFilter []string `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
}

func (x *DeleteHubsRequest) Reset() {
	*x = DeleteHubsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHubsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHubsRequest) ProtoMessage() {}

func (x *DeleteHubsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHubsRequest.ProtoReflect.Descriptor instead.
func (*DeleteHubsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteHubsRequest) GetIdFilter() []string {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

type DeleteHubsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of deleted records.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteHubsResponse) Reset() {
	*x = DeleteHubsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHubsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHubsResponse) ProtoMessage() {}

func (x *DeleteHubsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHubsResponse.ProtoReflect.Descriptor instead.
func (*DeleteHubsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteHubsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto protoreflect.FileDescriptor

var file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDesc = []byte{
	0x0a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x67,
	0x64, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62,
	0x22, 0x77, 0x0a, 0x09, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x61, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x12,
	0x75, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x61, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x96, 0x02, 0x0a, 0x0a, 0x48, 0x74,
	0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x64,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74,
	0x6c, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x55, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x22, 0x77, 0x0a, 0x13, 0x47, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xbd, 0x01, 0x0a, 0x14, 0x47, 0x72,
	0x70, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x0a,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x39,
	0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6c, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x5a, 0x0a, 0x10, 0x47, 0x72, 0x70,
	0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a,
	0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x04, 0x67, 0x72, 0x70, 0x63, 0x22, 0xd3, 0x02, 0x0a, 0x03, 0x48, 0x75, 0x62, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x57,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x68,
	0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x75, 0x62,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x52, 0x07, 0x63, 0x61, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x63,
	0x6f, 0x61, 0x70, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0xba, 0x02, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x68, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x52, 0x07, 0x63, 0x61, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x63, 0x6f, 0x61, 0x70,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48,
	0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x75, 0x62, 0x5f, 0x69,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x68, 0x75, 0x62, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xb3, 0x02, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x75, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x75, 0x62, 0x49, 0x64, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x07, 0x63, 0x61, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x63, 0x6f, 0x61, 0x70, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x22, 0x5d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x68, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x62, 0x52, 0x03, 0x68, 0x75, 0x62,
	0x22, 0x30, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x75, 0x62, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x2a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x75, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x3e,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x67,
	0x64, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescOnce sync.Once
	file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescData = file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDesc
)

func file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescGZIP() []byte {
	file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescOnce.Do(func() {
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescData)
	})
	return file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDescData
}

var file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_goTypes = []any{
	(*TlsConfig)(nil),                   // 0: deviceprovisioningservice.pb.TlsConfig
	(*HttpConfig)(nil),                  // 1: deviceprovisioningservice.pb.HttpConfig
	(*AuthorizationProviderConfig)(nil), // 2: deviceprovisioningservice.pb.AuthorizationProviderConfig
	(*AuthorizationConfig)(nil),         // 3: deviceprovisioningservice.pb.AuthorizationConfig
	(*GrpcKeepAliveConfig)(nil),         // 4: deviceprovisioningservice.pb.GrpcKeepAliveConfig
	(*GrpcConnectionConfig)(nil),        // 5: deviceprovisioningservice.pb.GrpcConnectionConfig
	(*GrpcClientConfig)(nil),            // 6: deviceprovisioningservice.pb.GrpcClientConfig
	(*Hub)(nil),                         // 7: deviceprovisioningservice.pb.Hub
	(*CreateHubRequest)(nil),            // 8: deviceprovisioningservice.pb.CreateHubRequest
	(*GetHubsRequest)(nil),              // 9: deviceprovisioningservice.pb.GetHubsRequest
	(*UpdateHub)(nil),                   // 10: deviceprovisioningservice.pb.UpdateHub
	(*UpdateHubRequest)(nil),            // 11: deviceprovisioningservice.pb.UpdateHubRequest
	(*DeleteHubsRequest)(nil),           // 12: deviceprovisioningservice.pb.DeleteHubsRequest
	(*DeleteHubsResponse)(nil),          // 13: deviceprovisioningservice.pb.DeleteHubsResponse
}
var file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_depIdxs = []int32{
	0,  // 0: deviceprovisioningservice.pb.HttpConfig.tls:type_name -> deviceprovisioningservice.pb.TlsConfig
	1,  // 1: deviceprovisioningservice.pb.AuthorizationProviderConfig.http:type_name -> deviceprovisioningservice.pb.HttpConfig
	2,  // 2: deviceprovisioningservice.pb.AuthorizationConfig.provider:type_name -> deviceprovisioningservice.pb.AuthorizationProviderConfig
	4,  // 3: deviceprovisioningservice.pb.GrpcConnectionConfig.keep_alive:type_name -> deviceprovisioningservice.pb.GrpcKeepAliveConfig
	0,  // 4: deviceprovisioningservice.pb.GrpcConnectionConfig.tls:type_name -> deviceprovisioningservice.pb.TlsConfig
	5,  // 5: deviceprovisioningservice.pb.GrpcClientConfig.grpc:type_name -> deviceprovisioningservice.pb.GrpcConnectionConfig
	6,  // 6: deviceprovisioningservice.pb.Hub.certificate_authority:type_name -> deviceprovisioningservice.pb.GrpcClientConfig
	3,  // 7: deviceprovisioningservice.pb.Hub.authorization:type_name -> deviceprovisioningservice.pb.AuthorizationConfig
	6,  // 8: deviceprovisioningservice.pb.CreateHubRequest.certificate_authority:type_name -> deviceprovisioningservice.pb.GrpcClientConfig
	3,  // 9: deviceprovisioningservice.pb.CreateHubRequest.authorization:type_name -> deviceprovisioningservice.pb.AuthorizationConfig
	6,  // 10: deviceprovisioningservice.pb.UpdateHub.certificate_authority:type_name -> deviceprovisioningservice.pb.GrpcClientConfig
	3,  // 11: deviceprovisioningservice.pb.UpdateHub.authorization:type_name -> deviceprovisioningservice.pb.AuthorizationConfig
	10, // 12: deviceprovisioningservice.pb.UpdateHubRequest.hub:type_name -> deviceprovisioningservice.pb.UpdateHub
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_init() }
func file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_init() {
	if File_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TlsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*HttpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizationProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AuthorizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GrpcKeepAliveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GrpcConnectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GrpcClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Hub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CreateHubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetHubsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateHub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateHubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteHubsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteHubsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_goTypes,
		DependencyIndexes: file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_depIdxs,
		MessageInfos:      file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_msgTypes,
	}.Build()
	File_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto = out.File
	file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_rawDesc = nil
	file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_goTypes = nil
	file_github_com_plgd_dev_hub_device_provisioning_service_pb_hub_proto_depIdxs = nil
}
