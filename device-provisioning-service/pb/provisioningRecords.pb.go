// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: device-provisioning-service/pb/provisioningRecords.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredentialOptionalData_Encoding int32

const (
	CredentialOptionalData_UNKNOWN CredentialOptionalData_Encoding = 0
	CredentialOptionalData_RAW     CredentialOptionalData_Encoding = 1
	CredentialOptionalData_JWT     CredentialOptionalData_Encoding = 2
	CredentialOptionalData_CWT     CredentialOptionalData_Encoding = 3
	CredentialOptionalData_BASE64  CredentialOptionalData_Encoding = 4
	CredentialOptionalData_PEM     CredentialOptionalData_Encoding = 5
	CredentialOptionalData_DER     CredentialOptionalData_Encoding = 6
)

// Enum value maps for CredentialOptionalData_Encoding.
var (
	CredentialOptionalData_Encoding_name = map[int32]string{
		0: "UNKNOWN",
		1: "RAW",
		2: "JWT",
		3: "CWT",
		4: "BASE64",
		5: "PEM",
		6: "DER",
	}
	CredentialOptionalData_Encoding_value = map[string]int32{
		"UNKNOWN": 0,
		"RAW":     1,
		"JWT":     2,
		"CWT":     3,
		"BASE64":  4,
		"PEM":     5,
		"DER":     6,
	}
)

func (x CredentialOptionalData_Encoding) Enum() *CredentialOptionalData_Encoding {
	p := new(CredentialOptionalData_Encoding)
	*p = x
	return p
}

func (x CredentialOptionalData_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialOptionalData_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[0].Descriptor()
}

func (CredentialOptionalData_Encoding) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[0]
}

func (x CredentialOptionalData_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialOptionalData_Encoding.Descriptor instead.
func (CredentialOptionalData_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{5, 0}
}

type CredentialPrivateData_Encoding int32

const (
	CredentialPrivateData_UNKNOWN CredentialPrivateData_Encoding = 0
	CredentialPrivateData_RAW     CredentialPrivateData_Encoding = 1
	CredentialPrivateData_JWT     CredentialPrivateData_Encoding = 2
	CredentialPrivateData_CWT     CredentialPrivateData_Encoding = 3
	CredentialPrivateData_BASE64  CredentialPrivateData_Encoding = 4
	CredentialPrivateData_URI     CredentialPrivateData_Encoding = 5
	CredentialPrivateData_HANDLE  CredentialPrivateData_Encoding = 6
)

// Enum value maps for CredentialPrivateData_Encoding.
var (
	CredentialPrivateData_Encoding_name = map[int32]string{
		0: "UNKNOWN",
		1: "RAW",
		2: "JWT",
		3: "CWT",
		4: "BASE64",
		5: "URI",
		6: "HANDLE",
	}
	CredentialPrivateData_Encoding_value = map[string]int32{
		"UNKNOWN": 0,
		"RAW":     1,
		"JWT":     2,
		"CWT":     3,
		"BASE64":  4,
		"URI":     5,
		"HANDLE":  6,
	}
)

func (x CredentialPrivateData_Encoding) Enum() *CredentialPrivateData_Encoding {
	p := new(CredentialPrivateData_Encoding)
	*p = x
	return p
}

func (x CredentialPrivateData_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialPrivateData_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[1].Descriptor()
}

func (CredentialPrivateData_Encoding) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[1]
}

func (x CredentialPrivateData_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialPrivateData_Encoding.Descriptor instead.
func (CredentialPrivateData_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{6, 0}
}

type CredentialPublicData_Encoding int32

const (
	CredentialPublicData_UNKNOWN CredentialPublicData_Encoding = 0
	CredentialPublicData_RAW     CredentialPublicData_Encoding = 1
	CredentialPublicData_JWT     CredentialPublicData_Encoding = 2
	CredentialPublicData_CWT     CredentialPublicData_Encoding = 3
	CredentialPublicData_BASE64  CredentialPublicData_Encoding = 4
	CredentialPublicData_URI     CredentialPublicData_Encoding = 5
	CredentialPublicData_PEM     CredentialPublicData_Encoding = 6
	CredentialPublicData_DER     CredentialPublicData_Encoding = 7
)

// Enum value maps for CredentialPublicData_Encoding.
var (
	CredentialPublicData_Encoding_name = map[int32]string{
		0: "UNKNOWN",
		1: "RAW",
		2: "JWT",
		3: "CWT",
		4: "BASE64",
		5: "URI",
		6: "PEM",
		7: "DER",
	}
	CredentialPublicData_Encoding_value = map[string]int32{
		"UNKNOWN": 0,
		"RAW":     1,
		"JWT":     2,
		"CWT":     3,
		"BASE64":  4,
		"URI":     5,
		"PEM":     6,
		"DER":     7,
	}
)

func (x CredentialPublicData_Encoding) Enum() *CredentialPublicData_Encoding {
	p := new(CredentialPublicData_Encoding)
	*p = x
	return p
}

func (x CredentialPublicData_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialPublicData_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[2].Descriptor()
}

func (CredentialPublicData_Encoding) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[2]
}

func (x CredentialPublicData_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialPublicData_Encoding.Descriptor instead.
func (CredentialPublicData_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{7, 0}
}

type Credential_CredentialType int32

const (
	Credential_EMPTY                               Credential_CredentialType = 0
	Credential_SYMMETRIC_PAIR_WISE                 Credential_CredentialType = 1
	Credential_SYMMETRIC_GROUP                     Credential_CredentialType = 2
	Credential_ASYMMETRIC_SIGNING                  Credential_CredentialType = 4
	Credential_ASYMMETRIC_SIGNING_WITH_CERTIFICATE Credential_CredentialType = 8
	Credential_PIN_OR_PASSWORD                     Credential_CredentialType = 16
	Credential_ASYMMETRIC_ENCRYPTION_KEY           Credential_CredentialType = 32
)

// Enum value maps for Credential_CredentialType.
var (
	Credential_CredentialType_name = map[int32]string{
		0:  "EMPTY",
		1:  "SYMMETRIC_PAIR_WISE",
		2:  "SYMMETRIC_GROUP",
		4:  "ASYMMETRIC_SIGNING",
		8:  "ASYMMETRIC_SIGNING_WITH_CERTIFICATE",
		16: "PIN_OR_PASSWORD",
		32: "ASYMMETRIC_ENCRYPTION_KEY",
	}
	Credential_CredentialType_value = map[string]int32{
		"EMPTY":                               0,
		"SYMMETRIC_PAIR_WISE":                 1,
		"SYMMETRIC_GROUP":                     2,
		"ASYMMETRIC_SIGNING":                  4,
		"ASYMMETRIC_SIGNING_WITH_CERTIFICATE": 8,
		"PIN_OR_PASSWORD":                     16,
		"ASYMMETRIC_ENCRYPTION_KEY":           32,
	}
)

func (x Credential_CredentialType) Enum() *Credential_CredentialType {
	p := new(Credential_CredentialType)
	*p = x
	return p
}

func (x Credential_CredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Credential_CredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[3].Descriptor()
}

func (Credential_CredentialType) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[3]
}

func (x Credential_CredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Credential_CredentialType.Descriptor instead.
func (Credential_CredentialType) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{9, 0}
}

type Credential_CredentialUsage int32

const (
	Credential_NONE         Credential_CredentialUsage = 0
	Credential_TRUST_CA     Credential_CredentialUsage = 1
	Credential_CERT         Credential_CredentialUsage = 2
	Credential_ROLE_CERT    Credential_CredentialUsage = 3
	Credential_MFG_TRUST_CA Credential_CredentialUsage = 4
	Credential_MFG_CERT     Credential_CredentialUsage = 5
)

// Enum value maps for Credential_CredentialUsage.
var (
	Credential_CredentialUsage_name = map[int32]string{
		0: "NONE",
		1: "TRUST_CA",
		2: "CERT",
		3: "ROLE_CERT",
		4: "MFG_TRUST_CA",
		5: "MFG_CERT",
	}
	Credential_CredentialUsage_value = map[string]int32{
		"NONE":         0,
		"TRUST_CA":     1,
		"CERT":         2,
		"ROLE_CERT":    3,
		"MFG_TRUST_CA": 4,
		"MFG_CERT":     5,
	}
)

func (x Credential_CredentialUsage) Enum() *Credential_CredentialUsage {
	p := new(Credential_CredentialUsage)
	*p = x
	return p
}

func (x Credential_CredentialUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Credential_CredentialUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[4].Descriptor()
}

func (Credential_CredentialUsage) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[4]
}

func (x Credential_CredentialUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Credential_CredentialUsage.Descriptor instead.
func (Credential_CredentialUsage) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{9, 1}
}

type Credential_CredentialRefreshMethod int32

const (
	Credential_UNKNOWN                               Credential_CredentialRefreshMethod = 0
	Credential_PROVISION_SERVICE                     Credential_CredentialRefreshMethod = 1
	Credential_KEY_AGREEMENT_PROTOCOL_AND_RANDOM_PIN Credential_CredentialRefreshMethod = 2
	Credential_KEY_AGREEMENT_PROTOCOL                Credential_CredentialRefreshMethod = 3
	Credential_KEY_DISTRIBUTION_SERVICE              Credential_CredentialRefreshMethod = 4
	Credential_PKCS10_REQUEST_TO_CA                  Credential_CredentialRefreshMethod = 5
)

// Enum value maps for Credential_CredentialRefreshMethod.
var (
	Credential_CredentialRefreshMethod_name = map[int32]string{
		0: "UNKNOWN",
		1: "PROVISION_SERVICE",
		2: "KEY_AGREEMENT_PROTOCOL_AND_RANDOM_PIN",
		3: "KEY_AGREEMENT_PROTOCOL",
		4: "KEY_DISTRIBUTION_SERVICE",
		5: "PKCS10_REQUEST_TO_CA",
	}
	Credential_CredentialRefreshMethod_value = map[string]int32{
		"UNKNOWN":                               0,
		"PROVISION_SERVICE":                     1,
		"KEY_AGREEMENT_PROTOCOL_AND_RANDOM_PIN": 2,
		"KEY_AGREEMENT_PROTOCOL":                3,
		"KEY_DISTRIBUTION_SERVICE":              4,
		"PKCS10_REQUEST_TO_CA":                  5,
	}
)

func (x Credential_CredentialRefreshMethod) Enum() *Credential_CredentialRefreshMethod {
	p := new(Credential_CredentialRefreshMethod)
	*p = x
	return p
}

func (x Credential_CredentialRefreshMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Credential_CredentialRefreshMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[5].Descriptor()
}

func (Credential_CredentialRefreshMethod) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[5]
}

func (x Credential_CredentialRefreshMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Credential_CredentialRefreshMethod.Descriptor instead.
func (Credential_CredentialRefreshMethod) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{9, 2}
}

type AccessControlConnectionSubject_ConnectionType int32

const (
	// anonymous clear-text connection TCP or UDP without encryption
	AccessControlConnectionSubject_ANON_CLEAR AccessControlConnectionSubject_ConnectionType = 0
	// authenticated encrypted connection using TLS or DTLS
	AccessControlConnectionSubject_AUTH_CRYPT AccessControlConnectionSubject_ConnectionType = 1
)

// Enum value maps for AccessControlConnectionSubject_ConnectionType.
var (
	AccessControlConnectionSubject_ConnectionType_name = map[int32]string{
		0: "ANON_CLEAR",
		1: "AUTH_CRYPT",
	}
	AccessControlConnectionSubject_ConnectionType_value = map[string]int32{
		"ANON_CLEAR": 0,
		"AUTH_CRYPT": 1,
	}
)

func (x AccessControlConnectionSubject_ConnectionType) Enum() *AccessControlConnectionSubject_ConnectionType {
	p := new(AccessControlConnectionSubject_ConnectionType)
	*p = x
	return p
}

func (x AccessControlConnectionSubject_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessControlConnectionSubject_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[6].Descriptor()
}

func (AccessControlConnectionSubject_ConnectionType) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[6]
}

func (x AccessControlConnectionSubject_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessControlConnectionSubject_ConnectionType.Descriptor instead.
func (AccessControlConnectionSubject_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{14, 0}
}

type AccessControlResource_Wildcard int32

const (
	// no wildcard
	AccessControlResource_NONE AccessControlResource_Wildcard = 0
	// Shall match all Discoverable Non-Configuration Resources which expose at least one Secure OCF Endpoint.
	AccessControlResource_NONCFG_SEC_ENDPOINT AccessControlResource_Wildcard = 1
	// Shall match all Discoverable Non-Configuration Resources which expose at least one Unsecure OCF Endpoint.
	AccessControlResource_NONCFG_NONSEC_ENDPOINT AccessControlResource_Wildcard = 2
	// Shall match all Non-Configuration Resources.
	AccessControlResource_NONCFG_ALL AccessControlResource_Wildcard = 3
)

// Enum value maps for AccessControlResource_Wildcard.
var (
	AccessControlResource_Wildcard_name = map[int32]string{
		0: "NONE",
		1: "NONCFG_SEC_ENDPOINT",
		2: "NONCFG_NONSEC_ENDPOINT",
		3: "NONCFG_ALL",
	}
	AccessControlResource_Wildcard_value = map[string]int32{
		"NONE":                   0,
		"NONCFG_SEC_ENDPOINT":    1,
		"NONCFG_NONSEC_ENDPOINT": 2,
		"NONCFG_ALL":             3,
	}
)

func (x AccessControlResource_Wildcard) Enum() *AccessControlResource_Wildcard {
	p := new(AccessControlResource_Wildcard)
	*p = x
	return p
}

func (x AccessControlResource_Wildcard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessControlResource_Wildcard) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[7].Descriptor()
}

func (AccessControlResource_Wildcard) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[7]
}

func (x AccessControlResource_Wildcard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessControlResource_Wildcard.Descriptor instead.
func (AccessControlResource_Wildcard) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{15, 0}
}

type AccessControl_Permission int32

const (
	// create access
	AccessControl_CREATE AccessControl_Permission = 0
	// read-only access
	AccessControl_READ AccessControl_Permission = 1
	// read-write access
	AccessControl_WRITE AccessControl_Permission = 2
	// delete access
	AccessControl_DELETE AccessControl_Permission = 3
	// notify access
	AccessControl_NOTIFY AccessControl_Permission = 4
)

// Enum value maps for AccessControl_Permission.
var (
	AccessControl_Permission_name = map[int32]string{
		0: "CREATE",
		1: "READ",
		2: "WRITE",
		3: "DELETE",
		4: "NOTIFY",
	}
	AccessControl_Permission_value = map[string]int32{
		"CREATE": 0,
		"READ":   1,
		"WRITE":  2,
		"DELETE": 3,
		"NOTIFY": 4,
	}
)

func (x AccessControl_Permission) Enum() *AccessControl_Permission {
	p := new(AccessControl_Permission)
	*p = x
	return p
}

func (x AccessControl_Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessControl_Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[8].Descriptor()
}

func (AccessControl_Permission) Type() protoreflect.EnumType {
	return &file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes[8]
}

func (x AccessControl_Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessControl_Permission.Descriptor instead.
func (AccessControl_Permission) EnumDescriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{16, 0}
}

type GetProvisioningRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by id.
	IdFilter []string `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
	// Filter by device id.
	DeviceIdFilter []string `protobuf:"bytes,2,rep,name=device_id_filter,json=deviceIdFilter,proto3" json:"device_id_filter,omitempty"`
	// Filter by enrollment group id.
	EnrollmentGroupIdFilter []string `protobuf:"bytes,3,rep,name=enrollment_group_id_filter,json=enrollmentGroupIdFilter,proto3" json:"enrollment_group_id_filter,omitempty"`
}

func (x *GetProvisioningRecordsRequest) Reset() {
	*x = GetProvisioningRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProvisioningRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProvisioningRecordsRequest) ProtoMessage() {}

func (x *GetProvisioningRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProvisioningRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetProvisioningRecordsRequest) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{0}
}

func (x *GetProvisioningRecordsRequest) GetIdFilter() []string {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

func (x *GetProvisioningRecordsRequest) GetDeviceIdFilter() []string {
	if x != nil {
		return x.DeviceIdFilter
	}
	return nil
}

func (x *GetProvisioningRecordsRequest) GetEnrollmentGroupIdFilter() []string {
	if x != nil {
		return x.EnrollmentGroupIdFilter
	}
	return nil
}

type Attestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last time the device successfully established a TLS connection, in unix nanoseconds timestamp format.
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty" bson:"date,omitempty"` // @gotags: bson:"date,omitempty"
	// X509 attestation, set if used by the device.
	X509 *X509Attestation `protobuf:"bytes,2,opt,name=x509,proto3" json:"x509,omitempty" bson:"x509,omitempty"` // @gotags: bson:"x509,omitempty"
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{1}
}

func (x *Attestation) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Attestation) GetX509() *X509Attestation {
	if x != nil {
		return x.X509
	}
	return nil
}

type X509Attestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last used x509 manufacturer certificate.
	CertificatePem string `protobuf:"bytes,1,opt,name=certificate_pem,json=certificatePem,proto3" json:"certificate_pem,omitempty" bson:"certificate,omitempty"` // @gotags: bson:"certificate,omitempty"
	CommonName     string `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty" bson:"commonName,omitempty"`              // @gotags: bson:"commonName,omitempty"
}

func (x *X509Attestation) Reset() {
	*x = X509Attestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Attestation) ProtoMessage() {}

func (x *X509Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Attestation.ProtoReflect.Descriptor instead.
func (*X509Attestation) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{2}
}

func (x *X509Attestation) GetCertificatePem() string {
	if x != nil {
		return x.CertificatePem
	}
	return ""
}

func (x *X509Attestation) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

type ProvisionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last time the device requested provisioning, in unix nanoseconds timestamp format.
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty" bson:"date,omitempty"` // @gotags: bson:"date,omitempty"
	// The CoAP code returned to the device.
	CoapCode int32 `protobuf:"varint,2,opt,name=coap_code,json=coapCode,proto3" json:"coap_code,omitempty" bson:"coapCode,omitempty"` // @gotags: bson:"coapCode,omitempty"
	// Error message if any.
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty" bson:"errorMessage,omitempty"` // @gotags: bson:"errorMessage,omitempty"
}

func (x *ProvisionStatus) Reset() {
	*x = ProvisionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionStatus) ProtoMessage() {}

func (x *ProvisionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionStatus.ProtoReflect.Descriptor instead.
func (*ProvisionStatus) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{3}
}

func (x *ProvisionStatus) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ProvisionStatus) GetCoapCode() int32 {
	if x != nil {
		return x.CoapCode
	}
	return 0
}

func (x *ProvisionStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type PreSharedKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID used to identify the owner by the device.
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty" bson:"subjectId,omitempty"` // @gotags: bson:"subjectId,omitempty"
	// Associated secret to the owner ID.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" bson:"key,omitempty"` // @gotags: bson:"key,omitempty"
}

func (x *PreSharedKey) Reset() {
	*x = PreSharedKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSharedKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSharedKey) ProtoMessage() {}

func (x *PreSharedKey) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSharedKey.ProtoReflect.Descriptor instead.
func (*PreSharedKey) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{4}
}

func (x *PreSharedKey) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *PreSharedKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Credential Type dependent - eg revocation status information
type CredentialOptionalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data to be provisioned.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Encoding of the data.
	Encoding CredentialOptionalData_Encoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=deviceprovisioningservice.pb.CredentialOptionalData_Encoding" json:"encoding,omitempty"`
	// If set, the credential is revoked.
	IsRevoked bool `protobuf:"varint,3,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
}

func (x *CredentialOptionalData) Reset() {
	*x = CredentialOptionalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialOptionalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialOptionalData) ProtoMessage() {}

func (x *CredentialOptionalData) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialOptionalData.ProtoReflect.Descriptor instead.
func (*CredentialOptionalData) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{5}
}

func (x *CredentialOptionalData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CredentialOptionalData) GetEncoding() CredentialOptionalData_Encoding {
	if x != nil {
		return x.Encoding
	}
	return CredentialOptionalData_UNKNOWN
}

func (x *CredentialOptionalData) GetIsRevoked() bool {
	if x != nil {
		return x.IsRevoked
	}
	return false
}

// Private credential information - non-public contents.
type CredentialPrivateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data to be provisioned.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Encoding of the data.
	Encoding CredentialPrivateData_Encoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=deviceprovisioningservice.pb.CredentialPrivateData_Encoding" json:"encoding,omitempty"`
	// Handle to a key storage Resource.
	Handle int64 `protobuf:"varint,3,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *CredentialPrivateData) Reset() {
	*x = CredentialPrivateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialPrivateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialPrivateData) ProtoMessage() {}

func (x *CredentialPrivateData) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialPrivateData.ProtoReflect.Descriptor instead.
func (*CredentialPrivateData) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{6}
}

func (x *CredentialPrivateData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CredentialPrivateData) GetEncoding() CredentialPrivateData_Encoding {
	if x != nil {
		return x.Encoding
	}
	return CredentialPrivateData_UNKNOWN
}

func (x *CredentialPrivateData) GetHandle() int64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

// Credential Type dependent  - public contents.
type CredentialPublicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data to be provisioned.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Encoding of the data.
	Encoding CredentialPublicData_Encoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=deviceprovisioningservice.pb.CredentialPublicData_Encoding" json:"encoding,omitempty"`
}

func (x *CredentialPublicData) Reset() {
	*x = CredentialPublicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialPublicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialPublicData) ProtoMessage() {}

func (x *CredentialPublicData) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialPublicData.ProtoReflect.Descriptor instead.
func (*CredentialPublicData) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{7}
}

func (x *CredentialPublicData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CredentialPublicData) GetEncoding() CredentialPublicData_Encoding {
	if x != nil {
		return x.Encoding
	}
	return CredentialPublicData_UNKNOWN
}

type CredentialRoleID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Role      string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CredentialRoleID) Reset() {
	*x = CredentialRoleID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialRoleID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialRoleID) ProtoMessage() {}

func (x *CredentialRoleID) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialRoleID.ProtoReflect.Descriptor instead.
func (*CredentialRoleID) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{8}
}

func (x *CredentialRoleID) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *CredentialRoleID) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credential ID. If not set, the device will generate one.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id,omitempty"` // @gotags: bson:"id,omitempty"
	// Credential type.
	Type []Credential_CredentialType `protobuf:"varint,2,rep,packed,name=type,proto3,enum=deviceprovisioningservice.pb.Credential_CredentialType" json:"type,omitempty" bson:"type,omitempty"` // @gotags: bson:"type,omitempty"
	// Credential subject.
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty" bson:"subject,omitempty"` // @gotags: bson:"subject,omitempty"
	// Credential usage.
	Usage Credential_CredentialUsage `protobuf:"varint,4,opt,name=usage,proto3,enum=deviceprovisioningservice.pb.Credential_CredentialUsage" json:"usage,omitempty" bson:"usage,omitempty"` // @gotags: bson:"usage,omitempty"
	// Supported credential refresh methods.
	SupportedRefreshMethods []Credential_CredentialRefreshMethod `protobuf:"varint,5,rep,packed,name=supported_refresh_methods,json=supportedRefreshMethods,proto3,enum=deviceprovisioningservice.pb.Credential_CredentialRefreshMethod" json:"supported_refresh_methods,omitempty" bson:"supportedRefreshMethods,omitempty"` // @gotags: bson:"supportedRefreshMethods,omitempty"
	// Optional data.
	OptionalData *CredentialOptionalData `protobuf:"bytes,6,opt,name=optional_data,json=optionalData,proto3" json:"optional_data,omitempty" bson:"optionalData,omitempty"` // @gotags: bson:"optionalData,omitempty"
	// Period of validity in seconds.
	Period string `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty" bson:"period,omitempty"` // @gotags: bson:"period,omitempty"
	// Private data.
	PrivateData *CredentialPrivateData `protobuf:"bytes,8,opt,name=private_data,json=privateData,proto3" json:"private_data,omitempty" bson:"privateData,omitempty"` // @gotags: bson:"privateData,omitempty"
	// Public data.
	PublicData *CredentialPublicData `protobuf:"bytes,9,opt,name=public_data,json=publicData,proto3" json:"public_data,omitempty" bson:"publicData,omitempty"` // @gotags: bson:"publicData,omitempty"
	// Role ID.
	RoleId *CredentialRoleID `protobuf:"bytes,10,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" bson:"roleId,omitempty"` // @gotags: bson:"roleId,omitempty"
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{9}
}

func (x *Credential) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Credential) GetType() []Credential_CredentialType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Credential) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Credential) GetUsage() Credential_CredentialUsage {
	if x != nil {
		return x.Usage
	}
	return Credential_NONE
}

func (x *Credential) GetSupportedRefreshMethods() []Credential_CredentialRefreshMethod {
	if x != nil {
		return x.SupportedRefreshMethods
	}
	return nil
}

func (x *Credential) GetOptionalData() *CredentialOptionalData {
	if x != nil {
		return x.OptionalData
	}
	return nil
}

func (x *Credential) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *Credential) GetPrivateData() *CredentialPrivateData {
	if x != nil {
		return x.PrivateData
	}
	return nil
}

func (x *Credential) GetPublicData() *CredentialPublicData {
	if x != nil {
		return x.PublicData
	}
	return nil
}

func (x *Credential) GetRoleId() *CredentialRoleID {
	if x != nil {
		return x.RoleId
	}
	return nil
}

type CredentialStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ProvisionStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" bson:"status,omitempty"` // @gotags: bson:"status,omitempty"
	// Last identity certificate issued for the device.
	IdentityCertificatePem string `protobuf:"bytes,2,opt,name=identity_certificate_pem,json=identityCertificatePem,proto3" json:"identity_certificate_pem,omitempty" bson:"identityCertificate,omitempty"` // @gotags: bson:"identityCertificate,omitempty"
	// Last pre shared key issued for the device.
	PreSharedKey *PreSharedKey `protobuf:"bytes,3,opt,name=pre_shared_key,json=preSharedKey,proto3" json:"pre_shared_key,omitempty" bson:"preSharedKey,omitempty"` // @gotags: bson:"preSharedKey,omitempty"
	Credentials  []*Credential `protobuf:"bytes,4,rep,name=credentials,proto3" json:"credentials,omitempty" bson:"credentials,omitempty"`                          // @gotags: bson:"credentials,omitempty"
}

func (x *CredentialStatus) Reset() {
	*x = CredentialStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialStatus) ProtoMessage() {}

func (x *CredentialStatus) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialStatus.ProtoReflect.Descriptor instead.
func (*CredentialStatus) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{10}
}

func (x *CredentialStatus) GetStatus() *ProvisionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CredentialStatus) GetIdentityCertificatePem() string {
	if x != nil {
		return x.IdentityCertificatePem
	}
	return ""
}

func (x *CredentialStatus) GetPreSharedKey() *PreSharedKey {
	if x != nil {
		return x.PreSharedKey
	}
	return nil
}

func (x *CredentialStatus) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type OwnershipStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ProvisionStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" bson:"status,omitempty"` // @gotags: bson:"status,omitempty"
	// Last provisioned owner to the device.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" bson:"owner,omitempty"` // @gotags: bson:"owner,omitempty"
}

func (x *OwnershipStatus) Reset() {
	*x = OwnershipStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnershipStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnershipStatus) ProtoMessage() {}

func (x *OwnershipStatus) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnershipStatus.ProtoReflect.Descriptor instead.
func (*OwnershipStatus) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{11}
}

func (x *OwnershipStatus) GetStatus() *ProvisionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OwnershipStatus) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type AccessControlDeviceSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *AccessControlDeviceSubject) Reset() {
	*x = AccessControlDeviceSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControlDeviceSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControlDeviceSubject) ProtoMessage() {}

func (x *AccessControlDeviceSubject) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControlDeviceSubject.ProtoReflect.Descriptor instead.
func (*AccessControlDeviceSubject) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{12}
}

func (x *AccessControlDeviceSubject) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type AccessControlRoleSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Role      string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AccessControlRoleSubject) Reset() {
	*x = AccessControlRoleSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControlRoleSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControlRoleSubject) ProtoMessage() {}

func (x *AccessControlRoleSubject) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControlRoleSubject.ProtoReflect.Descriptor instead.
func (*AccessControlRoleSubject) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{13}
}

func (x *AccessControlRoleSubject) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *AccessControlRoleSubject) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type AccessControlConnectionSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type AccessControlConnectionSubject_ConnectionType `protobuf:"varint,1,opt,name=type,proto3,enum=deviceprovisioningservice.pb.AccessControlConnectionSubject_ConnectionType" json:"type,omitempty"`
}

func (x *AccessControlConnectionSubject) Reset() {
	*x = AccessControlConnectionSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControlConnectionSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControlConnectionSubject) ProtoMessage() {}

func (x *AccessControlConnectionSubject) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControlConnectionSubject.ProtoReflect.Descriptor instead.
func (*AccessControlConnectionSubject) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{14}
}

func (x *AccessControlConnectionSubject) GetType() AccessControlConnectionSubject_ConnectionType {
	if x != nil {
		return x.Type
	}
	return AccessControlConnectionSubject_ANON_CLEAR
}

type AccessControlResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource href.
	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	// Resource type.
	ResourceTypes []string `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	// Resource interface.
	Interfaces []string `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Resource wildcard.
	Wildcard AccessControlResource_Wildcard `protobuf:"varint,4,opt,name=wildcard,proto3,enum=deviceprovisioningservice.pb.AccessControlResource_Wildcard" json:"wildcard,omitempty"`
}

func (x *AccessControlResource) Reset() {
	*x = AccessControlResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControlResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControlResource) ProtoMessage() {}

func (x *AccessControlResource) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControlResource.ProtoReflect.Descriptor instead.
func (*AccessControlResource) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{15}
}

func (x *AccessControlResource) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *AccessControlResource) GetResourceTypes() []string {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

func (x *AccessControlResource) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *AccessControlResource) GetWildcard() AccessControlResource_Wildcard {
	if x != nil {
		return x.Wildcard
	}
	return AccessControlResource_NONE
}

type AccessControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subject of the ACL defines the entity to which the permissions are granted. Only one subject must be defined per ACL.
	DeviceSubject     *AccessControlDeviceSubject     `protobuf:"bytes,1,opt,name=device_subject,json=deviceSubject,proto3" json:"device_subject,omitempty" bson:"deviceSubject,omitempty"`                 // @gotags: bson:"deviceSubject,omitempty"
	RoleSubject       *AccessControlRoleSubject       `protobuf:"bytes,2,opt,name=role_subject,json=roleSubject,proto3" json:"role_subject,omitempty" bson:"roleSubject,omitempty"`                         // @gotags: bson:"roleSubject,omitempty"
	ConnectionSubject *AccessControlConnectionSubject `protobuf:"bytes,3,opt,name=connection_subject,json=connectionSubject,proto3" json:"connection_subject,omitempty" bson:"connectionSubject,omitempty"` // @gotags: bson:"connectionSubject,omitempty"
	// Permissions granted to the subject.
	Permissions []AccessControl_Permission `protobuf:"varint,4,rep,packed,name=permissions,proto3,enum=deviceprovisioningservice.pb.AccessControl_Permission" json:"permissions,omitempty"`
	// Resources to which the permissions apply.
	Resources []*AccessControlResource `protobuf:"bytes,5,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *AccessControl) Reset() {
	*x = AccessControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControl) ProtoMessage() {}

func (x *AccessControl) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControl.ProtoReflect.Descriptor instead.
func (*AccessControl) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{16}
}

func (x *AccessControl) GetDeviceSubject() *AccessControlDeviceSubject {
	if x != nil {
		return x.DeviceSubject
	}
	return nil
}

func (x *AccessControl) GetRoleSubject() *AccessControlRoleSubject {
	if x != nil {
		return x.RoleSubject
	}
	return nil
}

func (x *AccessControl) GetConnectionSubject() *AccessControlConnectionSubject {
	if x != nil {
		return x.ConnectionSubject
	}
	return nil
}

func (x *AccessControl) GetPermissions() []AccessControl_Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *AccessControl) GetResources() []*AccessControlResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type ACLStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ProvisionStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" bson:"status,omitempty"` // @gotags: bson:"status,omitempty"
	// Last ACL list provisioned to the device.
	AccessControlList []*AccessControl `protobuf:"bytes,2,rep,name=access_control_list,json=accessControlList,proto3" json:"access_control_list,omitempty" bson:"accessControlList,omitempty"` // @gotags: bson:"accessControlList,omitempty"
}

func (x *ACLStatus) Reset() {
	*x = ACLStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACLStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLStatus) ProtoMessage() {}

func (x *ACLStatus) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLStatus.ProtoReflect.Descriptor instead.
func (*ACLStatus) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{17}
}

func (x *ACLStatus) GetStatus() *ProvisionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ACLStatus) GetAccessControlList() []*AccessControl {
	if x != nil {
		return x.AccessControlList
	}
	return nil
}

type CloudStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ProvisionStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" bson:"status,omitempty"` // @gotags: bson:"status,omitempty"
	// Last provider name used to authenticate the device to the cloud.
	ProviderName string `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty" bson:"providerName,omitempty"` // @gotags: bson:"providerName,omitempty"
	// Last provisioned gateways to the device.
	Gateways        []*CloudStatus_Gateway `protobuf:"bytes,5,rep,name=gateways,proto3" json:"gateways,omitempty" bson:"gateways,omitempty"`                                              // @gotags: bson:"gateways,omitempty"
	SelectedGateway int32                  `protobuf:"varint,6,opt,name=selected_gateway,json=selectedGateway,proto3" json:"selected_gateway,omitempty" bson:"selectedGateway,omitempty"` // @gotags: bson:"selectedGateway,omitempty"
}

func (x *CloudStatus) Reset() {
	*x = CloudStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudStatus) ProtoMessage() {}

func (x *CloudStatus) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudStatus.ProtoReflect.Descriptor instead.
func (*CloudStatus) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{18}
}

func (x *CloudStatus) GetStatus() *ProvisionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CloudStatus) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *CloudStatus) GetGateways() []*CloudStatus_Gateway {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *CloudStatus) GetSelectedGateway() int32 {
	if x != nil {
		return x.SelectedGateway
	}
	return 0
}

type ProvisioningRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration id, calculated from the manufacturer certificate public key info.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"` // @gotags: bson:"_id,omitempty"
	// ID of the device to which this record belongs to.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty" bson:"deviceId,omitempty"` // @gotags: bson:"deviceId,omitempty"
	// Assigned enrollment group.
	EnrollmentGroupId string `protobuf:"bytes,3,opt,name=enrollment_group_id,json=enrollmentGroupId,proto3" json:"enrollment_group_id,omitempty" bson:"enrollmentGroupId,omitempty"` // @gotags: bson:"enrollmentGroupId,omitempty"
	// Record creation date, in unix nanoseconds timestamp format.
	CreationDate int64 `protobuf:"varint,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty" bson:"creationDate,omitempty"` // @gotags: bson:"creationDate,omitempty"
	// Last device attestation overview.
	Attestation *Attestation `protobuf:"bytes,5,opt,name=attestation,proto3" json:"attestation,omitempty" bson:"attestation,omitempty"` // @gotags: bson:"attestation,omitempty"
	// Last credential provision overview.
	Credential *CredentialStatus `protobuf:"bytes,6,opt,name=credential,proto3" json:"credential,omitempty" bson:"credential,omitempty"` // @gotags: bson:"credential,omitempty"
	// Last ACL provision overview.
	Acl *ACLStatus `protobuf:"bytes,7,opt,name=acl,proto3" json:"acl,omitempty" bson:"acl,omitempty"` // @gotags: bson:"acl,omitempty"
	// Last cloud provision overview.
	Cloud *CloudStatus `protobuf:"bytes,8,opt,name=cloud,proto3" json:"cloud,omitempty" bson:"cloud,omitempty"` // @gotags: bson:"cloud,omitempty"
	// Last ownership provision overview.
	Ownership *OwnershipStatus `protobuf:"bytes,9,opt,name=ownership,proto3" json:"ownership,omitempty" bson:"ownership,omitempty"` // @gotags: bson:"ownership,omitempty"
	// Last plgd-time provision overview.
	PlgdTime *ProvisionStatus `protobuf:"bytes,10,opt,name=plgd_time,json=plgdTime,proto3" json:"plgd_time,omitempty" bson:"plgdTime,omitempty"` // @gotags: bson:"plgdTime,omitempty"
	// Last local endpoints
	LocalEndpoints []string `protobuf:"bytes,11,rep,name=local_endpoints,json=localEndpoints,proto3" json:"local_endpoints,omitempty" bson:"localEndpoints,omitempty"` // @gotags: bson:"localEndpoints,omitempty"
	// Owner ID.
	Owner string `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty" bson:"owner,omitempty"` // @gotags: bson:"owner,omitempty"
}

func (x *ProvisioningRecord) Reset() {
	*x = ProvisioningRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisioningRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisioningRecord) ProtoMessage() {}

func (x *ProvisioningRecord) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisioningRecord.ProtoReflect.Descriptor instead.
func (*ProvisioningRecord) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{19}
}

func (x *ProvisioningRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProvisioningRecord) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ProvisioningRecord) GetEnrollmentGroupId() string {
	if x != nil {
		return x.EnrollmentGroupId
	}
	return ""
}

func (x *ProvisioningRecord) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *ProvisioningRecord) GetAttestation() *Attestation {
	if x != nil {
		return x.Attestation
	}
	return nil
}

func (x *ProvisioningRecord) GetCredential() *CredentialStatus {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *ProvisioningRecord) GetAcl() *ACLStatus {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *ProvisioningRecord) GetCloud() *CloudStatus {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ProvisioningRecord) GetOwnership() *OwnershipStatus {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *ProvisioningRecord) GetPlgdTime() *ProvisionStatus {
	if x != nil {
		return x.PlgdTime
	}
	return nil
}

func (x *ProvisioningRecord) GetLocalEndpoints() []string {
	if x != nil {
		return x.LocalEndpoints
	}
	return nil
}

func (x *ProvisioningRecord) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type DeleteProvisioningRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by id.
	IdFilter []string `protobuf:"bytes,1,rep,name=id_filter,json=idFilter,proto3" json:"id_filter,omitempty"`
	// Filter by device id.
	DeviceIdFilter []string `protobuf:"bytes,2,rep,name=device_id_filter,json=deviceIdFilter,proto3" json:"device_id_filter,omitempty"`
	// Filter by enrollment group id.
	EnrollmentGroupIdFilter []string `protobuf:"bytes,3,rep,name=enrollment_group_id_filter,json=enrollmentGroupIdFilter,proto3" json:"enrollment_group_id_filter,omitempty"`
}

func (x *DeleteProvisioningRecordsRequest) Reset() {
	*x = DeleteProvisioningRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProvisioningRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProvisioningRecordsRequest) ProtoMessage() {}

func (x *DeleteProvisioningRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProvisioningRecordsRequest.ProtoReflect.Descriptor instead.
func (*DeleteProvisioningRecordsRequest) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteProvisioningRecordsRequest) GetIdFilter() []string {
	if x != nil {
		return x.IdFilter
	}
	return nil
}

func (x *DeleteProvisioningRecordsRequest) GetDeviceIdFilter() []string {
	if x != nil {
		return x.DeviceIdFilter
	}
	return nil
}

func (x *DeleteProvisioningRecordsRequest) GetEnrollmentGroupIdFilter() []string {
	if x != nil {
		return x.EnrollmentGroupIdFilter
	}
	return nil
}

type DeleteProvisioningRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of deleted records.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DeleteProvisioningRecordsResponse) Reset() {
	*x = DeleteProvisioningRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProvisioningRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProvisioningRecordsResponse) ProtoMessage() {}

func (x *DeleteProvisioningRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProvisioningRecordsResponse.ProtoReflect.Descriptor instead.
func (*DeleteProvisioningRecordsResponse) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteProvisioningRecordsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CloudStatus_Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway endpoint in format <scheme>://<host>:<port>
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty" bson:"uri,omitempty"` // @gotags: bson:"uri,omitempty"
	// UUID of the gateway.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" bson:"id,omitempty"` // @gotags: bson:"id,omitempty"
}

func (x *CloudStatus_Gateway) Reset() {
	*x = CloudStatus_Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudStatus_Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudStatus_Gateway) ProtoMessage() {}

func (x *CloudStatus_Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudStatus_Gateway.ProtoReflect.Descriptor instead.
func (*CloudStatus_Gateway) Descriptor() ([]byte, []int) {
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CloudStatus_Gateway) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CloudStatus_Gateway) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_device_provisioning_service_pb_provisioningRecords_proto protoreflect.FileDescriptor

var file_device_provisioning_service_pb_provisioningRecords_proto_rawDesc = []byte{
	0x0a, 0x38, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62,
	0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x64,
	0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x04, 0x78, 0x35, 0x30, 0x39, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x58,
	0x35, 0x30, 0x39, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x78, 0x35, 0x30, 0x39, 0x22, 0x5b, 0x0a, 0x0f, 0x58, 0x35, 0x30, 0x39, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x67, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x61,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x0c, 0x50, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xf8, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x08, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x22, 0x50, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x57, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x53, 0x45,
	0x36, 0x34, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x45, 0x52, 0x10, 0x06, 0x22, 0xf2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x57, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41,
	0x53, 0x45, 0x36, 0x34, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x06, 0x22, 0xde, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x22, 0x59, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41,
	0x57, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x57, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45,
	0x4d, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x52, 0x10, 0x07, 0x22, 0x44, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x9e, 0x09, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x17, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xbe, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x5f,
	0x57, 0x49, 0x53, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10,
	0x10, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x20,
	0x22, 0x62, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x46, 0x47, 0x5f, 0x54, 0x52, 0x55, 0x53,
	0x54, 0x5f, 0x43, 0x41, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x46, 0x47, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x10, 0x05, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x47, 0x52, 0x45,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x50, 0x49, 0x4e, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4b,
	0x45, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4b, 0x43,
	0x53, 0x31, 0x30, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x43,
	0x41, 0x10, 0x05, 0x22, 0xb1, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6d, 0x12, 0x50, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x6e, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x1a, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x4c, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0xb3, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x10, 0x01, 0x22, 0xa7, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x72, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x77,
	0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x52, 0x08, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x22, 0x59, 0x0a, 0x08, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x4f, 0x4e, 0x43, 0x46, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x4e, 0x43, 0x46, 0x47, 0x5f, 0x4e,
	0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e, 0x43, 0x46, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03,
	0x22, 0xac, 0x04, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x5f, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x6b,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x04, 0x22,
	0xaf, 0x01, 0x0a, 0x09, 0x41, 0x43, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xba, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a,
	0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x1a, 0x2b, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x52, 0x0c, 0x63, 0x6f, 0x61, 0x70, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x87,
	0x05, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x43, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12,
	0x3f, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x4b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x4a, 0x0a,
	0x09, 0x70, 0x6c, 0x67, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x08, 0x70, 0x6c, 0x67, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x39, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x3e, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x67, 0x64, 0x2d,
	0x64, 0x65, 0x76, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_provisioning_service_pb_provisioningRecords_proto_rawDescOnce sync.Once
	file_device_provisioning_service_pb_provisioningRecords_proto_rawDescData = file_device_provisioning_service_pb_provisioningRecords_proto_rawDesc
)

func file_device_provisioning_service_pb_provisioningRecords_proto_rawDescGZIP() []byte {
	file_device_provisioning_service_pb_provisioningRecords_proto_rawDescOnce.Do(func() {
		file_device_provisioning_service_pb_provisioningRecords_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_provisioning_service_pb_provisioningRecords_proto_rawDescData)
	})
	return file_device_provisioning_service_pb_provisioningRecords_proto_rawDescData
}

var file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_device_provisioning_service_pb_provisioningRecords_proto_goTypes = []any{
	(CredentialOptionalData_Encoding)(0),               // 0: deviceprovisioningservice.pb.CredentialOptionalData.Encoding
	(CredentialPrivateData_Encoding)(0),                // 1: deviceprovisioningservice.pb.CredentialPrivateData.Encoding
	(CredentialPublicData_Encoding)(0),                 // 2: deviceprovisioningservice.pb.CredentialPublicData.Encoding
	(Credential_CredentialType)(0),                     // 3: deviceprovisioningservice.pb.Credential.CredentialType
	(Credential_CredentialUsage)(0),                    // 4: deviceprovisioningservice.pb.Credential.CredentialUsage
	(Credential_CredentialRefreshMethod)(0),            // 5: deviceprovisioningservice.pb.Credential.CredentialRefreshMethod
	(AccessControlConnectionSubject_ConnectionType)(0), // 6: deviceprovisioningservice.pb.AccessControlConnectionSubject.ConnectionType
	(AccessControlResource_Wildcard)(0),                // 7: deviceprovisioningservice.pb.AccessControlResource.Wildcard
	(AccessControl_Permission)(0),                      // 8: deviceprovisioningservice.pb.AccessControl.Permission
	(*GetProvisioningRecordsRequest)(nil),              // 9: deviceprovisioningservice.pb.GetProvisioningRecordsRequest
	(*Attestation)(nil),                                // 10: deviceprovisioningservice.pb.Attestation
	(*X509Attestation)(nil),                            // 11: deviceprovisioningservice.pb.X509Attestation
	(*ProvisionStatus)(nil),                            // 12: deviceprovisioningservice.pb.ProvisionStatus
	(*PreSharedKey)(nil),                               // 13: deviceprovisioningservice.pb.PreSharedKey
	(*CredentialOptionalData)(nil),                     // 14: deviceprovisioningservice.pb.CredentialOptionalData
	(*CredentialPrivateData)(nil),                      // 15: deviceprovisioningservice.pb.CredentialPrivateData
	(*CredentialPublicData)(nil),                       // 16: deviceprovisioningservice.pb.CredentialPublicData
	(*CredentialRoleID)(nil),                           // 17: deviceprovisioningservice.pb.CredentialRoleID
	(*Credential)(nil),                                 // 18: deviceprovisioningservice.pb.Credential
	(*CredentialStatus)(nil),                           // 19: deviceprovisioningservice.pb.CredentialStatus
	(*OwnershipStatus)(nil),                            // 20: deviceprovisioningservice.pb.OwnershipStatus
	(*AccessControlDeviceSubject)(nil),                 // 21: deviceprovisioningservice.pb.AccessControlDeviceSubject
	(*AccessControlRoleSubject)(nil),                   // 22: deviceprovisioningservice.pb.AccessControlRoleSubject
	(*AccessControlConnectionSubject)(nil),             // 23: deviceprovisioningservice.pb.AccessControlConnectionSubject
	(*AccessControlResource)(nil),                      // 24: deviceprovisioningservice.pb.AccessControlResource
	(*AccessControl)(nil),                              // 25: deviceprovisioningservice.pb.AccessControl
	(*ACLStatus)(nil),                                  // 26: deviceprovisioningservice.pb.ACLStatus
	(*CloudStatus)(nil),                                // 27: deviceprovisioningservice.pb.CloudStatus
	(*ProvisioningRecord)(nil),                         // 28: deviceprovisioningservice.pb.ProvisioningRecord
	(*DeleteProvisioningRecordsRequest)(nil),           // 29: deviceprovisioningservice.pb.DeleteProvisioningRecordsRequest
	(*DeleteProvisioningRecordsResponse)(nil),          // 30: deviceprovisioningservice.pb.DeleteProvisioningRecordsResponse
	(*CloudStatus_Gateway)(nil),                        // 31: deviceprovisioningservice.pb.CloudStatus.Gateway
}
var file_device_provisioning_service_pb_provisioningRecords_proto_depIdxs = []int32{
	11, // 0: deviceprovisioningservice.pb.Attestation.x509:type_name -> deviceprovisioningservice.pb.X509Attestation
	0,  // 1: deviceprovisioningservice.pb.CredentialOptionalData.encoding:type_name -> deviceprovisioningservice.pb.CredentialOptionalData.Encoding
	1,  // 2: deviceprovisioningservice.pb.CredentialPrivateData.encoding:type_name -> deviceprovisioningservice.pb.CredentialPrivateData.Encoding
	2,  // 3: deviceprovisioningservice.pb.CredentialPublicData.encoding:type_name -> deviceprovisioningservice.pb.CredentialPublicData.Encoding
	3,  // 4: deviceprovisioningservice.pb.Credential.type:type_name -> deviceprovisioningservice.pb.Credential.CredentialType
	4,  // 5: deviceprovisioningservice.pb.Credential.usage:type_name -> deviceprovisioningservice.pb.Credential.CredentialUsage
	5,  // 6: deviceprovisioningservice.pb.Credential.supported_refresh_methods:type_name -> deviceprovisioningservice.pb.Credential.CredentialRefreshMethod
	14, // 7: deviceprovisioningservice.pb.Credential.optional_data:type_name -> deviceprovisioningservice.pb.CredentialOptionalData
	15, // 8: deviceprovisioningservice.pb.Credential.private_data:type_name -> deviceprovisioningservice.pb.CredentialPrivateData
	16, // 9: deviceprovisioningservice.pb.Credential.public_data:type_name -> deviceprovisioningservice.pb.CredentialPublicData
	17, // 10: deviceprovisioningservice.pb.Credential.role_id:type_name -> deviceprovisioningservice.pb.CredentialRoleID
	12, // 11: deviceprovisioningservice.pb.CredentialStatus.status:type_name -> deviceprovisioningservice.pb.ProvisionStatus
	13, // 12: deviceprovisioningservice.pb.CredentialStatus.pre_shared_key:type_name -> deviceprovisioningservice.pb.PreSharedKey
	18, // 13: deviceprovisioningservice.pb.CredentialStatus.credentials:type_name -> deviceprovisioningservice.pb.Credential
	12, // 14: deviceprovisioningservice.pb.OwnershipStatus.status:type_name -> deviceprovisioningservice.pb.ProvisionStatus
	6,  // 15: deviceprovisioningservice.pb.AccessControlConnectionSubject.type:type_name -> deviceprovisioningservice.pb.AccessControlConnectionSubject.ConnectionType
	7,  // 16: deviceprovisioningservice.pb.AccessControlResource.wildcard:type_name -> deviceprovisioningservice.pb.AccessControlResource.Wildcard
	21, // 17: deviceprovisioningservice.pb.AccessControl.device_subject:type_name -> deviceprovisioningservice.pb.AccessControlDeviceSubject
	22, // 18: deviceprovisioningservice.pb.AccessControl.role_subject:type_name -> deviceprovisioningservice.pb.AccessControlRoleSubject
	23, // 19: deviceprovisioningservice.pb.AccessControl.connection_subject:type_name -> deviceprovisioningservice.pb.AccessControlConnectionSubject
	8,  // 20: deviceprovisioningservice.pb.AccessControl.permissions:type_name -> deviceprovisioningservice.pb.AccessControl.Permission
	24, // 21: deviceprovisioningservice.pb.AccessControl.resources:type_name -> deviceprovisioningservice.pb.AccessControlResource
	12, // 22: deviceprovisioningservice.pb.ACLStatus.status:type_name -> deviceprovisioningservice.pb.ProvisionStatus
	25, // 23: deviceprovisioningservice.pb.ACLStatus.access_control_list:type_name -> deviceprovisioningservice.pb.AccessControl
	12, // 24: deviceprovisioningservice.pb.CloudStatus.status:type_name -> deviceprovisioningservice.pb.ProvisionStatus
	31, // 25: deviceprovisioningservice.pb.CloudStatus.gateways:type_name -> deviceprovisioningservice.pb.CloudStatus.Gateway
	10, // 26: deviceprovisioningservice.pb.ProvisioningRecord.attestation:type_name -> deviceprovisioningservice.pb.Attestation
	19, // 27: deviceprovisioningservice.pb.ProvisioningRecord.credential:type_name -> deviceprovisioningservice.pb.CredentialStatus
	26, // 28: deviceprovisioningservice.pb.ProvisioningRecord.acl:type_name -> deviceprovisioningservice.pb.ACLStatus
	27, // 29: deviceprovisioningservice.pb.ProvisioningRecord.cloud:type_name -> deviceprovisioningservice.pb.CloudStatus
	20, // 30: deviceprovisioningservice.pb.ProvisioningRecord.ownership:type_name -> deviceprovisioningservice.pb.OwnershipStatus
	12, // 31: deviceprovisioningservice.pb.ProvisioningRecord.plgd_time:type_name -> deviceprovisioningservice.pb.ProvisionStatus
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_device_provisioning_service_pb_provisioningRecords_proto_init() }
func file_device_provisioning_service_pb_provisioningRecords_proto_init() {
	if File_device_provisioning_service_pb_provisioningRecords_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetProvisioningRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Attestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*X509Attestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ProvisionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PreSharedKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CredentialOptionalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CredentialPrivateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CredentialPublicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CredentialRoleID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CredentialStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*OwnershipStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AccessControlDeviceSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AccessControlRoleSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AccessControlConnectionSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AccessControlResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*AccessControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ACLStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CloudStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ProvisioningRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteProvisioningRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteProvisioningRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CloudStatus_Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_provisioning_service_pb_provisioningRecords_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_provisioning_service_pb_provisioningRecords_proto_goTypes,
		DependencyIndexes: file_device_provisioning_service_pb_provisioningRecords_proto_depIdxs,
		EnumInfos:         file_device_provisioning_service_pb_provisioningRecords_proto_enumTypes,
		MessageInfos:      file_device_provisioning_service_pb_provisioningRecords_proto_msgTypes,
	}.Build()
	File_device_provisioning_service_pb_provisioningRecords_proto = out.File
	file_device_provisioning_service_pb_provisioningRecords_proto_rawDesc = nil
	file_device_provisioning_service_pb_provisioningRecords_proto_goTypes = nil
	file_device_provisioning_service_pb_provisioningRecords_proto_depIdxs = nil
}
