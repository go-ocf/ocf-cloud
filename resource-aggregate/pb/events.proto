syntax = "proto3";

package ocf.cloud.resourceaggregate.pb;

import "github.com/plgd-dev/cloud/resource-aggregate/pb/commands.proto";
import "github.com/plgd-dev/cloud/resource-aggregate/pb/resources.proto";

option go_package = "github.com/plgd-dev/cloud/resource-aggregate/events;events";

message EventMetadata {
   uint64 version = 1;
   int64 timestamp = 2;
   string connection_id = 3;
   uint64 sequence = 4;
}

// https://github.com/openconnectivityfoundation/cloud-services/blob/master/swagger2.0/oic.wk.rd.swagger.json#L173
message ResourceLinksPublished {
    string device_id = 1;
    repeated Resource resources = 2;
    AuditContext audit_context = 3;
    EventMetadata event_metadata = 4;
}

// https://github.com/openconnectivityfoundation/cloud-services/blob/master/swagger2.0/oic.wk.rd.swagger.json #Specification CR needed
message ResourceLinksUnpublished {
    string device_id = 1;
    repeated string hrefs = 2;
    AuditContext audit_context = 3;
    EventMetadata event_metadata = 4;
}

message ResourceLinksSnapshotTaken {
    string device_id = 1;
    map<string, Resource> resources = 2;
    EventMetadata event_metadata = 3;
    AuditContext audit_context = 4;
}

message ResourceChanged {
    ResourceId resource_id = 1;
    Content content = 2;
    Status status = 3;
    AuditContext audit_context = 4;
    EventMetadata event_metadata = 5;
}

message ResourceUpdatePending {
    ResourceId resource_id = 1;
    string resource_interface = 2;
    Content content = 3;
    AuditContext audit_context = 4;
    EventMetadata event_metadata = 5;
    int64 valid_until = 6;  // unix timestamp in nanoseconds (https://golang.org/pkg/time/#Time.UnixNano) when pending event is considered as expired. 0 means forever.
}

message ResourceUpdated {
    ResourceId resource_id = 1;
    Status status = 2;
    Content content = 3;
    AuditContext audit_context = 4;
    EventMetadata event_metadata = 5;
}

message ResourceRetrievePending {
    ResourceId resource_id = 1;
    string resource_interface = 2;
    AuditContext audit_context = 3;
    EventMetadata event_metadata = 4;
    int64 valid_until = 5;  // unix timestamp in nanoseconds (https://golang.org/pkg/time/#Time.UnixNano) when pending event is considered as expired. 0 means forever.
}

message ResourceRetrieved {
    ResourceId resource_id = 1;
    Status status = 2;
    Content content = 3;
    AuditContext audit_context = 4;
    EventMetadata event_metadata = 5;
}

message ResourceDeletePending {
    ResourceId resource_id = 1;
    AuditContext audit_context = 2;
    EventMetadata event_metadata = 3;
    int64 valid_until = 4;  // unix timestamp in nanoseconds (https://golang.org/pkg/time/#Time.UnixNano) when pending event is considered as expired. 0 means forever.
}

message ResourceDeleted {
    ResourceId resource_id = 1;
    Status status = 2;
    Content content = 3;
    AuditContext audit_context = 4;
    EventMetadata event_metadata = 5;
}

message ResourceCreatePending {
    ResourceId resource_id = 1;
    Content content = 2;
    AuditContext audit_context = 3;
    EventMetadata event_metadata = 4;
    int64 valid_until = 5;  // unix timestamp in nanoseconds (https://golang.org/pkg/time/#Time.UnixNano) when pending event is considered as expired. 0 means forever.
}

message ResourceCreated {
    ResourceId resource_id = 1;
    Status status = 2;
    Content content = 3;
    AuditContext audit_context = 4;
    EventMetadata event_metadata = 5;
}

message ResourceStateSnapshotTaken {
    ResourceId resource_id = 1;
    ResourceChanged  latest_resource_change = 2;
    repeated ResourceCreatePending resource_create_pendings = 3; // expired events will be removed by creating a new snapshot.
    repeated ResourceRetrievePending resource_retrieve_pendings = 4; // expired events will be removed by creating a new snapshot.
    repeated ResourceUpdatePending resource_update_pendings = 5; // expired events will be removed by creating a new snapshot.
    repeated ResourceDeletePending resource_delete_pendings = 6; // expired events will be removed by creating a new snapshot.
    AuditContext audit_context = 7;
    EventMetadata event_metadata = 8;
}

message DeviceMetadataUpdated {
    string device_id = 1;
    ConnectionStatus status = 2;
    ShadowSynchronization shadow_synchronization = 3;
    AuditContext audit_context = 4;
    EventMetadata event_metadata = 5;
    bool canceled = 6; // it true then the command with audit_context.correlation_id was canceled.
}

message DeviceMetadataUpdatePending {
    string device_id = 1;
    oneof update_pending {
        ShadowSynchronization shadow_synchronization = 2;
    };
    AuditContext audit_context = 3;
    EventMetadata event_metadata = 4;
    int64 valid_until = 5;  // unix timestamp in nanoseconds (https://golang.org/pkg/time/#Time.UnixNano) when pending event is considered as expired. 0 means forever.
}

message DeviceMetadataSnapshotTaken {
    string device_id = 1;
    DeviceMetadataUpdated device_metadata_updated = 2;
    repeated DeviceMetadataUpdatePending update_pendings = 3; // expired events will be removed by creating a new snapshot.
    EventMetadata event_metadata = 4;
}