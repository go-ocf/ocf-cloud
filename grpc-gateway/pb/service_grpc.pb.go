// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: grpc-gateway/pb/service.proto

package pb

import (
	context "context"
	events "github.com/plgd-dev/hub/v2/resource-aggregate/events"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcGateway_GetDevices_FullMethodName                   = "/grpcgateway.pb.GrpcGateway/GetDevices"
	GrpcGateway_DeleteDevices_FullMethodName                = "/grpcgateway.pb.GrpcGateway/DeleteDevices"
	GrpcGateway_GetResourceLinks_FullMethodName             = "/grpcgateway.pb.GrpcGateway/GetResourceLinks"
	GrpcGateway_GetResourceFromDevice_FullMethodName        = "/grpcgateway.pb.GrpcGateway/GetResourceFromDevice"
	GrpcGateway_GetResources_FullMethodName                 = "/grpcgateway.pb.GrpcGateway/GetResources"
	GrpcGateway_UpdateResource_FullMethodName               = "/grpcgateway.pb.GrpcGateway/UpdateResource"
	GrpcGateway_SubscribeToEvents_FullMethodName            = "/grpcgateway.pb.GrpcGateway/SubscribeToEvents"
	GrpcGateway_GetHubConfiguration_FullMethodName          = "/grpcgateway.pb.GrpcGateway/GetHubConfiguration"
	GrpcGateway_DeleteResource_FullMethodName               = "/grpcgateway.pb.GrpcGateway/DeleteResource"
	GrpcGateway_CreateResource_FullMethodName               = "/grpcgateway.pb.GrpcGateway/CreateResource"
	GrpcGateway_UpdateDeviceMetadata_FullMethodName         = "/grpcgateway.pb.GrpcGateway/UpdateDeviceMetadata"
	GrpcGateway_GetPendingCommands_FullMethodName           = "/grpcgateway.pb.GrpcGateway/GetPendingCommands"
	GrpcGateway_CancelPendingCommands_FullMethodName        = "/grpcgateway.pb.GrpcGateway/CancelPendingCommands"
	GrpcGateway_CancelPendingMetadataUpdates_FullMethodName = "/grpcgateway.pb.GrpcGateway/CancelPendingMetadataUpdates"
	GrpcGateway_GetDevicesMetadata_FullMethodName           = "/grpcgateway.pb.GrpcGateway/GetDevicesMetadata"
	GrpcGateway_GetEvents_FullMethodName                    = "/grpcgateway.pb.GrpcGateway/GetEvents"
)

// GrpcGatewayClient is the client API for GrpcGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcGatewayClient interface {
	// Get all devices
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Device], error)
	// Delete selected devices.
	DeleteDevices(ctx context.Context, in *DeleteDevicesRequest, opts ...grpc.CallOption) (*DeleteDevicesResponse, error)
	// Get resource links of devices.
	GetResourceLinks(ctx context.Context, in *GetResourceLinksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[events.ResourceLinksPublished], error)
	// Get resource from the device.
	GetResourceFromDevice(ctx context.Context, in *GetResourceFromDeviceRequest, opts ...grpc.CallOption) (*GetResourceFromDeviceResponse, error)
	// Get resources from the resource shadow.
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error)
	// Update resource at the device.
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	// When the client creates a subscription.
	// Subscription doesn't guarantee that all events will be sent to the client. The client is responsible for synchronize events.
	SubscribeToEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeToEvents, Event], error)
	// Get cloud configuration
	GetHubConfiguration(ctx context.Context, in *HubConfigurationRequest, opts ...grpc.CallOption) (*HubConfigurationResponse, error)
	// Delete resource at the device.
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	// Create resource at the device.
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	// Enables/disables shadow synchronization for device.
	UpdateDeviceMetadata(ctx context.Context, in *UpdateDeviceMetadataRequest, opts ...grpc.CallOption) (*UpdateDeviceMetadataResponse, error)
	// Gets pending commands for devices .
	GetPendingCommands(ctx context.Context, in *GetPendingCommandsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PendingCommand], error)
	// Cancels resource commands.
	CancelPendingCommands(ctx context.Context, in *CancelPendingCommandsRequest, opts ...grpc.CallOption) (*CancelPendingCommandsResponse, error)
	// Cancels device metadata updates.
	CancelPendingMetadataUpdates(ctx context.Context, in *CancelPendingMetadataUpdatesRequest, opts ...grpc.CallOption) (*CancelPendingCommandsResponse, error)
	// Gets metadata of the devices. Is contains online/offline or shadown synchronization status.
	GetDevicesMetadata(ctx context.Context, in *GetDevicesMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[events.DeviceMetadataUpdated], error)
	// Get events for given combination of device id, resource id and timestamp
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetEventsResponse], error)
}

type grpcGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcGatewayClient(cc grpc.ClientConnInterface) GrpcGatewayClient {
	return &grpcGatewayClient{cc}
}

func (c *grpcGatewayClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Device], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcGateway_ServiceDesc.Streams[0], GrpcGateway_GetDevices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDevicesRequest, Device]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetDevicesClient = grpc.ServerStreamingClient[Device]

func (c *grpcGatewayClient) DeleteDevices(ctx context.Context, in *DeleteDevicesRequest, opts ...grpc.CallOption) (*DeleteDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDevicesResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_DeleteDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) GetResourceLinks(ctx context.Context, in *GetResourceLinksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[events.ResourceLinksPublished], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcGateway_ServiceDesc.Streams[1], GrpcGateway_GetResourceLinks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetResourceLinksRequest, events.ResourceLinksPublished]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetResourceLinksClient = grpc.ServerStreamingClient[events.ResourceLinksPublished]

func (c *grpcGatewayClient) GetResourceFromDevice(ctx context.Context, in *GetResourceFromDeviceRequest, opts ...grpc.CallOption) (*GetResourceFromDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceFromDeviceResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_GetResourceFromDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcGateway_ServiceDesc.Streams[2], GrpcGateway_GetResources_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetResourcesRequest, Resource]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetResourcesClient = grpc.ServerStreamingClient[Resource]

func (c *grpcGatewayClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_UpdateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) SubscribeToEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeToEvents, Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcGateway_ServiceDesc.Streams[3], GrpcGateway_SubscribeToEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToEvents, Event]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_SubscribeToEventsClient = grpc.BidiStreamingClient[SubscribeToEvents, Event]

func (c *grpcGatewayClient) GetHubConfiguration(ctx context.Context, in *HubConfigurationRequest, opts ...grpc.CallOption) (*HubConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HubConfigurationResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_GetHubConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_DeleteResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_CreateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) UpdateDeviceMetadata(ctx context.Context, in *UpdateDeviceMetadataRequest, opts ...grpc.CallOption) (*UpdateDeviceMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeviceMetadataResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_UpdateDeviceMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) GetPendingCommands(ctx context.Context, in *GetPendingCommandsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PendingCommand], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcGateway_ServiceDesc.Streams[4], GrpcGateway_GetPendingCommands_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPendingCommandsRequest, PendingCommand]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetPendingCommandsClient = grpc.ServerStreamingClient[PendingCommand]

func (c *grpcGatewayClient) CancelPendingCommands(ctx context.Context, in *CancelPendingCommandsRequest, opts ...grpc.CallOption) (*CancelPendingCommandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPendingCommandsResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_CancelPendingCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) CancelPendingMetadataUpdates(ctx context.Context, in *CancelPendingMetadataUpdatesRequest, opts ...grpc.CallOption) (*CancelPendingCommandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPendingCommandsResponse)
	err := c.cc.Invoke(ctx, GrpcGateway_CancelPendingMetadataUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcGatewayClient) GetDevicesMetadata(ctx context.Context, in *GetDevicesMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[events.DeviceMetadataUpdated], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcGateway_ServiceDesc.Streams[5], GrpcGateway_GetDevicesMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDevicesMetadataRequest, events.DeviceMetadataUpdated]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetDevicesMetadataClient = grpc.ServerStreamingClient[events.DeviceMetadataUpdated]

func (c *grpcGatewayClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcGateway_ServiceDesc.Streams[6], GrpcGateway_GetEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetEventsRequest, GetEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetEventsClient = grpc.ServerStreamingClient[GetEventsResponse]

// GrpcGatewayServer is the server API for GrpcGateway service.
// All implementations must embed UnimplementedGrpcGatewayServer
// for forward compatibility.
type GrpcGatewayServer interface {
	// Get all devices
	GetDevices(*GetDevicesRequest, grpc.ServerStreamingServer[Device]) error
	// Delete selected devices.
	DeleteDevices(context.Context, *DeleteDevicesRequest) (*DeleteDevicesResponse, error)
	// Get resource links of devices.
	GetResourceLinks(*GetResourceLinksRequest, grpc.ServerStreamingServer[events.ResourceLinksPublished]) error
	// Get resource from the device.
	GetResourceFromDevice(context.Context, *GetResourceFromDeviceRequest) (*GetResourceFromDeviceResponse, error)
	// Get resources from the resource shadow.
	GetResources(*GetResourcesRequest, grpc.ServerStreamingServer[Resource]) error
	// Update resource at the device.
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	// When the client creates a subscription.
	// Subscription doesn't guarantee that all events will be sent to the client. The client is responsible for synchronize events.
	SubscribeToEvents(grpc.BidiStreamingServer[SubscribeToEvents, Event]) error
	// Get cloud configuration
	GetHubConfiguration(context.Context, *HubConfigurationRequest) (*HubConfigurationResponse, error)
	// Delete resource at the device.
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// Create resource at the device.
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	// Enables/disables shadow synchronization for device.
	UpdateDeviceMetadata(context.Context, *UpdateDeviceMetadataRequest) (*UpdateDeviceMetadataResponse, error)
	// Gets pending commands for devices .
	GetPendingCommands(*GetPendingCommandsRequest, grpc.ServerStreamingServer[PendingCommand]) error
	// Cancels resource commands.
	CancelPendingCommands(context.Context, *CancelPendingCommandsRequest) (*CancelPendingCommandsResponse, error)
	// Cancels device metadata updates.
	CancelPendingMetadataUpdates(context.Context, *CancelPendingMetadataUpdatesRequest) (*CancelPendingCommandsResponse, error)
	// Gets metadata of the devices. Is contains online/offline or shadown synchronization status.
	GetDevicesMetadata(*GetDevicesMetadataRequest, grpc.ServerStreamingServer[events.DeviceMetadataUpdated]) error
	// Get events for given combination of device id, resource id and timestamp
	GetEvents(*GetEventsRequest, grpc.ServerStreamingServer[GetEventsResponse]) error
	mustEmbedUnimplementedGrpcGatewayServer()
}

// UnimplementedGrpcGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcGatewayServer struct{}

func (UnimplementedGrpcGatewayServer) GetDevices(*GetDevicesRequest, grpc.ServerStreamingServer[Device]) error {
	return status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedGrpcGatewayServer) DeleteDevices(context.Context, *DeleteDevicesRequest) (*DeleteDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevices not implemented")
}
func (UnimplementedGrpcGatewayServer) GetResourceLinks(*GetResourceLinksRequest, grpc.ServerStreamingServer[events.ResourceLinksPublished]) error {
	return status.Errorf(codes.Unimplemented, "method GetResourceLinks not implemented")
}
func (UnimplementedGrpcGatewayServer) GetResourceFromDevice(context.Context, *GetResourceFromDeviceRequest) (*GetResourceFromDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceFromDevice not implemented")
}
func (UnimplementedGrpcGatewayServer) GetResources(*GetResourcesRequest, grpc.ServerStreamingServer[Resource]) error {
	return status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedGrpcGatewayServer) UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedGrpcGatewayServer) SubscribeToEvents(grpc.BidiStreamingServer[SubscribeToEvents, Event]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedGrpcGatewayServer) GetHubConfiguration(context.Context, *HubConfigurationRequest) (*HubConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHubConfiguration not implemented")
}
func (UnimplementedGrpcGatewayServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedGrpcGatewayServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedGrpcGatewayServer) UpdateDeviceMetadata(context.Context, *UpdateDeviceMetadataRequest) (*UpdateDeviceMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceMetadata not implemented")
}
func (UnimplementedGrpcGatewayServer) GetPendingCommands(*GetPendingCommandsRequest, grpc.ServerStreamingServer[PendingCommand]) error {
	return status.Errorf(codes.Unimplemented, "method GetPendingCommands not implemented")
}
func (UnimplementedGrpcGatewayServer) CancelPendingCommands(context.Context, *CancelPendingCommandsRequest) (*CancelPendingCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPendingCommands not implemented")
}
func (UnimplementedGrpcGatewayServer) CancelPendingMetadataUpdates(context.Context, *CancelPendingMetadataUpdatesRequest) (*CancelPendingCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPendingMetadataUpdates not implemented")
}
func (UnimplementedGrpcGatewayServer) GetDevicesMetadata(*GetDevicesMetadataRequest, grpc.ServerStreamingServer[events.DeviceMetadataUpdated]) error {
	return status.Errorf(codes.Unimplemented, "method GetDevicesMetadata not implemented")
}
func (UnimplementedGrpcGatewayServer) GetEvents(*GetEventsRequest, grpc.ServerStreamingServer[GetEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedGrpcGatewayServer) mustEmbedUnimplementedGrpcGatewayServer() {}
func (UnimplementedGrpcGatewayServer) testEmbeddedByValue()                     {}

// UnsafeGrpcGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcGatewayServer will
// result in compilation errors.
type UnsafeGrpcGatewayServer interface {
	mustEmbedUnimplementedGrpcGatewayServer()
}

func RegisterGrpcGatewayServer(s grpc.ServiceRegistrar, srv GrpcGatewayServer) {
	// If the following call pancis, it indicates UnimplementedGrpcGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcGateway_ServiceDesc, srv)
}

func _GrpcGateway_GetDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcGatewayServer).GetDevices(m, &grpc.GenericServerStream[GetDevicesRequest, Device]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetDevicesServer = grpc.ServerStreamingServer[Device]

func _GrpcGateway_DeleteDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).DeleteDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_DeleteDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).DeleteDevices(ctx, req.(*DeleteDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_GetResourceLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResourceLinksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcGatewayServer).GetResourceLinks(m, &grpc.GenericServerStream[GetResourceLinksRequest, events.ResourceLinksPublished]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetResourceLinksServer = grpc.ServerStreamingServer[events.ResourceLinksPublished]

func _GrpcGateway_GetResourceFromDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceFromDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).GetResourceFromDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_GetResourceFromDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).GetResourceFromDevice(ctx, req.(*GetResourceFromDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_GetResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcGatewayServer).GetResources(m, &grpc.GenericServerStream[GetResourcesRequest, Resource]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetResourcesServer = grpc.ServerStreamingServer[Resource]

func _GrpcGateway_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcGatewayServer).SubscribeToEvents(&grpc.GenericServerStream[SubscribeToEvents, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_SubscribeToEventsServer = grpc.BidiStreamingServer[SubscribeToEvents, Event]

func _GrpcGateway_GetHubConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).GetHubConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_GetHubConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).GetHubConfiguration(ctx, req.(*HubConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_UpdateDeviceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).UpdateDeviceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_UpdateDeviceMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).UpdateDeviceMetadata(ctx, req.(*UpdateDeviceMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_GetPendingCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPendingCommandsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcGatewayServer).GetPendingCommands(m, &grpc.GenericServerStream[GetPendingCommandsRequest, PendingCommand]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetPendingCommandsServer = grpc.ServerStreamingServer[PendingCommand]

func _GrpcGateway_CancelPendingCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPendingCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).CancelPendingCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_CancelPendingCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).CancelPendingCommands(ctx, req.(*CancelPendingCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_CancelPendingMetadataUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPendingMetadataUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayServer).CancelPendingMetadataUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGateway_CancelPendingMetadataUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayServer).CancelPendingMetadataUpdates(ctx, req.(*CancelPendingMetadataUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcGateway_GetDevicesMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDevicesMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcGatewayServer).GetDevicesMetadata(m, &grpc.GenericServerStream[GetDevicesMetadataRequest, events.DeviceMetadataUpdated]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetDevicesMetadataServer = grpc.ServerStreamingServer[events.DeviceMetadataUpdated]

func _GrpcGateway_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcGatewayServer).GetEvents(m, &grpc.GenericServerStream[GetEventsRequest, GetEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcGateway_GetEventsServer = grpc.ServerStreamingServer[GetEventsResponse]

// GrpcGateway_ServiceDesc is the grpc.ServiceDesc for GrpcGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcgateway.pb.GrpcGateway",
	HandlerType: (*GrpcGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteDevices",
			Handler:    _GrpcGateway_DeleteDevices_Handler,
		},
		{
			MethodName: "GetResourceFromDevice",
			Handler:    _GrpcGateway_GetResourceFromDevice_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _GrpcGateway_UpdateResource_Handler,
		},
		{
			MethodName: "GetHubConfiguration",
			Handler:    _GrpcGateway_GetHubConfiguration_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _GrpcGateway_DeleteResource_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _GrpcGateway_CreateResource_Handler,
		},
		{
			MethodName: "UpdateDeviceMetadata",
			Handler:    _GrpcGateway_UpdateDeviceMetadata_Handler,
		},
		{
			MethodName: "CancelPendingCommands",
			Handler:    _GrpcGateway_CancelPendingCommands_Handler,
		},
		{
			MethodName: "CancelPendingMetadataUpdates",
			Handler:    _GrpcGateway_CancelPendingMetadataUpdates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDevices",
			Handler:       _GrpcGateway_GetDevices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResourceLinks",
			Handler:       _GrpcGateway_GetResourceLinks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResources",
			Handler:       _GrpcGateway_GetResources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _GrpcGateway_SubscribeToEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPendingCommands",
			Handler:       _GrpcGateway_GetPendingCommands_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDevicesMetadata",
			Handler:       _GrpcGateway_GetDevicesMetadata_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEvents",
			Handler:       _GrpcGateway_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc-gateway/pb/service.proto",
}
