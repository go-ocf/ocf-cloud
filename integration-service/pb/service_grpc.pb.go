// TODO overit ze pending command sa nezmaze na neexistujucom resource ak sa device pripoji a nepublishne hned resource
// Overit correlation id - ak sa pouziva rovnake napriec viacerymi resourcami

// scenare
// - Uzivatel vie vytvorit config, automaticka (backend) inkrementacia verzie
// - Uzivatel updatne config, verzia sa inkrementuje, Modal -> chces aplikovat na vsetky uz provisionnute devici? Informovat uzivatela, ze niektore devici mozu byt offline a command moze vyexpirovat.
// - Uzivatel updatne config, verzia sa inkrementuje, informujeme uzivatela ze vsetky pending commandy z predoslej verzie budu cancelnute ako aj dalsie sekvencne updaty resourcov pre predoslu verziu

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: integration-service/pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IntegrationService_CreateCondition_FullMethodName             = "/integrationservice.pb.IntegrationService/CreateCondition"
	IntegrationService_GetConditions_FullMethodName               = "/integrationservice.pb.IntegrationService/GetConditions"
	IntegrationService_DeleteConditions_FullMethodName            = "/integrationservice.pb.IntegrationService/DeleteConditions"
	IntegrationService_UpdateCondition_FullMethodName             = "/integrationservice.pb.IntegrationService/UpdateCondition"
	IntegrationService_CreateConfiguration_FullMethodName         = "/integrationservice.pb.IntegrationService/CreateConfiguration"
	IntegrationService_GetConfigurations_FullMethodName           = "/integrationservice.pb.IntegrationService/GetConfigurations"
	IntegrationService_DeleteConfigurations_FullMethodName        = "/integrationservice.pb.IntegrationService/DeleteConfigurations"
	IntegrationService_UpdateConfiguration_FullMethodName         = "/integrationservice.pb.IntegrationService/UpdateConfiguration"
	IntegrationService_InvokeConfiguration_FullMethodName         = "/integrationservice.pb.IntegrationService/InvokeConfiguration"
	IntegrationService_GetConfiguration_FullMethodName            = "/integrationservice.pb.IntegrationService/GetConfiguration"
	IntegrationService_GetAppliedConfigurations_FullMethodName    = "/integrationservice.pb.IntegrationService/GetAppliedConfigurations"
	IntegrationService_DeleteAppliedConfigurations_FullMethodName = "/integrationservice.pb.IntegrationService/DeleteAppliedConfigurations"
)

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationServiceClient interface {
	CreateCondition(ctx context.Context, in *Condition, opts ...grpc.CallOption) (*Condition, error)
	GetConditions(ctx context.Context, in *GetConditionsRequest, opts ...grpc.CallOption) (IntegrationService_GetConditionsClient, error)
	DeleteConditions(ctx context.Context, in *DeleteConditionsRequest, opts ...grpc.CallOption) (*DeleteConditionsResponse, error)
	UpdateCondition(ctx context.Context, in *Condition, opts ...grpc.CallOption) (*Condition, error)
	CreateConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error)
	GetConfigurations(ctx context.Context, in *GetConfigurationsRequest, opts ...grpc.CallOption) (IntegrationService_GetConfigurationsClient, error)
	DeleteConfigurations(ctx context.Context, in *DeleteConfigurationsRequest, opts ...grpc.CallOption) (*DeleteConfigurationsResponse, error)
	UpdateConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error)
	// streaming process of update configuration to invoker
	InvokeConfiguration(ctx context.Context, in *InvokeConfigurationRequest, opts ...grpc.CallOption) (IntegrationService_InvokeConfigurationClient, error)
	GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (IntegrationService_GetConfigurationClient, error)
	GetAppliedConfigurations(ctx context.Context, in *GetAppliedConfigurationsRequest, opts ...grpc.CallOption) (IntegrationService_GetAppliedConfigurationsClient, error)
	DeleteAppliedConfigurations(ctx context.Context, in *DeleteAppliedConfigurationsRequest, opts ...grpc.CallOption) (*DeleteAppliedConfigurationsResponse, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) CreateCondition(ctx context.Context, in *Condition, opts ...grpc.CallOption) (*Condition, error) {
	out := new(Condition)
	err := c.cc.Invoke(ctx, IntegrationService_CreateCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetConditions(ctx context.Context, in *GetConditionsRequest, opts ...grpc.CallOption) (IntegrationService_GetConditionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &IntegrationService_ServiceDesc.Streams[0], IntegrationService_GetConditions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationServiceGetConditionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntegrationService_GetConditionsClient interface {
	Recv() (*Condition, error)
	grpc.ClientStream
}

type integrationServiceGetConditionsClient struct {
	grpc.ClientStream
}

func (x *integrationServiceGetConditionsClient) Recv() (*Condition, error) {
	m := new(Condition)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *integrationServiceClient) DeleteConditions(ctx context.Context, in *DeleteConditionsRequest, opts ...grpc.CallOption) (*DeleteConditionsResponse, error) {
	out := new(DeleteConditionsResponse)
	err := c.cc.Invoke(ctx, IntegrationService_DeleteConditions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) UpdateCondition(ctx context.Context, in *Condition, opts ...grpc.CallOption) (*Condition, error) {
	out := new(Condition)
	err := c.cc.Invoke(ctx, IntegrationService_UpdateCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) CreateConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, IntegrationService_CreateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetConfigurations(ctx context.Context, in *GetConfigurationsRequest, opts ...grpc.CallOption) (IntegrationService_GetConfigurationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &IntegrationService_ServiceDesc.Streams[1], IntegrationService_GetConfigurations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationServiceGetConfigurationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntegrationService_GetConfigurationsClient interface {
	Recv() (*Configuration, error)
	grpc.ClientStream
}

type integrationServiceGetConfigurationsClient struct {
	grpc.ClientStream
}

func (x *integrationServiceGetConfigurationsClient) Recv() (*Configuration, error) {
	m := new(Configuration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *integrationServiceClient) DeleteConfigurations(ctx context.Context, in *DeleteConfigurationsRequest, opts ...grpc.CallOption) (*DeleteConfigurationsResponse, error) {
	out := new(DeleteConfigurationsResponse)
	err := c.cc.Invoke(ctx, IntegrationService_DeleteConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) UpdateConfiguration(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, IntegrationService_UpdateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) InvokeConfiguration(ctx context.Context, in *InvokeConfigurationRequest, opts ...grpc.CallOption) (IntegrationService_InvokeConfigurationClient, error) {
	stream, err := c.cc.NewStream(ctx, &IntegrationService_ServiceDesc.Streams[2], IntegrationService_InvokeConfiguration_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationServiceInvokeConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntegrationService_InvokeConfigurationClient interface {
	Recv() (*AppliedConfiguration, error)
	grpc.ClientStream
}

type integrationServiceInvokeConfigurationClient struct {
	grpc.ClientStream
}

func (x *integrationServiceInvokeConfigurationClient) Recv() (*AppliedConfiguration, error) {
	m := new(AppliedConfiguration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *integrationServiceClient) GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (IntegrationService_GetConfigurationClient, error) {
	stream, err := c.cc.NewStream(ctx, &IntegrationService_ServiceDesc.Streams[3], IntegrationService_GetConfiguration_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationServiceGetConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntegrationService_GetConfigurationClient interface {
	Recv() (*Configuration, error)
	grpc.ClientStream
}

type integrationServiceGetConfigurationClient struct {
	grpc.ClientStream
}

func (x *integrationServiceGetConfigurationClient) Recv() (*Configuration, error) {
	m := new(Configuration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *integrationServiceClient) GetAppliedConfigurations(ctx context.Context, in *GetAppliedConfigurationsRequest, opts ...grpc.CallOption) (IntegrationService_GetAppliedConfigurationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &IntegrationService_ServiceDesc.Streams[4], IntegrationService_GetAppliedConfigurations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationServiceGetAppliedConfigurationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntegrationService_GetAppliedConfigurationsClient interface {
	Recv() (*AppliedConfiguration, error)
	grpc.ClientStream
}

type integrationServiceGetAppliedConfigurationsClient struct {
	grpc.ClientStream
}

func (x *integrationServiceGetAppliedConfigurationsClient) Recv() (*AppliedConfiguration, error) {
	m := new(AppliedConfiguration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *integrationServiceClient) DeleteAppliedConfigurations(ctx context.Context, in *DeleteAppliedConfigurationsRequest, opts ...grpc.CallOption) (*DeleteAppliedConfigurationsResponse, error) {
	out := new(DeleteAppliedConfigurationsResponse)
	err := c.cc.Invoke(ctx, IntegrationService_DeleteAppliedConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations must embed UnimplementedIntegrationServiceServer
// for forward compatibility
type IntegrationServiceServer interface {
	CreateCondition(context.Context, *Condition) (*Condition, error)
	GetConditions(*GetConditionsRequest, IntegrationService_GetConditionsServer) error
	DeleteConditions(context.Context, *DeleteConditionsRequest) (*DeleteConditionsResponse, error)
	UpdateCondition(context.Context, *Condition) (*Condition, error)
	CreateConfiguration(context.Context, *Configuration) (*Configuration, error)
	GetConfigurations(*GetConfigurationsRequest, IntegrationService_GetConfigurationsServer) error
	DeleteConfigurations(context.Context, *DeleteConfigurationsRequest) (*DeleteConfigurationsResponse, error)
	UpdateConfiguration(context.Context, *Configuration) (*Configuration, error)
	// streaming process of update configuration to invoker
	InvokeConfiguration(*InvokeConfigurationRequest, IntegrationService_InvokeConfigurationServer) error
	GetConfiguration(*GetConfigurationRequest, IntegrationService_GetConfigurationServer) error
	GetAppliedConfigurations(*GetAppliedConfigurationsRequest, IntegrationService_GetAppliedConfigurationsServer) error
	DeleteAppliedConfigurations(context.Context, *DeleteAppliedConfigurationsRequest) (*DeleteAppliedConfigurationsResponse, error)
	mustEmbedUnimplementedIntegrationServiceServer()
}

// UnimplementedIntegrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationServiceServer struct {
}

func (UnimplementedIntegrationServiceServer) CreateCondition(context.Context, *Condition) (*Condition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCondition not implemented")
}
func (UnimplementedIntegrationServiceServer) GetConditions(*GetConditionsRequest, IntegrationService_GetConditionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConditions not implemented")
}
func (UnimplementedIntegrationServiceServer) DeleteConditions(context.Context, *DeleteConditionsRequest) (*DeleteConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConditions not implemented")
}
func (UnimplementedIntegrationServiceServer) UpdateCondition(context.Context, *Condition) (*Condition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCondition not implemented")
}
func (UnimplementedIntegrationServiceServer) CreateConfiguration(context.Context, *Configuration) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfiguration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetConfigurations(*GetConfigurationsRequest, IntegrationService_GetConfigurationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfigurations not implemented")
}
func (UnimplementedIntegrationServiceServer) DeleteConfigurations(context.Context, *DeleteConfigurationsRequest) (*DeleteConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigurations not implemented")
}
func (UnimplementedIntegrationServiceServer) UpdateConfiguration(context.Context, *Configuration) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedIntegrationServiceServer) InvokeConfiguration(*InvokeConfigurationRequest, IntegrationService_InvokeConfigurationServer) error {
	return status.Errorf(codes.Unimplemented, "method InvokeConfiguration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetConfiguration(*GetConfigurationRequest, IntegrationService_GetConfigurationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetAppliedConfigurations(*GetAppliedConfigurationsRequest, IntegrationService_GetAppliedConfigurationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAppliedConfigurations not implemented")
}
func (UnimplementedIntegrationServiceServer) DeleteAppliedConfigurations(context.Context, *DeleteAppliedConfigurationsRequest) (*DeleteAppliedConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliedConfigurations not implemented")
}
func (UnimplementedIntegrationServiceServer) mustEmbedUnimplementedIntegrationServiceServer() {}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s grpc.ServiceRegistrar, srv IntegrationServiceServer) {
	s.RegisterService(&IntegrationService_ServiceDesc, srv)
}

func _IntegrationService_CreateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).CreateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_CreateCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).CreateCondition(ctx, req.(*Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetConditions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConditionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationServiceServer).GetConditions(m, &integrationServiceGetConditionsServer{stream})
}

type IntegrationService_GetConditionsServer interface {
	Send(*Condition) error
	grpc.ServerStream
}

type integrationServiceGetConditionsServer struct {
	grpc.ServerStream
}

func (x *integrationServiceGetConditionsServer) Send(m *Condition) error {
	return x.ServerStream.SendMsg(m)
}

func _IntegrationService_DeleteConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).DeleteConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_DeleteConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).DeleteConditions(ctx, req.(*DeleteConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_UpdateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Condition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).UpdateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_UpdateCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).UpdateCondition(ctx, req.(*Condition))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_CreateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).CreateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_CreateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).CreateConfiguration(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetConfigurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConfigurationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationServiceServer).GetConfigurations(m, &integrationServiceGetConfigurationsServer{stream})
}

type IntegrationService_GetConfigurationsServer interface {
	Send(*Configuration) error
	grpc.ServerStream
}

type integrationServiceGetConfigurationsServer struct {
	grpc.ServerStream
}

func (x *integrationServiceGetConfigurationsServer) Send(m *Configuration) error {
	return x.ServerStream.SendMsg(m)
}

func _IntegrationService_DeleteConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).DeleteConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_DeleteConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).DeleteConfigurations(ctx, req.(*DeleteConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_UpdateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).UpdateConfiguration(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_InvokeConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InvokeConfigurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationServiceServer).InvokeConfiguration(m, &integrationServiceInvokeConfigurationServer{stream})
}

type IntegrationService_InvokeConfigurationServer interface {
	Send(*AppliedConfiguration) error
	grpc.ServerStream
}

type integrationServiceInvokeConfigurationServer struct {
	grpc.ServerStream
}

func (x *integrationServiceInvokeConfigurationServer) Send(m *AppliedConfiguration) error {
	return x.ServerStream.SendMsg(m)
}

func _IntegrationService_GetConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConfigurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationServiceServer).GetConfiguration(m, &integrationServiceGetConfigurationServer{stream})
}

type IntegrationService_GetConfigurationServer interface {
	Send(*Configuration) error
	grpc.ServerStream
}

type integrationServiceGetConfigurationServer struct {
	grpc.ServerStream
}

func (x *integrationServiceGetConfigurationServer) Send(m *Configuration) error {
	return x.ServerStream.SendMsg(m)
}

func _IntegrationService_GetAppliedConfigurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAppliedConfigurationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationServiceServer).GetAppliedConfigurations(m, &integrationServiceGetAppliedConfigurationsServer{stream})
}

type IntegrationService_GetAppliedConfigurationsServer interface {
	Send(*AppliedConfiguration) error
	grpc.ServerStream
}

type integrationServiceGetAppliedConfigurationsServer struct {
	grpc.ServerStream
}

func (x *integrationServiceGetAppliedConfigurationsServer) Send(m *AppliedConfiguration) error {
	return x.ServerStream.SendMsg(m)
}

func _IntegrationService_DeleteAppliedConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliedConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).DeleteAppliedConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_DeleteAppliedConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).DeleteAppliedConfigurations(ctx, req.(*DeleteAppliedConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationService_ServiceDesc is the grpc.ServiceDesc for IntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integrationservice.pb.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCondition",
			Handler:    _IntegrationService_CreateCondition_Handler,
		},
		{
			MethodName: "DeleteConditions",
			Handler:    _IntegrationService_DeleteConditions_Handler,
		},
		{
			MethodName: "UpdateCondition",
			Handler:    _IntegrationService_UpdateCondition_Handler,
		},
		{
			MethodName: "CreateConfiguration",
			Handler:    _IntegrationService_CreateConfiguration_Handler,
		},
		{
			MethodName: "DeleteConfigurations",
			Handler:    _IntegrationService_DeleteConfigurations_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _IntegrationService_UpdateConfiguration_Handler,
		},
		{
			MethodName: "DeleteAppliedConfigurations",
			Handler:    _IntegrationService_DeleteAppliedConfigurations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConditions",
			Handler:       _IntegrationService_GetConditions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetConfigurations",
			Handler:       _IntegrationService_GetConfigurations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InvokeConfiguration",
			Handler:       _IntegrationService_InvokeConfiguration_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetConfiguration",
			Handler:       _IntegrationService_GetConfiguration_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAppliedConfigurations",
			Handler:       _IntegrationService_GetAppliedConfigurations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "integration-service/pb/service.proto",
}
